<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>asprintf, aswprintf, vasprintf, vaswprintf</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;action=edit">
<link rel="shortcut icon" href="../../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_experimental_dynamic_asprintf skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">asprintf, aswprintf, vasprintf, vaswprintf</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<table class="t-dcl-begin"><tbody>
<tr class="t-dsc-header">
<td> <div>Defined in header <code><a href="../../header/stdio.htm" title="c/header/stdio"><tt>&lt;stdio.h&gt;</tt></a></code>
 </div></td>
<td></td>
<td></td>
</tr>
<tr class="t-dcl">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> asprintf<span class="br0">(</span> <span class="kw4">char</span> <span class="sy2">**</span><span class="kw4">restrict</span> strp, <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span><span class="kw4">restrict</span> fmt, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (1) </td>
<td> <span class="t-mark-rev t-since-dynamic-tr t-mark-ts">(dynamic memory TR)</span> </td>
</tr>
<tr class="t-dcl">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> aswprintf<span class="br0">(</span> <span class="kw4">wchar_t</span> <span class="sy2">**</span><span class="kw4">restrict</span> strp, <span class="kw4">const</span> <span class="kw4">wchar_t</span> <span class="sy2">*</span><span class="kw4">restrict</span> fmt, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (2) </td>
<td> <span class="t-mark-rev t-since-dynamic-tr t-mark-ts">(dynamic memory TR)</span> </td>
</tr>
<tr class="t-dcl">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> vasprintf<span class="br0">(</span> <span class="kw4">char</span> <span class="sy2">**</span><span class="kw4">restrict</span> strp, <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span><span class="kw4">restrict</span> fmt,<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;va_list arg <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (3) </td>
<td> <span class="t-mark-rev t-since-dynamic-tr t-mark-ts">(dynamic memory TR)</span> </td>
</tr>
<tr class="t-dcl">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> vaswprintf<span class="br0">(</span> <span class="kw4">wchar_t</span> <span class="sy2">**</span><span class="kw4">restrict</span> strp, <span class="kw4">const</span> <span class="kw4">wchar_t</span> <span class="sy2">*</span><span class="kw4">restrict</span> fmt,<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; va_list arg <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (4) </td>
<td> <span class="t-mark-rev t-since-dynamic-tr t-mark-ts">(dynamic memory TR)</span> </td>
</tr>
<tr class="t-dcl-sep"><td></td><td></td><td></td></tr>
</tbody></table>
<div class="t-li1"><span class="t-li">1)</span> Analog of <span class="t-lc"><a href="../../io/fprintf.htm" title="c/io/fprintf">sprintf</a></span>, except that it allocates a storage large enough to hold the output including the terminating null character, as if by a call to <span class="t-lc"><a href="../../memory/malloc.htm" title="c/memory/malloc">malloc</a></span>, and returns a pointer to that storage via the first argument. This pointer should be passed to <span class="t-lc"><a href="../../memory/free.htm" title="c/memory/free">free</a></span> to release the allocated storage when it is no longer needed.</div>
<div class="t-li1"><span class="t-li">2)</span> Same as <span class="t-v">(1)</span>, except that it works with wide characters <span class="t-lc">wchar_t</span> (by analogy with <span class="t-lc"><a href="../../io/fwprintf.htm" title="c/io/fwprintf">swprintf</a></span>). </div>
<div class="t-li1"><span class="t-li">3)</span> Same as <span class="t-v">(1)</span>, with the variable argument list replaced by <code>arg</code>, which shall be initialized by the <span class="t-lc">va_start</span> macro (and possibly subsequent <span class="t-lc">va_arg</span> calls).</div>
<div class="t-li1"><span class="t-li">4)</span> Same as <span class="t-v">(3)</span>, except that it works with wide characters <span class="t-lc">wchar_t</span>.</div>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./asprintf.htm#Parameters"><span class="tocnumber">1</span> <span class="toctext">Parameters</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./asprintf.htm#Return_value"><span class="tocnumber">2</span> <span class="toctext">Return value</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./asprintf.htm#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./asprintf.htm#Example"><span class="tocnumber">4</span> <span class="toctext">Example</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;action=edit&amp;section=1" title="Edit section: Parameters">edit</a>]</span> <span class="mw-headline" id="Parameters">Parameters</span></h3>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td>  strp
</td>
<td> -
</td>
<td>  A pointer to a <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">char</span><span class="sy2">*</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">wchar_t</span><span class="sy2">*</span></span></span> which will contain the formatted output
</td></tr>
<tr class="t-par">
<td>  fmt
</td>
<td> -
</td>
<td>  A format string as with <span class="t-lc"><a href="../../io/fprintf.htm" title="c/io/fprintf">printf</a></span>/<span class="t-lc"><a href="../../io/fwprintf.htm" title="c/io/fwprintf">wprintf</a></span> and related functions
</td></tr>
<tr class="t-par">
<td>  arg
</td>
<td> -
</td>
<td>  Any extra arguments are used as with <span class="t-lc"><a href="../../io/vfprintf.htm" title="c/io/vfprintf">vsprintf</a></span> and <span class="t-lc"><a href="../../io/vfwprintf.htm" title="c/io/vfwprintf">vswprintf</a></span>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;action=edit&amp;section=2" title="Edit section: Return value">edit</a>]</span> <span class="mw-headline" id="Return_value">Return value</span></h3>
<p>The number of characters written, just like <span class="t-lc"><a href="../../io/fprintf.htm" title="c/io/fprintf">sprintf</a></span> <span class="t-v">(1)</span>, <span class="t-lc"><a href="../../io/fwprintf.htm" title="c/io/fwprintf">swprintf</a></span> <span class="t-v">(2)</span>, <span class="t-lc"><a href="../../io/vfprintf.htm" title="c/io/vfprintf">vsprintf</a></span> <span class="t-v">(3)</span>, or <span class="t-lc"><a href="../../io/vfwprintf.htm" title="c/io/vfwprintf">vswprintf</a></span> <span class="t-v">(4)</span>, respectively. If memory allocation wasn't possible, or some other error occurs, these functions will return <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span><span class="nu0">1</span></span></span>, and the contents of <code>strp</code> is undefined.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>These functions are GNU extensions, not in C or POSIX. They are also available under *BSD. The FreeBSD implementation sets <code>strp</code> to <code>NULL</code> on error.
</p><p>The <code>vasprintf</code> and <code>vaswprintf</code> functions do not invoke the <span class="t-lc">va_end</span> macro.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;action=edit&amp;section=4" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><p>Can be tested with clang (C11)</p><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;stdarg.h&gt;</span>
&nbsp;
<span class="kw4">void</span> test<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span>fmt, ...<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">char</span><span class="sy2">*</span> dyn_buf<span class="sy4">;</span>
&nbsp;
    <a href="../../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"Demo asprintf:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">const</span> <span class="kw4">int</span> written_1 <span class="sy1">=</span> asprintf<span class="br0">(</span><span class="sy3">&amp;</span>dyn_buf, <span class="st0">"%s"</span>, fmt<span class="br0">)</span><span class="sy4">;</span>
    <a href="../../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"dyn_buf: <span class="es1">\"</span>%s<span class="es1">\"</span>;&nbsp;%i chars were written<span class="es1">\n</span>"</span>, dyn_buf, written_1<span class="br0">)</span><span class="sy4">;</span>
    <a href="../../memory/free.htm"><span class="kw406">free</span></a><span class="br0">(</span>dyn_buf<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <a href="../../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"Demo vasprintf:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    va_list args<span class="sy4">;</span>
    va_start<span class="br0">(</span>args, fmt<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">const</span> <span class="kw4">int</span> written_2 <span class="sy1">=</span> vasprintf<span class="br0">(</span><span class="sy3">&amp;</span>dyn_buf, fmt, args<span class="br0">)</span><span class="sy4">;</span>
    va_end<span class="br0">(</span>args<span class="br0">)</span><span class="sy4">;</span>
    <a href="../../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"dyn_buf: <span class="es1">\"</span>%s<span class="es1">\"</span>;&nbsp;%i chars were written<span class="es1">\n</span>"</span>, dyn_buf, written_2<span class="br0">)</span><span class="sy4">;</span>
    <a href="../../memory/free.htm"><span class="kw406">free</span></a><span class="br0">(</span>dyn_buf<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    test<span class="br0">(</span><span class="st0">"Testing...&nbsp;%d,&nbsp;%d,&nbsp;%d"</span>, <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">Demo asprintf:
dyn_buf: "Testing...&nbsp;%d,&nbsp;%d,&nbsp;%d"; 21 chars were written
Demo vasprintf:
dyn_buf: "Testing... 1, 2, 3"; 18 chars were written</pre></div></div> 
</div>

<!-- 
NewPP limit report
Preprocessor visited node count: 1977/1000000
Preprocessor generated node count: 6558/1000000
Post‐expand include size: 33881/4194304 bytes
Template argument size: 8686/4194304 bytes
Highest expansion depth: 15/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:20990-0!*!0!!en!*!* and timestamp 20250317172909 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;oldid=161853">https://en.cppreference.com/mwiki/index.php?title=c/experimental/dynamic/asprintf&amp;oldid=161853</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.395 secs. -->
	


</body><!-- Cached 20250317172909 --></html>