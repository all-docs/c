<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Standard library header &lt;stdlib.h&gt;</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdlib&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdlib&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_header_stdlib skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading"><span style="font-size:0.7em; line-height:130%">Standard library header</span> &lt;stdlib.h&gt;</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>This header is a part of <a href="../program.htm" title="c/program">program support utilities</a> library, in particular, it provides functions for program termination, <a href="../memory.htm" title="c/memory">memory management</a>, <a href="../string.htm" title="c/string">string conversions</a>, <a href="../numeric/random.htm" title="c/numeric/random">random numbers</a> generation. The header also provides some <a href="../algorithm.htm" title="c/algorithm">algorithms</a>.
</p>
<table class="t-dsc-begin">

<tbody><tr>
<td colspan="2"> <h3> <span class="mw-headline" id="Functions">Functions</span></h3>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/abort.htm" title="c/program/abort"> <span class="t-lines"><span>abort</span></span></a></div></div>
</td>
<td>   causes abnormal program termination (without cleaning up) <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_abort&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/exit.htm" title="c/program/exit"> <span class="t-lines"><span>exit</span></span></a></div></div>
</td>
<td>   causes normal program termination with cleaning up <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_exit&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/quick_exit.htm" title="c/program/quick exit"> <span class="t-lines"><span>quick_exit</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   causes normal program termination without completely cleaning up  <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_quick_exit&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/_Exit.htm" title="c/program/ Exit"> <span class="t-lines"><span>_Exit</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c99">(C99)</span></span></span></div></div>
</td>
<td>   causes normal program termination without cleaning up  <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_Exit&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/atexit.htm" title="c/program/atexit"> <span class="t-lines"><span>atexit</span></span></a></div></div>
</td>
<td>   registers a function to be called on <span class="t-lc"><a href="../program/exit.htm" title="c/program/exit">exit()</a></span> invocation <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_atexit&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/at_quick_exit.htm" title="c/program/at quick exit"> <span class="t-lines"><span>at_quick_exit</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   registers a function to be called on <a href="../program/quick_exit.htm" title="c/program/quick exit"><tt>quick_exit</tt></a> invocation  <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_at_quick_exit&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../program/EXIT_status.htm" title="c/program/EXIT status"> <span class="t-lines"><span>EXIT_SUCCESS</span><span>EXIT_FAILURE</span></span></a></div></div>
</td>
<td>   indicates program execution execution status <br> <span class="t-mark">(macro constant)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/program/dsc_EXIT_status&amp;action=edit">[edit]</a></span>
</td></tr>
</tbody></table>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tbody><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br>Reason: Add more from 7.24 General utilities &lt;stdlib.h&gt; </td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdlib&amp;action=edit&amp;section=1" title="Edit section: Synopsis">edit</a>]</span> <span class="mw-headline" id="Synopsis">Synopsis</span></h3>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tbody><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br>Reason: Add more from B.23 General utilities &lt;stdlib.h&gt; </td></tr></tbody></table>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define __STDC_VERSION_STDLIB_H__ 202311L</span>
&nbsp;
<span class="co1">// TODO: types and macros</span>
&nbsp;
<span class="kw4">void</span> <a href="../thread/ONCE_FLAG_INIT.htm"><span class="kw1024">call_once</span></a><span class="br0">(</span><a href="../thread.htm"><span class="kw1022">once_flag</span></a><span class="sy2">*</span> flag, <span class="kw4">void</span> <span class="br0">(</span><span class="sy2">*</span>func<span class="br0">)</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">double</span> <a href="../string/byte/atof.htm"><span class="kw540">atof</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> nptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../string/byte/atoi.htm"><span class="kw541">atoi</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> nptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">int</span> <a href="../string/byte/atoi.htm"><span class="kw542">atol</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> nptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> <a href="../string/byte/atoi.htm"><span class="kw543">atoll</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> nptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromd<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, <span class="kw4">double</span> fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromf<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, <span class="kw4">float</span> fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfroml<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, <span class="kw4">long</span> <span class="kw4">double</span> fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">double</span> <a href="../string/byte/strtof.htm"><span class="kw549">strtod</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">float</span> <a href="../string/byte/strtof.htm"><span class="kw548">strtof</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">double</span> <a href="../string/byte/strtof.htm"><span class="kw550">strtold</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">int</span> <a href="../string/byte/strtol.htm"><span class="kw544">strtol</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr, <span class="kw4">int</span> base<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> <a href="../string/byte/strtol.htm"><span class="kw545">strtoll</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr, <span class="kw4">int</span> base<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> <a href="../string/byte/strtoul.htm"><span class="kw546">strtoul</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr, <span class="kw4">int</span> base<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> <a href="../string/byte/strtoul.htm"><span class="kw547">strtoull</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr,
                                <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr, <span class="kw4">int</span> base<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../numeric/random/rand.htm"><span class="kw741">rand</span></a><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> <a href="../numeric/random/srand.htm"><span class="kw740">srand</span></a><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> seed<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span><span class="sy2">*</span> aligned_alloc<span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> alignment, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span><span class="sy2">*</span> <a href="../memory/calloc.htm"><span class="kw404">calloc</span></a><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> nmemb, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> <a href="../memory/free.htm"><span class="kw406">free</span></a><span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> ptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> free_sized<span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> ptr, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> free_aligned_sized<span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> ptr, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> alignment, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span><span class="sy2">*</span> <a href="../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span><span class="sy2">*</span> <a href="../memory/realloc.htm"><span class="kw405">realloc</span></a><span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> ptr, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">[</span><span class="br0">[</span>noreturn<span class="br0">]</span><span class="br0">]</span> <span class="kw4">void</span> <a href="../program/abort.htm"><span class="kw487">abort</span></a><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../program/atexit.htm"><span class="kw491">atexit</span></a><span class="br0">(</span><span class="kw4">void</span> <span class="br0">(</span><span class="sy2">*</span>func<span class="br0">)</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../program/at_quick_exit.htm"><span class="kw492">at_quick_exit</span></a><span class="br0">(</span><span class="kw4">void</span> <span class="br0">(</span><span class="sy2">*</span>func<span class="br0">)</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">[</span><span class="br0">[</span>noreturn<span class="br0">]</span><span class="br0">]</span> <span class="kw4">void</span> <a href="../program/exit.htm"><span class="kw488">exit</span></a><span class="br0">(</span><span class="kw4">int</span> status<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">[</span><span class="br0">[</span>noreturn<span class="br0">]</span><span class="br0">]</span> <span class="kw4">void</span> <a href="../program/_Exit.htm"><span class="kw490">_Exit</span></a><span class="br0">(</span><span class="kw4">int</span> status<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">char</span><span class="sy2">*</span> <a href="../program/getenv.htm"><span class="kw496">getenv</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> name<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">[</span><span class="br0">[</span>noreturn<span class="br0">]</span><span class="br0">]</span> <span class="kw4">void</span> <a href="../program/quick_exit.htm"><span class="kw489">quick_exit</span></a><span class="br0">(</span><span class="kw4">int</span> status<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../program/system.htm"><span class="kw495">system</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> string<span class="br0">)</span><span class="sy4">;</span>
QVoid<span class="sy2">*</span> <a href="../algorithm/bsearch.htm"><span class="kw818">bsearch</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> key, QVoid<span class="sy2">*</span> base, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> nmemb, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size,
               <span class="kw4">int</span> <span class="br0">(</span><span class="sy2">*</span>compar<span class="br0">)</span><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> , <span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> <span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> <a href="../algorithm/qsort.htm"><span class="kw817">qsort</span></a><span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> base, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> nmemb, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> size,
           <span class="kw4">int</span> <span class="br0">(</span><span class="sy2">*</span>compar<span class="br0">)</span><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> , <span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> <span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../numeric/math/abs.htm"><span class="kw641">abs</span></a><span class="br0">(</span><span class="kw4">int</span> j<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">int</span> <a href="../numeric/math/abs.htm"><span class="kw642">labs</span></a><span class="br0">(</span><span class="kw4">long</span> <span class="kw4">int</span> j<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> <a href="../numeric/math/abs.htm"><span class="kw643">llabs</span></a><span class="br0">(</span><span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> j<span class="br0">)</span><span class="sy4">;</span>
div_t <a href="../numeric/math/div.htm"><span class="kw645">div</span></a><span class="br0">(</span><span class="kw4">int</span> numer, <span class="kw4">int</span> denom<span class="br0">)</span><span class="sy4">;</span>
ldiv_t <a href="../numeric/math/div.htm"><span class="kw646">ldiv</span></a><span class="br0">(</span><span class="kw4">long</span> <span class="kw4">int</span> numer, <span class="kw4">long</span> <span class="kw4">int</span> denom<span class="br0">)</span><span class="sy4">;</span>
lldiv_t lldiv<span class="br0">(</span><span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> numer, <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> denom<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../string/multibyte/mblen.htm"><span class="kw575">mblen</span></a><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../string/multibyte/mbtowc.htm"><span class="kw576">mbtowc</span></a><span class="br0">(</span><span class="kw4">wchar_t</span><span class="sy2">*</span> <span class="kw4">restrict</span> pwc, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> <a href="../string/multibyte/wctomb.htm"><span class="kw577">wctomb</span></a><span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> s, <span class="kw4">wchar_t</span> wc<span class="br0">)</span><span class="sy4">;</span>
<a href="../types/size_t.htm"><span class="kw100">size_t</span></a> <a href="../string/multibyte/mbstowcs.htm"><span class="kw578">mbstowcs</span></a><span class="br0">(</span><span class="kw4">wchar_t</span><span class="sy2">*</span> <span class="kw4">restrict</span> pwcs, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n<span class="br0">)</span><span class="sy4">;</span>
<a href="../types/size_t.htm"><span class="kw100">size_t</span></a> <a href="../string/multibyte/wcstombs.htm"><span class="kw579">wcstombs</span></a><span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <span class="kw4">const</span> <span class="kw4">wchar_t</span><span class="sy2">*</span> <span class="kw4">restrict</span> pwcs, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n<span class="br0">)</span><span class="sy4">;</span>
<a href="../types/size_t.htm"><span class="kw100">size_t</span></a> memalignment<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> p<span class="br0">)</span><span class="sy4">;</span></pre></div></div>
<p>Only if the implementation defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_IEC_60559_DFP__</span></span>:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> strfromd32<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _Decimal32 fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromd64<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _Decimal64 fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromd128<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _Decimal128 fp<span class="br0">)</span><span class="sy4">;</span>
_Decimal32 strtod32<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
_Decimal64 strtod64<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
_Decimal128 strtod128<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span></pre></div></div>
<p>Only if the implementation defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_IEC_60559_TYPES__</span></span> and additionally the user code
defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_WANT_IEC_60559_TYPES_EXT__</span></span> before any inclusion of <code>&lt;stdlib.h&gt;</code>:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifdef __STDC_WANT_IEC_60559_TYPES_EXT__</span>
<span class="kw4">int</span> strfromfN<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _FloatN fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromfNx<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _FloatNx fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromdN<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _DecimalN fp<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromdNx<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, _DecimalNx fp<span class="br0">)</span><span class="sy4">;</span>
_FloatN strtofN<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
_FloatNx strtofNx<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
_DecimalN strtodN<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
_DecimalNx strtodNx<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromencfN<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format,
                 <span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> encptr<span class="br0">[</span><span class="kw4">restrict</span> <span class="kw4">static</span> N<span class="sy2">/</span><span class="nu0">8</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromencdecdN<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format,
                    <span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> encptr<span class="br0">[</span><span class="kw4">restrict</span> <span class="kw4">static</span> N<span class="sy2">/</span><span class="nu0">8</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">int</span> strfromencbindN<span class="br0">(</span><span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, <a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format,
                    <span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> encptr<span class="br0">[</span><span class="kw4">restrict</span> <span class="kw4">static</span> N<span class="sy2">/</span><span class="nu0">8</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> strtoencfN<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> encptr<span class="br0">[</span><span class="kw4">restrict</span> <span class="kw4">static</span> N<span class="sy2">/</span><span class="nu0">8</span><span class="br0">]</span>,
                <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> strtoencdecdN<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> encptr<span class="br0">[</span><span class="kw4">restrict</span> <span class="kw4">static</span> N<span class="sy2">/</span><span class="nu0">8</span><span class="br0">]</span>,
                   <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> strtoencbindN<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> encptr<span class="br0">[</span><span class="kw4">restrict</span> <span class="kw4">static</span> N<span class="sy2">/</span><span class="nu0">8</span><span class="br0">]</span>,
                   <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> nptr, <span class="kw4">char</span><span class="sy2">**</span> <span class="kw4">restrict</span> endptr<span class="br0">)</span><span class="sy4">;</span>
<span class="co2">#endif</span></pre></div></div>
<p>Only if the implementation defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_LIB_EXT1__</span></span> and additionally the user
code defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_WANT_LIB_EXT1__</span></span> before any inclusion of <code>stdio.h</code>:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#if defined(__STDC_WANT_LIB_EXT1__)</span>
constraint_handler_t set_constraint_handler_s<span class="br0">(</span>constraint_handler_t handler<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> abort_handler_s<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> msg, <span class="kw4">void</span><span class="sy2">*</span> <span class="kw4">restrict</span> ptr, errno_t error<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> ignore_handler_s<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> msg, <span class="kw4">void</span><span class="sy2">*</span> <span class="kw4">restrict</span> ptr, errno_t error<span class="br0">)</span><span class="sy4">;</span>
errno_t getenv_s<span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a><span class="sy2">*</span> <span class="kw4">restrict</span> len, <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> value, rsize_t maxsize,
                 <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> name<span class="br0">)</span><span class="sy4">;</span>
QVoid<span class="sy2">*</span> bsearch_s<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> key, QVoid<span class="sy2">*</span> base, rsize_t nmemb, rsize_t size,
                 <span class="kw4">int</span> <span class="br0">(</span><span class="sy2">*</span>compar<span class="br0">)</span><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> k, <span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> y, <span class="kw4">void</span><span class="sy2">*</span> context<span class="br0">)</span>,
                               <span class="kw4">void</span><span class="sy2">*</span> context<span class="br0">)</span><span class="sy4">;</span>
errno_t qsort_s<span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> base, rsize_t nmemb, rsize_t size,
                <span class="kw4">int</span> <span class="br0">(</span><span class="sy2">*</span>compar<span class="br0">)</span><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> x, <span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> y, <span class="kw4">void</span><span class="sy2">*</span> context<span class="br0">)</span>,
                              <span class="kw4">void</span><span class="sy2">*</span> context<span class="br0">)</span><span class="sy4">;</span>
errno_t wctomb_s<span class="br0">(</span><span class="kw4">int</span><span class="sy2">*</span> <span class="kw4">restrict</span> status, <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> s, rsize_t smax,
                 <span class="kw4">wchar_t</span> wc<span class="br0">)</span><span class="sy4">;</span>
errno_t mbstowcs_s<span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a><span class="sy2">*</span> <span class="kw4">restrict</span> retval, <span class="kw4">wchar_t</span><span class="sy2">*</span> <span class="kw4">restrict</span> dst, rsize_t dstmax,
                   <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> src, rsize_t len<span class="br0">)</span><span class="sy4">;</span>
errno_t wcstombs_s<span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a><span class="sy2">*</span> <span class="kw4">restrict</span> retval, <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> dst, rsize_t dstmax,
                   <span class="kw4">const</span> <span class="kw4">wchar_t</span><span class="sy2">*</span> <span class="kw4">restrict</span> src, rsize_t len<span class="br0">)</span><span class="sy4">;</span>
<span class="co2">#endif</span></pre></div></div>

<!-- 
NewPP limit report
Preprocessor visited node count: 3980/1000000
Preprocessor generated node count: 7963/1000000
Post‐expand include size: 84396/4194304 bytes
Template argument size: 20215/4194304 bytes
Highest expansion depth: 20/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:23241-0!*!0!!*!*!* and timestamp 20250215220845 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdlib&amp;oldid=180220">https://en.cppreference.com/mwiki/index.php?title=c/header/stdlib&amp;oldid=180220</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="https://en.cppreference.com/w/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://en.cppreference.com/w/Category%253ATodo_with_reason.html" title="Category:Todo with reason">Todo with reason</a></li></ul></div></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.571 secs. -->
	


</body><!-- Cached 20250215220845 --></html>