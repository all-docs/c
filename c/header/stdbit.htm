<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Standard library header &lt;stdbit.h&gt;&nbsp;(C23)</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdbit&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdbit&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_header_stdbit skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading"><span style="font-size:0.7em; line-height:130%">Standard library header</span> &lt;stdbit.h&gt;&nbsp;<span class="t-mark-rev t-since-c23">(C23)</span></h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>This header is part of the <a href="../numeric.htm" title="c/numeric">numeric</a> library, in particular, it provides macros and functions to work with the <a href="./stdbit.htm#Macro_constants">byte ordering</a> and <a href="./stdbit.htm#Functions">byte and bit representation</a> of C objects.
</p>
<table class="t-dsc-begin">

<tbody><tr>
<td colspan="2"> <h3> <span class="mw-headline" id="Functions">Functions</span></h3>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="../numeric/bit/stdc_leading_zeros.htm" title="c/numeric/bit/stdc leading zeros"> <span class="t-lines"><span>stdc_leading_zeros</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> counts the number of consecutive <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> bits, starting from the most significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_leading_zeros&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_leading_ones&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc leading ones (page does not exist)"> <span class="t-lines"><span>stdc_leading_ones</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> counts the number of consecutive <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> bits, starting from the most significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_leading_ones&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_trailing_zeros&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc trailing zeros (page does not exist)"> <span class="t-lines"><span>stdc_trailing_zeros</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> counts the number of consecutive <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> bits, starting from the least significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_trailing_zeros&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_trailing_ones&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc trailing ones (page does not exist)"> <span class="t-lines"><span>stdc_trailing_ones</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> counts the number of consecutive <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> bits, starting from the least significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_trailing_ones&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_first_leading_zero&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc first leading zero (page does not exist)"> <span class="t-lines"><span>stdc_first_leading_zero</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the first position of <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> bit, starting from the most significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_first_leading_zero&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_first_leading_one&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc first leading one (page does not exist)"> <span class="t-lines"><span>stdc_first_leading_one</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the first position of <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> bit, starting from the most significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_first_leading_one&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_first_trailing_zero&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc first trailing zero (page does not exist)"> <span class="t-lines"><span>stdc_first_trailing_zero</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the first position of <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> bit, starting from the least significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_first_trailing_zero&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_first_trailing_one&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc first trailing one (page does not exist)"> <span class="t-lines"><span>stdc_first_trailing_one</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the first position of <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> bit, starting from the least significant bit<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_first_trailing_one&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_count_zeros&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc count zeros (page does not exist)"> <span class="t-lines"><span>stdc_count_zeros</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> counts the number of <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> bits in an unsigned integer<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_count_zeros&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_count_ones&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc count ones (page does not exist)"> <span class="t-lines"><span>stdc_count_ones</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> counts the number of <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> bits in an unsigned integer<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_count_ones&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_has_single_bit&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc has single bit (page does not exist)"> <span class="t-lines"><span>stdc_has_single_bit</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> checks if a number is an integral power of <span class="texhtml" style="white-space: nowrap;">2</span><br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_has_single_bit&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_bit_width&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc bit width (page does not exist)"> <span class="t-lines"><span>stdc_bit_width</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the smallest number of bits needed to represent the given value<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_bit_width&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_bit_floor&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc bit floor (page does not exist)"> <span class="t-lines"><span>stdc_bit_floor</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the largest integral power of <span class="texhtml" style="white-space: nowrap;">2</span> not greater than the given value<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_bit_floor&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td> <div class="t-dsc-member-div"><div><a href="https://en.cppreference.com/mwiki/index.php?title=c/numeric/bit/stdc_bit_ceil&amp;action=edit&amp;redlink=1" class="new" title="c/numeric/bit/stdc bit ceil (page does not exist)"> <span class="t-lines"><span>stdc_bit_ceil</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td> finds the smallest integral power of <span class="texhtml" style="white-space: nowrap;">2</span> not less than the given value<br><span class="t-mark">(type-generic function macro)</span><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_stdc_bit_ceil&amp;action=edit">[edit]</a></span>
</td></tr>

<tr>
<td colspan="2"> <h3> <span class="mw-headline" id="Macro_constants">Macro constants</span></h3>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../numeric/endian.htm" title="c/numeric/bit/endian"> <span class="t-lines"><span>__STDC_ENDIAN_LITTLE__</span><span>__STDC_ENDIAN_BIG__
</span><span>__STDC_ENDIAN_NATIVE__</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c23">(C23)</span></span></span></div></div>
</td>
<td>  indicates the endianness of scalar types <br> <span class="t-mark">(macro constant)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/numeric/dsc_endian&amp;action=edit">[edit]</a></span>
</td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdbit&amp;action=edit&amp;section=1" title="Edit section: Synopsis">edit</a>]</span> <span class="mw-headline" id="Synopsis">Synopsis</span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define __STDC_VERSION_STDBIT_H__ 202311L</span>
&nbsp;
<span class="co2">#define __STDC_ENDIAN_LITTLE__ /* implementation-defined */</span>
<span class="co2">#define __STDC_ENDIAN_BIG__    /* implementation-defined */</span>
<span class="co2">#define __STDC_ENDIAN_NATIVE__ /* implementation-defined */</span>
&nbsp;
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_zeros_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_zeros_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_zeros_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_zeros_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_zeros_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_leading_zeros<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_ones_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_ones_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_ones_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_ones_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_leading_ones_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_leading_ones<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_zeros_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_zeros_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_zeros_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_zeros_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_zeros_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_trailing_zeros<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_ones_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_ones_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_ones_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_ones_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_trailing_ones_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_trailing_ones<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_zero_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_zero_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_zero_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_zero_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_zero_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_first_leading_zero<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_one_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_one_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_one_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_one_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_leading_one_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_first_leading_one<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_zero_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_zero_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_zero_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_zero_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_zero_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_first_trailing_zero<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_one_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_one_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_one_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_one_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_first_trailing_one_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_first_trailing_one<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_zeros_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_zeros_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_zeros_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_zeros_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_zeros_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_count_zeros<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_ones_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_ones_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_ones_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_ones_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_count_ones_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_count_ones<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
bool stdc_has_single_bit_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
bool stdc_has_single_bit_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
bool stdc_has_single_bit_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
bool stdc_has_single_bit_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
bool stdc_has_single_bit_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
bool stdc_has_single_bit<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_width_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_width_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_width_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_width_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_width_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_return_type*/</span>
stdc_bit_width<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> stdc_bit_floor_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">short</span> stdc_bit_floor_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_floor_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> stdc_bit_floor_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> stdc_bit_floor_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_value_type*/</span>
stdc_bit_floor<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> stdc_bit_ceil_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">short</span> stdc_bit_ceil_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_bit_ceil_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> stdc_bit_ceil_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> stdc_bit_ceil_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_value_type*/</span>
stdc_bit_ceil<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value<span class="br0">)</span> <span class="br0">[</span><span class="br0">[</span>unsequenced<span class="br0">]</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> stdc_rotate_left_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">short</span> stdc_rotate_left_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_rotate_left_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> stdc_rotate_left_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> stdc_rotate_left_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_value_type*/</span>
stdc_rotate_left<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value, generic_count_type count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> stdc_rotate_right_uc<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">short</span> stdc_rotate_right_us<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">short</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">int</span> stdc_rotate_right_ui<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> stdc_rotate_right_ul<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> stdc_rotate_right_ull<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> value, <span class="kw4">unsigned</span> <span class="kw4">int</span> count<span class="br0">)</span><span class="sy4">;</span>
<span class="coMULTI">/*generic_value_type*/</span>
stdc_rotate_right<span class="br0">(</span><span class="coMULTI">/*generic_value_type*/</span> value, generic_count_type count<span class="br0">)</span><span class="sy4">;</span></pre></div></div>

<!-- 
NewPP limit report
Preprocessor visited node count: 4541/1000000
Preprocessor generated node count: 5345/1000000
Post‐expand include size: 138319/4194304 bytes
Template argument size: 34615/4194304 bytes
Highest expansion depth: 20/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:23234-0!*!0!!*!*!* and timestamp 20250215221340 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/header/stdbit&amp;oldid=180174">https://en.cppreference.com/mwiki/index.php?title=c/header/stdbit&amp;oldid=180174</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.716 secs. -->
	


</body><!-- Cached 20250215221340 --></html>