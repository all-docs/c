<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>volatile type qualifier</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_volatile skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">volatile type qualifier</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Each individual type in the C <a href="compatible_type.htm" title="c/language/type">type system</a> has several <i>qualified</i> versions of that type, corresponding to one, two, or all three of the <a href="const.htm" title="c/language/const"><code>const</code></a>, <code>volatile</code>, and, for pointers to object types, <a href="restrict.htm" title="c/language/restrict"><code>restrict</code></a> qualifiers. This page describes the effects of the <code>volatile</code> qualifier.
</p><p>Every access (both read and write) made through an lvalue expression of volatile-qualified type is considered an observable side effect for the purpose of optimization and is evaluated strictly according to the rules of the abstract machine (that is, all writes are completed at some time before the next sequence point). This means that within a single thread of execution, a volatile access cannot be optimized out or reordered relative to another visible side effect that is separated by a <a href="eval_order.htm" title="c/language/eval order">sequence point</a> from the volatile access.
</p><p>A cast of a non-volatile value to a volatile type has no effect. To access a non-volatile object using volatile semantics, its address must be cast to a pointer-to-volatile and then the access must be made through that pointer.
</p><p>Any attempt to read or write to an object whose type is volatile-qualified through a non-volatile lvalue results in undefined behavior:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">volatile</span> <span class="kw4">int</span> n <span class="sy1">=</span> <span class="nu0">1</span><span class="sy4">;</span> <span class="co1">// object of volatile-qualified type</span>
<span class="kw4">int</span><span class="sy2">*</span> p <span class="sy1">=</span> <span class="br0">(</span><span class="kw4">int</span><span class="sy2">*</span><span class="br0">)</span><span class="sy3">&amp;</span>n<span class="sy4">;</span>
<span class="kw4">int</span> val <span class="sy1">=</span> <span class="sy2">*</span>p<span class="sy4">;</span> <span class="co1">// undefined behavior</span></pre></div></div>
<p>A member of a volatile-qualified structure or union type acquires the qualification of the type it belongs to (both when accessed using the <code><b>.</b></code> operator or the <code><b>-&gt;</b></code> operator):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">struct</span> s <span class="br0">{</span> <span class="kw4">int</span> i<span class="sy4">;</span> <span class="kw4">const</span> <span class="kw4">int</span> ci<span class="sy4">;</span> <span class="br0">}</span> s<span class="sy4">;</span>
<span class="co1">// the type of s.i is int, the type of s.ci is const int</span>
<span class="kw4">volatile</span> <span class="kw1">struct</span> s vs<span class="sy4">;</span>
<span class="co1">// the types of vs.i and vs.ci are volatile int and const volatile int</span></pre></div></div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c23"><td>
<p>If an array type is declared with the volatile type qualifier (through the use of <a href="typedef.htm" title="c/language/typedef"><code>typedef</code></a>), the array type is not volatile-qualified, but its element type is.
</p>
</td>
<td><span class="t-mark-rev t-until-c23">(until C23)</span></td></tr>
<tr class="t-rev t-since-c23"><td>
<p>An array type and its element type are always considered to be identically volatile-qualified.
</p>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">typedef</span> <span class="kw4">int</span> A<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy4">;</span>
<span class="kw4">volatile</span> A a <span class="sy1">=</span> <span class="br0">{</span><span class="br0">{</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">7</span>, <span class="nu0">8</span>, <span class="nu0">9</span><span class="br0">}</span><span class="br0">}</span><span class="sy4">;</span> <span class="co1">// array of array of volatile int</span>
<span class="kw4">int</span><span class="sy2">*</span> pi <span class="sy1">=</span> a<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy4">;</span> <span class="co1">// Error: a[0] has type volatile int*</span>
<span class="kw4">void</span> <span class="sy2">*</span>unqual_ptr <span class="sy1">=</span> a<span class="sy4">;</span> <span class="co1">// OK until C23; error since C23</span>
<span class="co1">// Notes: clang applies the rule in C++/C23 even in C89-C17 modes</span></pre></div></div>
<p>If a function type is declared with the volatile type qualified (through the use of <a href="typedef.htm" title="c/language/typedef"><code>typedef</code></a>), the behavior is undefined.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<p>In a function declaration, the keyword <code>volatile</code> may appear inside the square brackets that are used to declare an array type of a function parameter. It qualifies the pointer type to which the array type is transformed.
</p><p>The following two declarations declare the same function:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">double</span> x<span class="br0">[</span><span class="kw4">volatile</span><span class="br0">]</span>, <span class="kw4">const</span> <span class="kw4">double</span> y<span class="br0">[</span><span class="kw4">volatile</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">double</span> <span class="sy2">*</span> <span class="kw4">volatile</span> x, <span class="kw4">const</span> <span class="kw4">double</span> <span class="sy2">*</span> <span class="kw4">volatile</span> y<span class="br0">)</span><span class="sy4">;</span></pre></div></div>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<p>A pointer to a non-volatile type can be implicitly converted to a pointer to the volatile-qualified version of the same or <a href="compatible_type.htm" title="c/language/compatible type" class="mw-redirect">compatible</a> type. The reverse conversion requires a cast expression.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span><span class="sy2">*</span> p <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="kw4">volatile</span> <span class="kw4">int</span><span class="sy2">*</span> vp <span class="sy1">=</span> p<span class="sy4">;</span> <span class="co1">// OK: adds qualifiers (int to volatile int)</span>
p <span class="sy1">=</span> vp<span class="sy4">;</span> <span class="co1">// Error: discards qualifiers (volatile int to int)</span>
p <span class="sy1">=</span> <span class="br0">(</span><span class="kw4">int</span><span class="sy2">*</span><span class="br0">)</span>vp<span class="sy4">;</span> <span class="co1">// OK: cast</span></pre></div></div>
<p>Note that pointer to pointer to <code>T</code> is not convertible to pointer to pointer to <code>volatile T</code>; for two types to be compatible, their qualifications must be identical:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">char</span> <span class="sy2">*</span>p <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="kw4">volatile</span> <span class="kw4">char</span> <span class="sy2">**</span>vpp <span class="sy1">=</span> <span class="sy3">&amp;</span>p<span class="sy4">;</span> <span class="co1">// Error: char* and volatile char* are not compatible types</span>
<span class="kw4">char</span> <span class="sy2">*</span> <span class="kw4">volatile</span> <span class="sy2">*</span>pvp <span class="sy1">=</span> <span class="sy3">&amp;</span>p<span class="sy4">;</span> <span class="co1">// OK, adds qualifiers (char* to char*volatile)</span></pre></div></div>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="volatile.htm#Uses_of_volatile"><span class="tocnumber">1</span> <span class="toctext">Uses of volatile</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="volatile.htm#Keywords"><span class="tocnumber">2</span> <span class="toctext">Keywords</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="volatile.htm#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="volatile.htm#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="volatile.htm#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit&amp;section=1" title="Edit section: Uses of volatile">edit</a>]</span> <span class="mw-headline" id="Uses_of_volatile">Uses of volatile</span></h3>
<div class="t-li1"><span class="t-li">1)</span> <a href="static_storage_duration.htm" title="c/language/static storage duration"><code>static</code></a> <code>volatile</code> objects model memory-mapped I/O ports, and <code>static</code> <code>const</code> <code>volatile</code> objects model memory-mapped input ports, such as a real-time clock:
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">volatile</span> <span class="kw4">short</span> <span class="sy2">*</span>ttyport <span class="sy1">=</span> <span class="br0">(</span><span class="kw4">volatile</span> <span class="kw4">short</span><span class="sy2">*</span><span class="br0">)</span>TTYPORT_ADDR<span class="sy4">;</span>
<span class="kw1">for</span><span class="br0">(</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> N<span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">)</span>
    <span class="sy2">*</span>ttyport <span class="sy1">=</span> a<span class="br0">[</span>i<span class="br0">]</span><span class="sy4">;</span> <span class="co1">// *ttyport is an lvalue of type volatile short</span></pre></div></div></div>
<div class="t-li1"><span class="t-li">2)</span> <code>static</code> <code>volatile</code> objects of type <span class="t-lc"><a href="../program/sig_atomic_t.html" title="c/program/sig atomic t">sig_atomic_t</a></span> are used for communication with <span class="t-lc"><a href="../program/signal.html" title="c/program/signal">signal</a></span> handlers.</div>
<div class="t-li1"><span class="t-li">3)</span> <code>volatile</code> variables that are local to a function that contains an invocation of the <span class="t-lc"><a href="../program/setjmp.html" title="c/program/setjmp">setjmp</a></span> macro are the only local variables guaranteed to retain their values after <span class="t-lc"><a href="../program/longjmp.html" title="c/program/longjmp">longjmp</a></span> returns.</div>
<div class="t-li1"><span class="t-li">4)</span> In addition, volatile variables can be used to disable certain forms of optimization, e.g. to disable dead store elimination or constant folding for micro-benchmarks.</div>
<p>Note that volatile variables are not suitable for communication between threads; they do not offer atomicity, synchronization, or memory ordering. A read from a volatile variable that is modified by another thread without synchronization or concurrent modification from two unsynchronized threads is undefined behavior due to a data race.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit&amp;section=2" title="Edit section: Keywords">edit</a>]</span> <span class="mw-headline" id="Keywords">Keywords</span></h3>
<p><a href="https://en.cppreference.com/w/cpp/keyword/volatile.html" title="cpp/keyword/volatile"><tt>volatile</tt></a>
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit&amp;section=3" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><p>demonstrates the use of volatile to disable optimizations</p><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;time.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <a href="../chrono/clock_t.html"><span class="kw525">clock_t</span></a> t <span class="sy1">=</span> <a href="../chrono/clock.html"><span class="kw514">clock</span></a><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">double</span> d <span class="sy1">=</span> <span class="nu16">0.0</span><span class="sy4">;</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="nu0">10000</span><span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> m <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> m <span class="sy1">&lt;</span> <span class="nu0">10000</span><span class="sy4">;</span> <span class="sy2">++</span>m<span class="br0">)</span>
            d <span class="sy2">+</span><span class="sy1">=</span> d <span class="sy2">*</span> n <span class="sy2">*</span> m<span class="sy4">;</span> <span class="co1">// reads from and writes to a non-volatile </span>
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"Modified a non-volatile variable 100m times. "</span>
           <span class="st0">"Time used:&nbsp;%.2f seconds<span class="es1">\n</span>"</span>,
           <span class="br0">(</span><span class="kw4">double</span><span class="br0">)</span><span class="br0">(</span><a href="../chrono/clock.html"><span class="kw514">clock</span></a><span class="br0">(</span><span class="br0">)</span> <span class="sy2">-</span> t<span class="br0">)</span><span class="sy2">/</span><a href="../chrono/CLOCKS_PER_SEC.html"><span class="kw522">CLOCKS_PER_SEC</span></a><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    t <span class="sy1">=</span> <a href="../chrono/clock.html"><span class="kw514">clock</span></a><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">volatile</span> <span class="kw4">double</span> vd <span class="sy1">=</span> <span class="nu16">0.0</span><span class="sy4">;</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="nu0">10000</span><span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> m <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> m <span class="sy1">&lt;</span> <span class="nu0">10000</span><span class="sy4">;</span> <span class="sy2">++</span>m<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw4">double</span> prod <span class="sy1">=</span> vd <span class="sy2">*</span> n <span class="sy2">*</span> m<span class="sy4">;</span> <span class="co1">// reads from a volatile</span>
            vd <span class="sy2">+</span><span class="sy1">=</span> prod<span class="sy4">;</span> <span class="co1">// reads from and writes to a volatile</span>
        <span class="br0">}</span> 
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"Modified a volatile variable 100m times. "</span>
           <span class="st0">"Time used:&nbsp;%.2f seconds<span class="es1">\n</span>"</span>,
           <span class="br0">(</span><span class="kw4">double</span><span class="br0">)</span><span class="br0">(</span><a href="../chrono/clock.html"><span class="kw514">clock</span></a><span class="br0">(</span><span class="br0">)</span> <span class="sy2">-</span> t<span class="br0">)</span><span class="sy2">/</span><a href="../chrono/CLOCKS_PER_SEC.html"><span class="kw522">CLOCKS_PER_SEC</span></a><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">Modified a non-volatile variable 100m times. Time used: 0.00 seconds
Modified a volatile variable 100m times. Time used: 0.79 seconds</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit&amp;section=4" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.7.3 Type qualifiers (p: 87-90)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.7.3 Type qualifiers (p: 121-123)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.7.3 Type qualifiers (p: 108-110)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 6.5.3 Type qualifiers 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;action=edit&amp;section=5" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/cv.html" title="cpp/language/cv">C++ documentation</a></span> for <span class=""><span>cv (<code>const</code> and <code>volatile</code>) type qualifiers</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 1898/1000000
Preprocessor generated node count: 6372/1000000
Post‐expand include size: 46655/4194304 bytes
Template argument size: 10751/4194304 bytes
Highest expansion depth: 16/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13832-0!*!0!!en!*!* and timestamp 20250418074812 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;oldid=154455">https://en.cppreference.com/mwiki/index.php?title=c/language/volatile&amp;oldid=154455</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.424 secs. -->
	


</body><!-- Cached 20250418074812 --></html>