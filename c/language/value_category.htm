<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Value categories</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_value_category skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Value categories</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Each <a href="./operators.htm" title="c/language/expressions">expression</a> in C (an operator with its arguments, a function call, a constant, a variable name, etc) is characterized by two independent properties: a <a href="./compatible_type.htm#Type" title="c/language/type">type</a> and a <a href="./operators.htm#General" title="c/language/expressions">value category</a>.
</p><p>Every expression belongs to one of three value categories: lvalue, non-lvalue object (rvalue), and function designator.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./value_category.htm#Lvalue_expressions"><span class="tocnumber">1</span> <span class="toctext">Lvalue expressions</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="./value_category.htm#Modifiable_lvalue_expressions"><span class="tocnumber">1.1</span> <span class="toctext">Modifiable lvalue expressions</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="./value_category.htm#Non-lvalue_object_expressions"><span class="tocnumber">2</span> <span class="toctext">Non-lvalue object expressions</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./value_category.htm#Function_designator_expression"><span class="tocnumber">3</span> <span class="toctext">Function designator expression</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./value_category.htm#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./value_category.htm#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit&amp;section=1" title="Edit section: Lvalue expressions">edit</a>]</span> <span class="mw-headline" id="Lvalue_expressions">Lvalue expressions</span></h3>
<p>Lvalue expression is any expression with <a href="./compatible_type.htm#Type_groups" title="c/language/type">object type</a> other than the type <span class="mw-geshi c source-c"><span class="kw4">void</span></span>, which potentially designates an <a href="./object.htm" title="c/language/object">object</a> (the behavior is undefined if an lvalue does not actually designate an object when it is evaluated). In other words, lvalue expression evaluates to the <i>object identity ﻿</i>. The name of this value category (“left value”) is historic and reflects the use of lvalue expressions as the left-hand operand of the assignment operator in the CPL programming language.
</p><p>Lvalue expressions can be used in the following <i>lvalue contexts ﻿</i>:
</p>
<ul><li> as the operand of the <a href="./operator_member_access.htm" title="c/language/operator member access">address-of operator</a> (except if the lvalue designates a <a href="./bit_field.htm" title="c/language/bit field">bit-field</a> or was declared <a href="./storage_class_specifiers.htm" title="c/language/storage duration">register</a>).
</li><li> as the operand of the pre/post <a href="./operator_incdec.htm" title="c/language/operator incdec">increment and decrement operators</a>.
</li><li> as the left-hand operand of the <a href="./operator_member_access.htm" title="c/language/operator member access">member access</a> (dot) operator.
</li><li> as the left-hand operand of the <a href="./operator_assignment.htm" title="c/language/operator assignment">assignment and compound assignment</a> operators.
</li></ul>
<p>If an lvalue expression is used in any context other than <a href="./sizeof.htm" title="c/language/sizeof"><code>sizeof</code></a>, <a href="./alignof.htm" title="c/language/ Alignof"><code>_Alignof</code></a>, or the operators listed above, non-array lvalues of any complete type undergo <a href="./conversion.htm" title="c/language/conversion">lvalue conversion</a>, which models the memory load of the value of the object from its location. Similarly, array lvalues undergo <a href="./conversion.htm" title="c/language/conversion">array-to-pointer conversion</a> when used in any context other than <span class="mw-geshi c source-c"><span class="kw4">sizeof</span></span>, <code>_Alignof</code>, address-of operator, or array initialization from a string literal.
</p><p>The semantics of <a href="./const.htm" title="c/language/const"><code>const</code></a>/<a href="./volatile.htm" title="c/language/volatile"><code>volatile</code></a>/<a href="./restrict.htm" title="c/language/restrict"><code>restrict</code></a>-qualifiers and <a href="./atomic.htm" title="c/language/atomic">atomic</a> types apply to lvalues only (lvalue conversion strips the qualifiers and removes atomicity).
</p><p>The following expressions are lvalues:
</p>
<ul><li> identifiers, including function named parameters, provided they were declared as designating objects (not functions or enumeration constants)
</li><li> <a href="./string_literal.htm" title="c/language/string literal">string literals</a>
</li><li> <span class="t-mark-rev t-since-c99">(C99)</span> <a href="./compound_literal.htm" title="c/language/compound literal">compound literals</a>
</li><li> parenthesized expression if the unparenthesized expression is an lvalue
</li><li> the result of a member access (dot) operator if its left-hand argument is lvalue
</li><li> the result of a member access through pointer <code><b>-&gt;</b></code> operator
</li><li> the result of the indirection (unary <code><b>*</b></code>) operator applied to a pointer to object
</li><li> the result of the subscription operator (<code><b>[]</b></code>)
</li></ul>
<h4><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit&amp;section=2" title="Edit section: Modifiable lvalue expressions">edit</a>]</span> <span class="mw-headline" id="Modifiable_lvalue_expressions">Modifiable lvalue expressions</span></h4>
<p>A <i>modifiable lvalue</i> is any lvalue expression of complete, non-array type which is not <a href="./const.htm" title="c/language/const">const</a>-qualified, and, if it's a struct/union, has no members that are <a href="./const.htm" title="c/language/const">const</a>-qualified, recursively.
</p><p>Only modifiable lvalue expressions may be used as arguments to increment/decrement, and as left-hand arguments of assignment and compound assignment operators.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit&amp;section=3" title="Edit section: Non-lvalue object expressions">edit</a>]</span> <span class="mw-headline" id="Non-lvalue_object_expressions">Non-lvalue object expressions</span></h3>
<p>Known as <i>rvalues ﻿</i>, non-lvalue object expressions are the expressions of object types that do not designate objects, but rather values that have no object identity or storage location. The address of a non-lvalue object expression cannot be taken.
</p><p>The following expressions are non-lvalue object expressions:
</p>
<ul><li> integer, character, and floating constants
</li><li> all operators not specified to return lvalues, including
</li></ul>
<dl><dd><ul><li> any function call expression
</li><li> any cast expression (note that compound literals, which look similar, are lvalues)
</li><li> member access operator (dot) applied to a non-lvalue structure/union, <span class="t-c"><span class="mw-geshi c source-c">f<span class="br0">(</span><span class="br0">)</span>.<span class="me1">x</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="br0">(</span>x, s1<span class="br0">)</span>.<span class="me1">a</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="br0">(</span>s1 <span class="sy1">=</span> s2<span class="br0">)</span>.<span class="me1">m</span></span></span>
</li><li> results of all arithmetic, relational, logical, and bitwise operators
</li><li> results of increment and decrement operators (note: pre-forms are lvalues in C++)
</li><li> results of assignment operators (note: also lvalues in C++)
</li><li> the conditional operator (note: is lvalue in C++ if both the second and third operands are lvalues of the same type)
</li><li> the comma operator (note: is lvalue in C++ if the second operand is)
</li><li> the address-of operator, even if neutralized by application to the result of unary <code><b>*</b></code> operator
</li></ul>
</dd></dl>
<p>As a special case, expressions of type <span class="mw-geshi c source-c"><span class="kw4">void</span></span> are assumed to be non-lvalue object expressions that yield a value which has no representation and requires no storage.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<p>Note that a struct/union rvalue that has a member (possibly nested) of array type does in fact designate an object with <a href="./lifetime.htm" title="c/language/lifetime">temporary lifetime</a>. This object can be accessed through lvalue expressions that form by indexing the array member or by indirection through the pointer obtained by array-to-pointer conversion of the array member.
</p>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit&amp;section=4" title="Edit section: Function designator expression">edit</a>]</span> <span class="mw-headline" id="Function_designator_expression">Function designator expression</span></h3>
<p>A function designator (the identifier introduced by a <a href="./function_declaration.htm" title="c/language/function declaration">function declaration</a>) is an expression of function type. When used in any context other than the address-of operator, <a href="./sizeof.htm" title="c/language/sizeof"><code>sizeof</code></a>, and <a href="./alignof.htm" title="c/language/ Alignof"><code>_Alignof</code></a> (the last two generate compile errors when applied to functions), the function designator is always converted to a non-lvalue pointer to function. Note that the function-call operator is defined for pointers to functions and not for function designators themselves.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit&amp;section=5" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.3.2.1 Lvalues, arrays, and function designators (p: 48-49)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.3.2.1 Lvalues, arrays, and function designators (p: 40)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.3.2.1 Lvalues, arrays, and function designators (p: 54-55)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.3.2.1 Lvalues, arrays, and function designators (p: 46)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.2.2.1 Lvalues and function designators 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/value_category.html" title="cpp/language/value category">C++ documentation</a></span> for <span class=""><span>Value categories</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 1962/1000000
Preprocessor generated node count: 6075/1000000
Post‐expand include size: 51422/4194304 bytes
Template argument size: 7600/4194304 bytes
Highest expansion depth: 19/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13874-0!*!0!!en!*!* and timestamp 20250418073123 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;oldid=182490">https://en.cppreference.com/mwiki/index.php?title=c/language/value_category&amp;oldid=182490</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.367 secs. -->
	


</body><!-- Cached 20250418073123 --></html>