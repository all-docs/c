<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Storage-class specifiers</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_storage_duration skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Storage-class specifiers</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Specify <i>storage duration</i> and <i>linkage</i> of objects and functions:
</p>
<dl><dd><ul><li><code><b>auto</b></code> - automatic duration and no linkage
</li><li><code><b>register</b></code> - automatic duration and no linkage; address of this variable cannot be taken
</li><li><code><b>static</b></code> - static duration and internal linkage (unless at block scope)
</li><li><code><b>extern</b></code> - static duration and external linkage (unless already declared internal)
</li></ul>
</dd></dl>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<dl><dd><ul><li><span class="t-rev-inl t-until-c23"><span><code><b>_Thread_local</b></code></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><code><b>thread_local</b></code></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> - thread storage duration
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./storage_class_specifiers.htm#Explanation"><span class="tocnumber">1</span> <span class="toctext">Explanation</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./storage_class_specifiers.htm#Storage_duration"><span class="tocnumber">2</span> <span class="toctext">Storage duration</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="./storage_class_specifiers.htm#Linkage"><span class="tocnumber">2.1</span> <span class="toctext">Linkage</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="./storage_class_specifiers.htm#Linkage_and_libraries"><span class="tocnumber">2.2</span> <span class="toctext">Linkage and libraries</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="./storage_class_specifiers.htm#Keywords"><span class="tocnumber">3</span> <span class="toctext">Keywords</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./storage_class_specifiers.htm#Notes"><span class="tocnumber">4</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="./storage_class_specifiers.htm#Example"><span class="tocnumber">5</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="./storage_class_specifiers.htm#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="./storage_class_specifiers.htm#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=1" title="Edit section: Explanation">edit</a>]</span> <span class="mw-headline" id="Explanation">Explanation</span></h3>
<p>Storage-class specifiers appear in <a href="./declarations.htm" title="c/language/declarations">declarations</a><span class="t-rev-inl t-since-c23"><span> and <a href="./compound_literal.htm" title="c/language/compound literal">compound literal</a> expressions</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>. At most one specifier may be used<span class="t-rev-inl t-since-c11"><span>, except that <span class="t-rev-inl t-until-c23"><span><span class="mw-geshi c source-c">_Thread_local</span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="mw-geshi c source-c"><a href="../thread/thread_local.htm"><span class="kw1032">thread_local</span></a></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> may be combined with <span class="mw-geshi c source-c"><span class="kw4">static</span></span> or <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> to adjust linkage</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>. The storage-class specifiers determine two independent properties of the names they declare: <i>storage duration</i> and <i>linkage</i>.
</p>
<div class="t-li1"><span class="t-li">1)</span> The <span class="mw-geshi c source-c"><span class="kw4">auto</span></span> specifier is only allowed for objects declared at block scope (except function parameter lists). It indicates automatic storage duration and no linkage, which are the defaults for these kinds of declarations.</div>
<div class="t-li1"><span class="t-li">2)</span> The <span class="mw-geshi c source-c"><span class="kw4">register</span></span> specifier is only allowed for objects declared at block scope, including function parameter lists. It indicates automatic storage duration and no linkage (which is the default for these kinds of declarations), but additionally hints the optimizer to store the value of this variable in a CPU register if possible. Regardless of whether this optimization takes place or not, variables declared <span class="mw-geshi c source-c"><span class="kw4">register</span></span> cannot be used as arguments to the <a href="./operator_member_access.htm" title="c/language/operator member access">address-of operator</a><span class="t-rev-inl t-since-c11"><span>, cannot use <span class="t-rev-inl t-until-c23"><span><a href="./alignas.htm" title="c/language/ Alignas"><code>_Alignas</code></a></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><a href="./alignas.htm" title="c/language/alignas" class="mw-redirect"><code>alignas</code></a></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span></span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>, and <span class="mw-geshi c source-c"><span class="kw4">register</span></span> arrays are not convertible to pointers.</div>
<div class="t-li1"><span class="t-li">3)</span> The <span class="mw-geshi c source-c"><span class="kw4">static</span></span> specifier specifies both static storage duration<span class="t-rev-inl t-since-c11"><span> (unless combined with <span class="mw-geshi c source-c">_Thread_local</span>)</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span> and internal linkage (unless used at block scope). It can be used with functions at file scope and with variables at both file and block scope, but not in function parameter lists.</div>
<div class="t-li1"><span class="t-li">4)</span> The <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> specifier specifies static storage duration<span class="t-rev-inl t-since-c11"><span> (unless combined with <span class="t-rev-inl t-until-c23"><span><span class="mw-geshi c source-c">_Thread_local</span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="mw-geshi c source-c"><a href="../thread/thread_local.htm"><span class="kw1032">thread_local</span></a></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>)</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span> and external linkage. It can be used with function and object declarations in both file and block scope (excluding function parameter lists). If <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> appears on a redeclaration of an identifier that was already declared with internal linkage, the linkage remains internal. Otherwise (if the prior declaration was external, no-linkage, or is not in scope), the linkage is external.</div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<div class="t-li1"><span class="t-li">5)</span> <span class="t-rev-inl t-until-c23"><span><span class="mw-geshi c source-c">_Thread_local</span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="mw-geshi c source-c"><a href="../thread/thread_local.htm"><span class="kw1032">thread_local</span></a></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> indicates <i>thread storage duration</i>. It cannot be used with function declarations. If it is used on a declaration of an object, it must be present on every declaration of the same object. If it is used on a block-scope declaration, it must be combined with either <span class="mw-geshi c source-c"><span class="kw4">static</span></span> or <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> to decide linkage.
</div></td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<p>If no storage-class specifier is provided, the defaults are:
</p>
<dl><dd> <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> for all functions
</dd><dd> <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> for objects at file scope
</dd><dd> <span class="mw-geshi c source-c"><span class="kw4">auto</span></span> for objects at block scope
</dd></dl>
<p>For any struct or union declared with a storage-class specifier, the storage duration (but not linkage) applies to their members, recursively.
</p><p>Function declarations at block scope can use <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> or none at all. Function declarations at file scope can use <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> or <span class="mw-geshi c source-c"><span class="kw4">static</span></span>.
</p><p>Function parameters cannot use any storage-class specifiers other than <span class="mw-geshi c source-c"><span class="kw4">register</span></span>. Note that <span class="mw-geshi c source-c"><span class="kw4">static</span></span> has special meaning in function parameters of array type.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=2" title="Edit section: Storage duration">edit</a>]</span> <span class="mw-headline" id="Storage_duration">Storage duration</span></h3>
<p>Every <a href="./object.htm" title="c/language/object">object</a> has a property called <i>storage duration</i>, which limits the object <a href="./lifetime.htm" title="c/language/lifetime">lifetime</a>. There are four kinds of storage duration in C:
</p>
<dl><dd><ul><li><i><b>automatic</b></i> storage duration. The storage is allocated when the <a href="./statements.htm#Compound_statements" title="c/language/statements">block</a> in which the object was declared is entered and deallocated when it is exited by any means (<a href="./goto.htm" title="c/language/goto">goto</a>, <a href="./return.htm" title="c/language/return">return</a>, reaching the end). <span class="t-rev-inl t-since-c99"><span>One exception is the <a href="./array.htm#Variable-length_arrays" title="c/language/array">VLAs</a>; their storage is allocated when the declaration is executed, not on block entry, and deallocated when the declaration goes out of scope, not when the block is exited</span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span>. If the block is entered recursively, a new allocation is performed for every recursion level. All function parameters and non-<span class="mw-geshi c source-c"><span class="kw4">static</span></span> block-scope objects have this storage duration, <span class="t-rev-inl t-until-c23"><span>as well as <a href="./compound_literal.htm" title="c/language/compound literal">compound literals</a> used at block scope</span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span>
</li><li><i><b>static</b></i> storage duration. The storage duration is the entire execution of the program, and the value stored in the object is initialized only once, prior to <a href="./main_function.htm" title="c/language/main function">main function</a>. All objects declared <span class="mw-geshi c source-c"><span class="kw4">static</span></span> and all objects with either internal or external linkage<span class="t-rev-inl t-since-c11"><span> that aren't declared <span class="t-rev-inl t-until-c23"><span><span class="mw-geshi c source-c">_Thread_local</span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="mw-geshi c source-c"><a href="../thread/thread_local.htm"><span class="kw1032">thread_local</span></a></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span></span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span> have this storage duration.
</li></ul>
</dd></dl>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<dl><dd><ul><li><i><b>thread</b></i> storage duration. The storage duration is the entire execution of the thread in which it was created, and the value stored in the object is initialized when the thread is started. Each thread has its own, distinct, object. If the thread that executes the expression that accesses this object is not the thread that executed its initialization, the behavior is implementation-defined. All objects declared <span class="t-rev-inl t-until-c23"><span><span class="mw-geshi c source-c">_Thread_local</span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="mw-geshi c source-c"><a href="../thread/thread_local.htm"><span class="kw1032">thread_local</span></a></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> have this storage duration.
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<dl><dd><ul><li><i><b>allocated</b></i> storage duration. The storage is allocated and deallocated on request, using <a href="../memory.htm" title="c/memory">dynamic memory allocation</a> functions.
</li></ul>
</dd></dl>
<h4><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=3" title="Edit section: Linkage">edit</a>]</span> <span class="mw-headline" id="Linkage">Linkage</span></h4>
<p>Linkage refers to the ability of an identifier (variable or function) to be referred to in other scopes. If a variable or function with the same identifier is declared in several scopes, but cannot be referred to from all of them, then several instances of the variable are generated. The following linkages are recognized:
</p>
<dl><dd><ul><li><i><b>no linkage</b></i>. The variable or function can be referred to only from the scope it is in (block scope). All block scope variables that are not declared <code>extern</code> have this linkage, as well as all function parameters and all identifiers that aren't functions or variables.
</li></ul>
</dd></dl>
<dl><dd><ul><li><i><b>internal linkage</b></i>. The variable or function can be referred to from all scopes in the current translation unit. All file scope variables which are declared <code>static</code> <span class="t-rev-inl t-since-c23"><span>or <code>constexpr</code></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> have this linkage, and all file scope functions declared <code>static</code> (static function declarations are only allowed at file scope).
</li></ul>
</dd></dl>
<dl><dd><ul><li><i><b>external linkage</b></i>. The variable or function can be referred to from any other translation units in the entire program. All file scope variables which are not declared <code>static</code><span class="t-rev-inl t-since-c23"><span> or <code>constexpr</code></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> have this linkage, all file scope function declarations which are not declared <code>static</code>, all block scope function declarations, and, additionally, all variables or functions declared <code>extern</code> have this linkage unless a prior declaration with internal linkage is visible at that point.
</li></ul>
</dd></dl>
<p>If the same identifier appears with both internal and external linkage in the same translation unit, the behavior is undefined. This is possible when <a href="./extern.htm" title="c/language/extern">tentative definitions</a> are used.
</p>
<h4><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=4" title="Edit section: Linkage and libraries">edit</a>]</span> <span class="mw-headline" id="Linkage_and_libraries">Linkage and libraries</span></h4>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tbody><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br>Reason: should this be a separate top-level entry in c/language under Miscellaneous? </td></tr></tbody></table>
<p>Declarations with external linkage are commonly made available in header files so that all  translation units that <a href="../preprocessor/include.htm" title="c/preprocessor/include">#include</a> the file may refer to the same identifier that are defined elsewhere.
</p><p>Any declaration with internal linkage that appears in a header file results in a separate and distinct object in each translation unit that includes that file.
</p><p>Library interface, header file "flib.h":
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef FLIB_H</span>
<span class="co2">#define FLIB_H</span>
<span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>              <span class="co1">// function declaration with external linkage</span>
<span class="kw2">extern</span> <span class="kw4">int</span> state<span class="sy4">;</span>          <span class="co1">// variable declaration with external linkage</span>
<span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">int</span> size <span class="sy1">=</span> <span class="nu0">5</span><span class="sy4">;</span> <span class="co1">// definition of a read-only variable with internal linkage</span>
<span class="kw2">enum</span> <span class="br0">{</span> MAX <span class="sy1">=</span> <span class="nu0">10</span> <span class="br0">}</span><span class="sy4">;</span>         <span class="co1">// constant definition</span>
<span class="kw1">inline</span> <span class="kw4">int</span> sum <span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> a <span class="sy2">+</span> b<span class="sy4">;</span> <span class="br0">}</span> <span class="co1">// inline function definition</span>
<span class="co2">#endif // FLIB_H</span></pre></div></div>
<p>Library implementation, source file "flib.c":
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include "flib.h"</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> local_f<span class="br0">(</span><span class="kw4">int</span> s<span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span> <span class="co1">// definition with internal linkage (only used in this file)</span>
<span class="kw4">static</span> <span class="kw4">int</span> local_state<span class="sy4">;</span>       <span class="co1">// definition with internal linkage (only used in this file)</span>
&nbsp;
<span class="kw4">int</span> state<span class="sy4">;</span>                       <span class="co1">// definition with external linkage (used by main.c)</span>
<span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span> local_f<span class="br0">(</span>state<span class="br0">)</span><span class="sy4">;</span> <span class="br0">}</span> <span class="co1">// definition with external linkage (used by main.c)</span></pre></div></div>
<p>Application code, source file "main.c":
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include "flib.h"</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> x<span class="br0">[</span>MAX<span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span>size<span class="br0">}</span><span class="sy4">;</span> <span class="co1">// uses the constant and the read-only variable</span>
    state <span class="sy1">=</span> <span class="nu0">7</span><span class="sy4">;</span>           <span class="co1">// modifies state in flib.c</span>
    f<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>                 <span class="co1">// calls f() in flib.c</span>
<span class="br0">}</span></pre></div></div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=5" title="Edit section: Keywords">edit</a>]</span> <span class="mw-headline" id="Keywords">Keywords</span></h3>
<p><a href="../keyword/auto.htm" title="c/keyword/auto"><tt>auto</tt></a>,
<a href="../keyword/register.htm" title="c/keyword/register"><tt>register</tt></a>,
<a href="../keyword/static.htm" title="c/keyword/static"><tt>static</tt></a>,
<a href="../keyword/extern.htm" title="c/keyword/extern"><tt>extern</tt></a>,
<a href="../keyword/_Thread_local.htm" title="c/keyword/ Thread local"><tt>_Thread_local</tt></a>
<a href="../keyword/thread_local.htm" title="c/keyword/thread local"><tt>thread_local</tt></a>
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=6" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c23"><td>
<p>The keyword <span class="mw-geshi c source-c">_Thread_local</span> is usually used through the convenience macro <span class="t-lc"><a href="../thread/thread_local.htm" title="c/thread/thread local">thread_local</a></span>, defined in the header <a href="../header/threads.htm" title="c/header/threads"><tt>&lt;threads.h&gt;</tt></a>.
</p>
</td>
<td><span class="t-mark-rev t-until-c23">(until C23)</span></td></tr>
</tbody></table>
<p>The <a href="./typedef.htm" title="c/language/typedef"><code>typedef</code></a><span class="t-rev-inl t-since-c23"><span> and <a href="./constexpr.htm" title="c/language/constexpr"><code>constexpr</code></a></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> specifiers are formally listed as storage-class specifiers in the C language grammar, but do not specify storage.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c23"><td>
<p>The auto specifier is also used for type inference.
</p>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<p>Names at file scope that are <span class="mw-geshi c source-c"><span class="kw4">const</span></span> and not <span class="mw-geshi c source-c"><span class="kw2">extern</span></span> have external linkage in C (as the default for all file-scope declarations), but internal linkage in C++.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=7" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="co1">// static storage duration</span>
<span class="kw4">int</span> A<span class="sy4">;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"&amp;A =&nbsp;%p<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span><span class="br0">)</span><span class="sy3">&amp;</span>A<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// automatic storage duration</span>
    <span class="kw4">int</span> A <span class="sy1">=</span> <span class="nu0">1</span><span class="sy4">;</span>   <span class="co1">// hides global A</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"&amp;A =&nbsp;%p<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span><span class="br0">)</span><span class="sy3">&amp;</span>A<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// allocated storage duration</span>
    <span class="kw4">int</span><span class="sy2">*</span> ptr_1 <span class="sy1">=</span> <a href="../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>   <span class="co1">// start allocated storage duration</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"address of int in allocated memory =&nbsp;%p<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span><span class="br0">)</span>ptr_1<span class="br0">)</span><span class="sy4">;</span>
    <a href="../memory/free.htm"><span class="kw406">free</span></a><span class="br0">(</span>ptr_1<span class="br0">)</span><span class="sy4">;</span>                        <span class="co1">// stop allocated storage duration</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">&amp;A = 0x600ae4
&amp;A = 0x7ffefb064f5c
address of int in allocated memory = 0x1f28c30</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=8" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.2.2 Linkages of identifiers (p: 35-36)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.2.4 Storage durations of objects (p: 36-37)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.7.1 Storage-class specifiers (p: 97-100)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.2.2 Linkages of identifiers (p: 29-30)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.2.4 Storage durations of objects (p: 30)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.7.1 Storage-class specifiers (p: 79)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.2.2 Linkages of identifiers (p: 36-37)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.2.4 Storage durations of objects (p: 38-39)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.7.1 Storage-class specifiers (p: 109-110)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.2.2 Linkages of identifiers (p: 30-31)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.2.4 Storage durations of objects (p: 32)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.7.1 Storage-class specifiers (p: 98-99)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.1.2.2 Linkages of identifiers 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.1.2.4 Storage durations of objects 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.5.1 Storage-class specifiers 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;action=edit&amp;section=9" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/storage_duration.html" title="cpp/language/storage duration">C++ documentation</a></span> for <span class=""><span>Storage class specifiers</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 4029/1000000
Preprocessor generated node count: 11373/1000000
Post‐expand include size: 69729/4194304 bytes
Template argument size: 15780/4194304 bytes
Highest expansion depth: 17/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:9547-0!*!0!!en!*!* and timestamp 20250418073920 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;oldid=179994">https://en.cppreference.com/mwiki/index.php?title=c/language/storage_duration&amp;oldid=179994</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="https://en.cppreference.com/w/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://en.cppreference.com/w/Category%253ATodo_with_reason.html" title="Category:Todo with reason">Todo with reason</a></li></ul></div></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 1.136 secs. -->
	


</body><!-- Cached 20250418073920 --></html>