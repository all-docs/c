<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Character constant</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_character_constant skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Character constant</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./character_constant.htm#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./character_constant.htm#Notes"><span class="tocnumber">2</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./character_constant.htm#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./character_constant.htm#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./character_constant.htm#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline" id="Syntax">Syntax</span></h3>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>'</b></code><span class="t-spar">c-char</span> <code><b>'</b></code>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>u8'</b></code><span class="t-spar">c-char</span> <code><b>'</b></code>
</td>
<td> (2)
</td>
<td> <span class="t-mark-rev t-since-c23">(since C23)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>u'</b></code><span class="t-spar">c-char</span> <code><b>'</b></code>
</td>
<td> (3)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>U'</b></code><span class="t-spar">c-char</span> <code><b>'</b></code>
</td>
<td> (4)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>L'</b></code><span class="t-spar">c-char</span> <code><b>'</b></code>
</td>
<td> (5)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>'</b></code><span class="t-spar">c-char-sequence</span> <code><b>'</b></code>
</td>
<td> (6)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>L'</b></code><span class="t-spar">c-char-sequence</span> <code><b>'</b></code>
</td>
<td> (7)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>u'</b></code><span class="t-spar">c-char-sequence</span> <code><b>'</b></code>
</td>
<td> (8)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span><span class="t-mark-rev t-until-c23">(removed in C23)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>U'</b></code><span class="t-spar">c-char-sequence</span> <code><b>'</b></code>
</td>
<td> (9)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span><span class="t-mark-rev t-until-c23">(removed in C23)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where
</p>
<ul><li> <span class="t-spar">c-char</span> is either
</li></ul>
<dl><dd><ul><li> a character from the basic source character set minus single-quote (<code><b>'</b></code>), backslash (<code><b>\</b></code>), or the newline character.
</li><li> escape sequence: one of special character escapes <span class="t-c"><span class="mw-geshi c source-c">\<span class="st0">'</span></span></span> <span class="t-c"><span class="mw-geshi c source-c">\<span class="st0">"</span></span></span> <span class="t-c"><span class="mw-geshi c source-c">\<span class="sy4">?</span></span></span> <span class="t-c"><span class="mw-geshi c source-c">\\</span></span> <span class="t-c"><span class="mw-geshi c source-c">\a</span></span> <span class="t-c"><span class="mw-geshi c source-c">\b</span></span> <span class="t-c"><span class="mw-geshi c source-c">\f</span></span> <span class="t-c"><span class="mw-geshi c source-c">\n</span></span> <span class="t-c"><span class="mw-geshi c source-c">\r</span></span> <span class="t-c"><span class="mw-geshi c source-c">\t</span></span> <span class="t-c"><span class="mw-geshi c source-c">\v</span></span>, hex escapes <span class="t-c"><span class="mw-geshi c source-c">\x...</span></span> or octal escapes <span class="t-c"><span class="mw-geshi c source-c">\...</span></span> as defined in <a href="./escape.htm" title="c/language/escape">escape sequences</a>.
</li></ul>
</dd></dl>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<dl><dd><ul><li>universal character name, <span class="t-c"><span class="mw-geshi c source-c">\u...</span></span> or <span class="t-c"><span class="mw-geshi c source-c">\U...</span></span> as defined in <a href="./escape.htm" title="c/language/escape">escape sequences</a>.
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<ul><li> <span class="t-spar">c-char-sequence</span> is a sequence of two or more <span class="t-spar">c-char</span>s.
</li></ul>
<div class="t-li1"><span class="t-li">1)</span> single-byte integer character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'a'</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'<span class="es1">\n</span>'</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'<span class="es5">\13</span>'</span></span></span>. Such constant has type <span class="mw-geshi c source-c"><span class="kw4">int</span></span> and a value equal to the representation of <span class="t-spar">c-char</span> in the execution character set as a value of type <span class="mw-geshi c source-c"><span class="kw4">char</span></span> mapped to <span class="mw-geshi c source-c"><span class="kw4">int</span></span>. If <span class="t-spar">c-char</span> is not representable as a single byte in the execution character set, the value is implementation-defined.</div>
<div class="t-li1"><span class="t-li">2)</span> UTF-8 character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">u8<span class="st0">'a'</span></span></span>. Such constant has type <span class="mw-geshi c source-c">char8_t</span> and the value equal to ISO 10646 code point value of <span class="t-spar">c-char</span>, provided that the code point value is representable with a single UTF-8 code unit (that is, <span class="t-spar">c-char</span> is in the range 0x0-0x7F, inclusive). If <span class="t-spar">c-char</span> is not representable with a single UTF-8 code unit, the program is ill-formed.</div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c23"><td>
<div class="t-li1"><span class="t-li">3)</span> 16-bit wide character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'貓'</span></span></span>, but not <span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'🍌'</span></span></span> (<span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'<span class="es4">\U0001f34c</span>'</span></span></span>). Such constant has type <span class="mw-geshi c source-c">char16_t</span> and a value equal to the value of <span class="t-spar">c-char</span> in the 16-bit encoding produced by <span class="t-lc"><a href="../string/multibyte/mbrtoc16.htm" title="c/string/multibyte/mbrtoc16">mbrtoc16</a></span> (normally UTF-16). If <span class="t-spar">c-char</span> is not representable or maps to more than one 16-bit character, the value is implementation-defined.</div>
<div class="t-li1"><span class="t-li">4)</span> 32-bit wide character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">U<span class="st0">'貓'</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c">U<span class="st0">'🍌'</span></span></span>. Such constant has type <span class="mw-geshi c source-c">char32_t</span> and a value equal to the value of <span class="t-spar">c-char</span> in in the 32-bit encoding produced by <span class="t-lc"><a href="../string/multibyte/mbrtoc32.htm" title="c/string/multibyte/mbrtoc32">mbrtoc32</a></span> (normally UTF-32). If <span class="t-spar">c-char</span> is not representable or maps to more than one 32-bit character, the value is implementation-defined.
</div></td>
<td><span class="t-mark-rev t-until-c23">(until C23)</span></td></tr>
<tr class="t-rev t-since-c23"><td>
<div class="t-li1"><span class="t-li">3)</span> UTF-16 character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'貓'</span></span></span>, but not <span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'🍌'</span></span></span> (<span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'<span class="es4">\U0001f34c</span>'</span></span></span>). Such constant has type <span class="mw-geshi c source-c">char16_t</span> and the value equal to ISO 10646 code point value of <span class="t-spar">c-char</span>, provided that the code point value is representable with a single UTF-16 code unit (that is, <span class="t-spar">c-char</span> is in the range 0x0-0xD7FF or 0xE000-0xFFFF, inclusive). If <span class="t-spar">c-char</span> is not representable with a single UTF-16 code unit, the program is ill-formed.</div>
<div class="t-li1"><span class="t-li">4)</span> UTF-32 character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">U<span class="st0">'貓'</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c">U<span class="st0">'🍌'</span></span></span>. Such constant has type <span class="mw-geshi c source-c">char32_t</span> and the value equal to ISO 10646 code point value of <span class="t-spar">c-char</span>, provided that the code point value is representable with a single UTF-32 code unit (that is, <span class="t-spar">c-char</span> is in the range 0x0-0xD7FF or 0xE000-0x10FFFF, inclusive). If <span class="t-spar">c-char</span> is not representable with a single UTF-32 code unit, the program is ill-formed.
</div></td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<div class="t-li1"><span class="t-li">5)</span> wide character constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">L<span class="st0">'β'</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c">L<span class="st0">'貓</span></span></span>. Such constant has type <span class="mw-geshi c source-c"><span class="kw4">wchar_t</span></span> and a value equal to the value of <span class="t-spar">c-char</span> in the execution wide character set (that is, the value that would be produced by <span class="t-lc"><a href="../string/multibyte/mbtowc.htm" title="c/string/multibyte/mbtowc">mbtowc</a></span>). If <span class="t-spar">c-char</span> is not representable or maps to more than one wide character (e.g. a non-BMP value on Windows where <span class="mw-geshi c source-c"><span class="kw4">wchar_t</span></span> is 16-bit), the value is implementation-defined .</div>
<div class="t-li1"><span class="t-li">6)</span> multicharacter constant, e.g. <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'AB'</span></span></span>, has type <span class="mw-geshi c source-c"><span class="kw4">int</span></span> and implementation-defined value.</div>
<div class="t-li1"><span class="t-li">7)</span> wide multicharacter constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">L<span class="st0">'AB'</span></span></span>, has type <span class="mw-geshi c source-c"><span class="kw4">wchar_t</span></span> and implementation-defined value.</div>
<div class="t-li1"><span class="t-li">8)</span> 16-bit multicharacter constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">u<span class="st0">'CD'</span></span></span>, has type <span class="mw-geshi c source-c">char16_t</span> and implementation-defined value.</div>
<div class="t-li1"><span class="t-li">9)</span> 32-bit multicharacter constant, e.g. <span class="t-c"><span class="mw-geshi c source-c">U<span class="st0">'XY'</span></span></span>, has type <span class="mw-geshi c source-c">char32_t</span> and implementation-defined value.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit&amp;section=2" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>Multicharacter constants were inherited by C from the B programming language. Although not specified by the C  standard, most compilers (MSVC is a notable exception) implement multicharacter constants as specified in B: the values of each char in the constant initialize successive bytes of the resulting integer, in big-endian zero-padded right-adjusted order, e.g. the value of <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'<span class="es5">\1</span>'</span></span></span> is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu12">0x00000001</span></span></span> and the value of <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'<span class="es5">\1</span><span class="es5">\2</span><span class="es5">\3</span><span class="es5">\4</span>'</span></span></span> is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu12">0x01020304</span></span></span>.
</p><p>In C++, encodable ordinary character literals have type <span class="mw-geshi c source-c"><span class="kw4">char</span></span>, rather than <span class="mw-geshi c source-c"><span class="kw4">int</span></span>.
</p><p>Unlike <a href="./integer_constant.htm" title="c/language/integer constant">integer constants</a>, a character constant may have a negative value if <span class="mw-geshi c source-c"><span class="kw4">char</span></span> is signed: on such implementations <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'<span class="es2">\xFF</span>'</span></span></span> is an <span class="mw-geshi c source-c"><span class="kw4">int</span></span> with the value <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span><span class="nu0">1</span></span></span>.
</p><p>When used in a controlling expression of <a href="../preprocessor/conditional.htm" title="c/preprocessor/conditional"><tt>
#if</tt></a> or <a href="../preprocessor/conditional.htm" title="c/preprocessor/conditional"><tt>
#elif</tt></a>, character constants may be interpreted in terms of the source character set, the execution character set, or some other implementation-defined character set.
</p><p>16/32-bit multicharacter constants are not widely supported and removed in C23. Some common implementations (e.g. clang) do not accept them at all.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit&amp;section=3" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stddef.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;uchar.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"constant value     <span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"-------- ----------<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// integer character constants,</span>
    <span class="kw4">int</span> c1<span class="sy1">=</span><span class="st0">'a'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'a':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, c1<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">int</span> c2<span class="sy1">=</span><span class="st0">'🍌'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'🍌':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span><span class="es1">\n</span>"</span>, c2<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// implementation-defined</span>
&nbsp;
    <span class="co1">// multicharacter constant</span>
    <span class="kw4">int</span> c3<span class="sy1">=</span><span class="st0">'ab'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'ab':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span><span class="es1">\n</span>"</span>, c3<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// implementation-defined</span>
&nbsp;
    <span class="co1">// 16-bit wide character constants</span>
    char16_t uc1 <span class="sy1">=</span> u<span class="st0">'a'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'a':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>uc1<span class="br0">)</span><span class="sy4">;</span>
    char16_t uc2 <span class="sy1">=</span> u<span class="st0">'¢'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'¢':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>uc2<span class="br0">)</span><span class="sy4">;</span>
    char16_t uc3 <span class="sy1">=</span> u<span class="st0">'猫'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'猫':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>uc3<span class="br0">)</span><span class="sy4">;</span>
    <span class="co1">// implementation-defined (🍌 maps to two 16-bit characters)</span>
    char16_t uc4 <span class="sy1">=</span> u<span class="st0">'🍌'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'🍌':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span><span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>uc4<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// 32-bit wide character constants</span>
    char32_t Uc1 <span class="sy1">=</span> U<span class="st0">'a'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'a':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>Uc1<span class="br0">)</span><span class="sy4">;</span>
    char32_t Uc2 <span class="sy1">=</span> U<span class="st0">'¢'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'¢':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>Uc2<span class="br0">)</span><span class="sy4">;</span>
    char32_t Uc3 <span class="sy1">=</span> U<span class="st0">'猫'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'猫':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>Uc3<span class="br0">)</span><span class="sy4">;</span>
    char32_t Uc4 <span class="sy1">=</span> U<span class="st0">'🍌'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'🍌':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span><span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>Uc4<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// wide character constants</span>
    <span class="kw4">wchar_t</span> wc1 <span class="sy1">=</span> L<span class="st0">'a'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'a':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>wc1<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">wchar_t</span> wc2 <span class="sy1">=</span> L<span class="st0">'¢'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'¢':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>wc2<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">wchar_t</span> wc3 <span class="sy1">=</span> L<span class="st0">'猫'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'猫':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>wc3<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">wchar_t</span> wc4 <span class="sy1">=</span> L<span class="st0">'🍌'</span><span class="sy4">;</span> <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"'🍌':<span class="es1">\t</span>&nbsp;%#010x<span class="es1">\n</span><span class="es1">\n</span>"</span>, <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>wc4<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">constant value     
-------- ----------
'a':	 0x00000061
'🍌':	 0xf09f8d8c
&nbsp;
'ab':	 0x00006162
'a':	 0x00000061
'¢':	 0x000000a2
'猫':	 0x0000732b
'🍌':	 0x0000df4c
&nbsp;
'a':	 0x00000061
'¢':	 0x000000a2
'猫':	 0x0000732b
'🍌':	 0x0001f34c
'a':	 0x00000061
'¢':	 0x000000a2
'猫':	 0x0000732b
'🍌':	 0x0001f34c</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit&amp;section=4" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.4.4.5 Character constants (p: 63-66)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.4.4.4 Character constants (p: 48-50)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.4.4.4 Character constants (p: 67-70)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.4.4.4 Character constants (p: 59-61)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.1.3.4 Character constants 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;action=edit&amp;section=5" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/character_literal.html" title="cpp/language/character literal">C++ documentation</a></span> for <span class=""><span>Character literal</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 3636/1000000
Preprocessor generated node count: 9180/1000000
Post‐expand include size: 70485/4194304 bytes
Template argument size: 21298/4194304 bytes
Highest expansion depth: 19/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13888-0!*!0!!en!*!* and timestamp 20250511111958 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;oldid=183161">https://en.cppreference.com/mwiki/index.php?title=c/language/character_constant&amp;oldid=183161</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.040 secs. -->
	


</body><!-- Cached 20250511150634 --></html>