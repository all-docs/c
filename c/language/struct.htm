<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Struct declaration</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_struct skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Struct declaration</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>A struct is a type consisting of a sequence of members whose storage is allocated in an ordered sequence (as opposed to union, which is a type consisting of a sequence of members whose storage overlaps).
</p><p>The <a href="./declarations.htm" title="c/language/declarations">type specifier</a> for a struct is identical to the <a href="./union.htm" title="c/language/union"><code>union</code></a> type specifier except for the keyword used:
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./struct.htm#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./struct.htm#Explanation"><span class="tocnumber">2</span> <span class="toctext">Explanation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./struct.htm#Forward_declaration"><span class="tocnumber">3</span> <span class="toctext">Forward declaration</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./struct.htm#Keywords"><span class="tocnumber">4</span> <span class="toctext">Keywords</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./struct.htm#Notes"><span class="tocnumber">5</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./struct.htm#Example"><span class="tocnumber">6</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="./struct.htm#Defect_reports"><span class="tocnumber">7</span> <span class="toctext">Defect reports</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="./struct.htm#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="./struct.htm#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline" id="Syntax">Syntax</span></h3>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>struct</b></code> <span class="t-spar">attr-spec-seq</span> ﻿<span class="t-mark">(optional)</span> <span class="t-spar">name</span> ﻿<span class="t-mark">(optional)</span> <code><b>{</b></code> <span class="t-spar">struct-declaration-list</span> <code><b>}</b></code>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>struct</b></code> <span class="t-spar">attr-spec-seq</span> ﻿<span class="t-mark">(optional)</span> <span class="t-spar">name</span>
</td>
<td> (2)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<div class="t-li1"><span class="t-li">1)</span> Struct definition: introduces the new type struct <span class="t-spar">name</span> and defines its meaning</div>
<div class="t-li1"><span class="t-li">2)</span> If used on a line of its own, as in <code>struct</code> <span class="t-spar">name</span> <code><b>;</b></code>, <i>declares</i> but doesn't define the struct <code>name</code> (see forward declaration below). In other contexts, names the previously-declared struct, and <span class="t-spar">attr-spec-seq</span> is not allowed.</div>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">name</span>
</td>
<td> -
</td>
<td> the name of the struct that's being defined
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">struct-declaration-list</span>
</td>
<td> -
</td>
<td> any number of variable declarations, <a href="./bit_field.htm" title="c/language/bit field">bit-field</a> declarations, and <a href="./static_assert.htm" title="c/language/static assert" class="mw-redirect">static assert</a> declarations. Members of incomplete type and members of function type are not allowed (except for the flexible array member described below)
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">attr-spec-seq</span>
</td>
<td> -
</td>
<td> <span class="t-mark-rev t-since-c23">(C23)</span>optional list of <a href="./attributes.htm" title="c/language/attributes">attributes</a>, applied to the struct type
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=2" title="Edit section: Explanation">edit</a>]</span> <span class="mw-headline" id="Explanation">Explanation</span></h3>
<p>Within a struct object, addresses of its elements (and the addresses of the bit-field allocation units) increase in order in which the members were defined. A pointer to a struct can be cast to a pointer to its first member (or, if the member is a bit-field, to its allocation unit). Likewise, a pointer to the first member of a struct can be cast to a pointer to the enclosing struct. There may be unnamed padding between any two members of a struct or after the last member, but not before the first member. The size of a struct is at least as large as the sum of the sizes of its members.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<p>If a struct defines at least one named member, it is allowed to additionally declare its last member with incomplete array type. When an element of the flexible array member is accessed (in an expression that uses operator <code><b>.</b></code> or <code><b>-&gt;</b></code> with the flexible array member's name as the right-hand-side operand), then the struct behaves as if the array member had the longest size fitting in the memory allocated for this object. If no additional storage was allocated, it behaves as if an array with 1 element, except that the behavior is undefined if that element is accessed or a pointer one past that element is produced. Initialization and the assignment operator ignore the flexible array member. <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">sizeof</span></span></span> omits it, but may have more trailing padding than the omission would imply. Structures with flexible array members (or unions who have a recursive-possibly structure member with flexible array member) cannot appear as array elements or as members of other structures.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">struct</span> s <span class="br0">{</span> <span class="kw4">int</span> n<span class="sy4">;</span> <span class="kw4">double</span> d<span class="br0">[</span><span class="br0">]</span><span class="sy4">;</span> <span class="br0">}</span><span class="sy4">;</span> <span class="co1">// s.d is a flexible array member</span>
&nbsp;
<span class="kw1">struct</span> s t1 <span class="sy1">=</span> <span class="br0">{</span> <span class="nu0">0</span> <span class="br0">}</span><span class="sy4">;</span>          <span class="co1">// OK, d is as if double d[1], but UB to access</span>
<span class="kw1">struct</span> s t2 <span class="sy1">=</span> <span class="br0">{</span> <span class="nu0">1</span>, <span class="br0">{</span> <span class="nu16">4.2</span> <span class="br0">}</span> <span class="br0">}</span><span class="sy4">;</span> <span class="co1">// error: initialization ignores flexible array</span>
&nbsp;
<span class="co1">// if sizeof (double) == 8</span>
<span class="kw1">struct</span> s <span class="sy2">*</span>s1 <span class="sy1">=</span> <a href="../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw1">struct</span> s<span class="br0">)</span> <span class="sy2">+</span> <span class="nu0">64</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// as if d was double d[8]</span>
<span class="kw1">struct</span> s <span class="sy2">*</span>s2 <span class="sy1">=</span> <a href="../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw1">struct</span> s<span class="br0">)</span> <span class="sy2">+</span> <span class="nu0">40</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// as if d was double d[5]</span>
&nbsp;
s1 <span class="sy1">=</span> <a href="../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw1">struct</span> s<span class="br0">)</span> <span class="sy2">+</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// now as if d was double d[1]. Two bytes excess.</span>
<span class="kw4">double</span> <span class="sy2">*</span>dp <span class="sy1">=</span> <span class="sy3">&amp;</span><span class="br0">(</span>s1<span class="sy2">-</span><span class="sy1">&gt;</span>d<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>    <span class="co1">// OK</span>
<span class="sy2">*</span>dp <span class="sy1">=</span> <span class="nu0">42</span><span class="sy4">;</span>                    <span class="co1">// OK</span>
s1<span class="sy2">-</span><span class="sy1">&gt;</span>d<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy2">++</span><span class="sy4">;</span>                  <span class="co1">// Undefined behavior. 2 excess bytes can't be accessed</span>
                             <span class="co1">// as double.</span>
&nbsp;
s2 <span class="sy1">=</span> <a href="../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw1">struct</span> s<span class="br0">)</span> <span class="sy2">+</span> <span class="nu0">6</span><span class="br0">)</span><span class="sy4">;</span>  <span class="co1">// same, but UB to access because 2 bytes are</span>
                                     <span class="co1">// missing to complete 1 double</span>
dp <span class="sy1">=</span> <span class="sy3">&amp;</span><span class="br0">(</span>s2<span class="sy2">-</span><span class="sy1">&gt;</span>d<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>            <span class="co1">// OK, can take address just fine</span>
<span class="sy2">*</span>dp <span class="sy1">=</span> <span class="nu0">42</span><span class="sy4">;</span>                    <span class="co1">// undefined behavior</span>
&nbsp;
<span class="sy2">*</span>s1 <span class="sy1">=</span> <span class="sy2">*</span>s2<span class="sy4">;</span> <span class="co1">// only copies s.n, not any element of s.d</span>
           <span class="co1">// except those caught in sizeof (struct s)</span></pre></div></div>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<p>Similar to union, an unnamed member of a struct whose type is a struct without <span class="t-spar">name</span> is known as <i>anonymous struct</i>. Every member of an anonymous struct is considered to be a member of the enclosing struct or union, keeping their structure layout. This applies recursively if the enclosing struct or union is also anonymous.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">struct</span> v
<span class="br0">{</span>
   <span class="kw1">union</span> <span class="co1">// anonymous union</span>
   <span class="br0">{</span>
      <span class="kw1">struct</span> <span class="br0">{</span> <span class="kw4">int</span> i, j<span class="sy4">;</span> <span class="br0">}</span><span class="sy4">;</span> <span class="co1">// anonymous structure</span>
      <span class="kw1">struct</span> <span class="br0">{</span> <span class="kw4">long</span> k, l<span class="sy4">;</span> <span class="br0">}</span> w<span class="sy4">;</span>
   <span class="br0">}</span><span class="sy4">;</span>
   <span class="kw4">int</span> m<span class="sy4">;</span>
<span class="br0">}</span> v1<span class="sy4">;</span>
&nbsp;
v1.<span class="me1">i</span> <span class="sy1">=</span> <span class="nu0">2</span><span class="sy4">;</span>   <span class="co1">// valid</span>
v1.<span class="me1">k</span> <span class="sy1">=</span> <span class="nu0">3</span><span class="sy4">;</span>   <span class="co1">// invalid: inner structure is not anonymous</span>
v1.<span class="me1">w</span>.<span class="me1">k</span> <span class="sy1">=</span> <span class="nu0">5</span><span class="sy4">;</span> <span class="co1">// valid</span></pre></div></div>
<p>Similar to union, the behavior of the program is undefined if struct is defined without any named members (including those obtained via anonymous nested structs or unions).
</p>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=3" title="Edit section: Forward declaration">edit</a>]</span> <span class="mw-headline" id="Forward_declaration">Forward declaration</span></h3>
<p>A declaration of the following form
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <code><b>struct</b></code> <span class="t-spar">attr-spec-seq</span> ﻿<span class="t-mark">(optional)</span> <span class="t-spar">name</span> <code><b>;</b></code>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>hides any previously declared meaning for the name <span class="t-spar">name</span> in the tag name space and declares <span class="t-spar">name</span> as a new struct name in current scope, which will be defined later. Until the definition appears, this struct name has <a href="./compatible_type.htm#Incomplete_types" title="c/language/type">incomplete type</a>.
</p><p>This allows structs that refer to each other:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">struct</span> y<span class="sy4">;</span>
<span class="kw1">struct</span> x <span class="br0">{</span> <span class="kw1">struct</span> y <span class="sy2">*</span>p<span class="sy4">;</span> <span class="coMULTI">/* ... */</span> <span class="br0">}</span><span class="sy4">;</span>
<span class="kw1">struct</span> y <span class="br0">{</span> <span class="kw1">struct</span> x <span class="sy2">*</span>q<span class="sy4">;</span> <span class="coMULTI">/* ... */</span> <span class="br0">}</span><span class="sy4">;</span></pre></div></div>
<p>Note that a new struct name may also be introduced just by using a struct tag within another declaration, but if a previously declared struct with the same name exists in the tag <a href="./name_space.htm" title="c/language/name space">name space</a>, the tag would refer to that name
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">struct</span> s<span class="sy2">*</span> p <span class="sy1">=</span> <a href="../types/NULL.htm"><span class="kw103">NULL</span></a><span class="sy4">;</span> <span class="co1">// tag naming an unknown struct declares it</span>
<span class="kw1">struct</span> s <span class="br0">{</span> <span class="kw4">int</span> a<span class="sy4">;</span> <span class="br0">}</span><span class="sy4">;</span> <span class="co1">// definition for the struct pointed to by p</span>
<span class="kw4">void</span> g<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">struct</span> s<span class="sy4">;</span> <span class="co1">// forward declaration of a new, local struct s</span>
              <span class="co1">// this hides global struct s until the end of this block</span>
    <span class="kw1">struct</span> s <span class="sy2">*</span>p<span class="sy4">;</span>  <span class="co1">// pointer to local struct s</span>
                  <span class="co1">// without the forward declaration above,</span>
                  <span class="co1">// this would point at the file-scope s</span>
    <span class="kw1">struct</span> s <span class="br0">{</span> <span class="kw4">char</span><span class="sy2">*</span> p<span class="sy4">;</span> <span class="br0">}</span><span class="sy4">;</span> <span class="co1">// definitions of the local struct s</span>
<span class="br0">}</span></pre></div></div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=4" title="Edit section: Keywords">edit</a>]</span> <span class="mw-headline" id="Keywords">Keywords</span></h3>
<p><a href="../keyword/struct.htm" title="c/keyword/struct"><tt>struct</tt></a>
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=5" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>See <a href="./struct_initialization.htm" title="c/language/struct initialization">struct initialization</a> for the rules regarding the initializers for structs.
</p><p>Because members of incomplete type are not allowed, and a struct type is not complete until the end of the definition, a struct cannot have a member of its own type. A pointer to its own type is allowed, and is commonly used to implement nodes in linked lists or trees.
</p><p>Because a struct declaration does not establish <a href="./scope.htm" title="c/language/scope">scope</a>, nested types, enumerations and enumerators introduced by declarations within <span class="t-spar">struct-declaration-list</span> are visible in the surrounding scope where the struct is defined.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=6" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stddef.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="co1">// Declare the struct type.</span>
    <span class="kw1">struct</span> car
    <span class="br0">{</span>
        <span class="kw4">char</span><span class="sy2">*</span> make<span class="sy4">;</span>
        <span class="kw4">int</span> year<span class="sy4">;</span>
    <span class="br0">}</span><span class="sy4">;</span>
    <span class="co1">// Declare and initialize an object of a previously-declared struct type.</span>
    <span class="kw1">struct</span> car c <span class="sy1">=</span> <span class="br0">{</span>.<span class="me1">year</span> <span class="sy1">=</span> <span class="nu0">1923</span>, .<span class="me1">make</span> <span class="sy1">=</span> <span class="st0">"Nash"</span><span class="br0">}</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"1) Car:&nbsp;%d&nbsp;%s<span class="es1">\n</span>"</span>, c.<span class="me1">year</span>, c.<span class="me1">make</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// Declare a struct type, an object of that type, and a pointer to it.</span>
    <span class="kw1">struct</span> spaceship
    <span class="br0">{</span>
        <span class="kw4">char</span><span class="sy2">*</span> model<span class="sy4">;</span>
        <span class="kw4">int</span> max_speed<span class="sy4">;</span>
    <span class="br0">}</span> ship <span class="sy1">=</span> <span class="br0">{</span><span class="st0">"T-65 X-wing starfighter"</span>, <span class="nu0">1050</span><span class="br0">}</span>,
    <span class="sy2">*</span>pship <span class="sy1">=</span> <span class="sy3">&amp;</span>ship<span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"2) Spaceship:&nbsp;%s. Max speed:&nbsp;%d km/h<span class="es1">\n</span><span class="es1">\n</span>"</span>, ship.<span class="me1">model</span>, ship.<span class="me1">max_speed</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// Address increase in order of definition. Padding may be inserted.</span>
    <span class="kw1">struct</span> A <span class="br0">{</span> <span class="kw4">char</span> a<span class="sy4">;</span> <span class="kw4">double</span> b<span class="sy4">;</span> <span class="kw4">char</span> c<span class="sy4">;</span> <span class="br0">}</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span>
        <span class="st0">"3) Offset of char a =&nbsp;%zu<span class="es1">\n</span>"</span>
        <span class="st0">"4) Offset of double b =&nbsp;%zu<span class="es1">\n</span>"</span>
        <span class="st0">"5) Offset of char c =&nbsp;%zu<span class="es1">\n</span>"</span>
        <span class="st0">"6) Size of struct A =&nbsp;%zu<span class="es1">\n</span><span class="es1">\n</span>"</span>,
        <a href="../types/offsetof.htm"><span class="kw105">offsetof</span></a><span class="br0">(</span><span class="kw1">struct</span> A, a<span class="br0">)</span>,
        <a href="../types/offsetof.htm"><span class="kw105">offsetof</span></a><span class="br0">(</span><span class="kw1">struct</span> A, b<span class="br0">)</span>,
        <a href="../types/offsetof.htm"><span class="kw105">offsetof</span></a><span class="br0">(</span><span class="kw1">struct</span> A, c<span class="br0">)</span>,
        <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw1">struct</span> A<span class="br0">)</span>
    <span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">struct</span> B <span class="br0">{</span> <span class="kw4">char</span> a<span class="sy4">;</span> <span class="kw4">char</span> b<span class="sy4">;</span> <span class="kw4">double</span> c<span class="sy4">;</span> <span class="br0">}</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span>
        <span class="st0">"7) Offset of char a =&nbsp;%zu<span class="es1">\n</span>"</span>
        <span class="st0">"8) Offset of char b =&nbsp;%zu<span class="es1">\n</span>"</span>
        <span class="st0">"9) Offset of double c =&nbsp;%zu<span class="es1">\n</span>"</span>
        <span class="st0">"A) Size of struct B =&nbsp;%zu<span class="es1">\n</span><span class="es1">\n</span>"</span>,
        <a href="../types/offsetof.htm"><span class="kw105">offsetof</span></a><span class="br0">(</span><span class="kw1">struct</span> B, a<span class="br0">)</span>,
        <a href="../types/offsetof.htm"><span class="kw105">offsetof</span></a><span class="br0">(</span><span class="kw1">struct</span> B, b<span class="br0">)</span>,
        <a href="../types/offsetof.htm"><span class="kw105">offsetof</span></a><span class="br0">(</span><span class="kw1">struct</span> B, c<span class="br0">)</span>,
        <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw1">struct</span> B<span class="br0">)</span>
    <span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// A pointer to a struct can be cast to a pointer</span>
    <span class="co1">// to its first member and vice versa.</span>
    <span class="kw4">char</span><span class="sy2">**</span> pmodel <span class="sy1">=</span> <span class="br0">(</span><span class="kw4">char</span> <span class="sy2">**</span><span class="br0">)</span>pship<span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"B)&nbsp;%s<span class="es1">\n</span>"</span>, <span class="sy2">*</span>pmodel<span class="br0">)</span><span class="sy4">;</span>
    pship <span class="sy1">=</span> <span class="br0">(</span><span class="kw1">struct</span> spaceship <span class="sy2">*</span><span class="br0">)</span>pmodel<span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">1) Car: 1923 Nash
2) Spaceship: T-65 X-wing starfighter. Max speed: 1050 km/h
&nbsp;
3) Offset of char a = 0
4) Offset of double b = 8
5) Offset of char c = 16
6) Size of struct A = 24
&nbsp;
7) Offset of char a = 0
8) Offset of char b = 1
9) Offset of double c = 8
A) Size of struct B = 16
&nbsp;
B) T-65 X-wing starfighter</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=7" title="Edit section: Defect reports">edit</a>]</span> <span class="mw-headline" id="Defect_reports">Defect reports</span></h3>
<p>The following behavior-changing defect reports were applied retroactively to previously published C standards.
</p>
<table class="dsctable" style="font-size:0.8em">
<tbody><tr>
<th>DR
</th>
<th>Applied to
</th>
<th>Behavior as published
</th>
<th>Correct behavior
</th></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2396.htm#dr_499">DR 499</a>
</td>
<td>C11
</td>
<td>members of anonymous structs/unions were considered members of the enclosing struct/union
</td>
<td>they retain their memory layout
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=8" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.7.2.1 Structure and union specifiers (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.7.2.1 Structure and union specifiers (p: 81-84)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.7.2.1 Structure and union specifiers (p: 112-117)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.7.2.1 Structure and union specifiers (p: 101-104)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.5.2.1 Structure and union specifiers 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;action=edit&amp;section=9" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<ul><li> <a href="./operator_member_access.htm" title="c/language/operator member access">struct and union member access</a>
</li><li> <a href="./bit_field.htm" title="c/language/bit field">bit-field</a>
</li><li> <a href="./struct_initialization.htm" title="c/language/struct initialization">struct initialization</a>
</li></ul>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/class.html" title="cpp/language/class">C++ documentation</a></span> for <span class=""><span>Class declaration</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 2283/1000000
Preprocessor generated node count: 6759/1000000
Post‐expand include size: 50617/4194304 bytes
Template argument size: 17051/4194304 bytes
Highest expansion depth: 16/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:9822-0!*!0!!en!*!* and timestamp 20250312233355 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;oldid=168507">https://en.cppreference.com/mwiki/index.php?title=c/language/struct&amp;oldid=168507</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.555 secs. -->
	


</body><!-- Cached 20250312233355 --></html>