<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>do-while loop</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_do skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">do-while loop</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Executes a <span class="t-spar">statement</span> repeatedly until the value of the condition <span class="t-spar">expression</span> becomes false. The test takes place after each iteration.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./do.htm#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./do.htm#Explanation"><span class="tocnumber">2</span> <span class="toctext">Explanation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./do.htm#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./do.htm#Keywords"><span class="tocnumber">4</span> <span class="toctext">Keywords</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./do.htm#Example"><span class="tocnumber">5</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./do.htm#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="./do.htm#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline" id="Syntax">Syntax</span></h3>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <span class="t-spar">attr-spec-seq</span> ﻿<span class="t-mark">(optional)</span> <code><b>do</b></code> <span class="t-spar">statement</span> <code><b>while (</b></code> <span class="t-spar">expression</span> <code><b>)</b></code> <code><b>;</b></code>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">attr-spec-seq</span>
</td>
<td> -
</td>
<td> <span class="t-mark-rev t-since-c23">(C23)</span> an optional list of <a href="./attributes.htm" title="c/language/attributes">attributes</a>, applied to the loop statement.
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">statement</span>
</td>
<td> -
</td>
<td> any <a href="./statements.htm" title="c/language/statements">statement</a>, typically a compound statement, which is the body of the loop.
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">expression</span>
</td>
<td> -
</td>
<td> any <a href="./operators.htm" title="c/language/expressions">expression</a> of <a href="./compatible_type.htm#Type_groups" title="c/language/type">scalar type</a>. This expression is evaluated after each iteration, and if it compares equal to zero, the loop is exited.
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=2" title="Edit section: Explanation">edit</a>]</span> <span class="mw-headline" id="Explanation">Explanation</span></h3>
<p>A <span class="mw-geshi c source-c"><span class="kw1">do</span></span>-<span class="mw-geshi c source-c"><span class="kw1">while</span></span> statement causes the <span class="t-spar">statement</span> (also called <i>the loop body</i>) to be executed repeatedly until the <span class="t-spar">expression</span> (also called <i>controlling expression</i>) compares equal to <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>. The repetition occurs regardless of whether the loop body is entered normally or by a <a href="./goto.htm" title="c/language/goto">goto</a> into the middle of <span class="t-spar">statement</span>.
</p><p>The evaluation of <span class="t-spar">expression</span> takes place after each execution of <span class="t-spar">statement</span> (whether entered normally or by a <span class="mw-geshi c source-c"><span class="kw1">goto</span></span>). If the controlling expression needs to be evaluated before the loop body, the <a href="./while.htm" title="c/language/while">while loop</a> or the <a href="./for.htm" title="c/language/for">for loop</a> may be used.
</p><p>If the execution of the loop needs to be terminated at some point, <a href="./break.htm" title="c/language/break">break statement</a> can be used as terminating statement.
</p><p>If the execution of the loop needs to be continued at the end of the loop body, <a href="./continue.htm" title="c/language/continue">continue statement</a> can be used as a shortcut.
</p><p>A program with an endless loop has undefined behavior if the loop has no observable behavior (I/O, volatile accesses, atomic or synchronization operation) in any part of its <span class="t-spar">statement</span> or <span class="t-spar">expression</span>. This allows the compilers to optimize out all unobservable loops without proving that they terminate. The only exceptions are the loops where 
<span class="t-spar">expression</span> is a constant expression; <span class="t-c"><span class="mw-geshi c source-c"><span class="kw1">do</span> <span class="br0">{</span>...<span class="br0">}</span> <span class="kw1">while</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span><span class="sy4">;</span></span></span> is always an endless loop.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<p>As with all other selection and iteration statements, the <code>do-while</code> statement establishes <a href="./scope.htm" title="c/language/scope">block scope</a>: any identifier introduced in the <span class="t-spar">expression</span> goes out of scope after the statement.
</p>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>Boolean and pointer expressions are often used as loop controlling expressions. The boolean value <span class="t-c"><span class="mw-geshi c source-c"><span class="kw2">false</span></span></span> and the null pointer value of any pointer type compare equal to zero.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=4" title="Edit section: Keywords">edit</a>]</span> <span class="mw-headline" id="Keywords">Keywords</span></h3>
<p><a href="../keyword/do.htm" title="c/keyword/do"><tt>do</tt></a>,
<a href="../keyword/while.htm" title="c/keyword/while"><tt>while</tt></a>
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=5" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="kw2">enum</span> <span class="br0">{</span> SIZE <span class="sy1">=</span> <span class="nu0">8</span> <span class="br0">}</span><span class="sy4">;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="co1">// trivial example</span>
    <span class="kw4">int</span> array<span class="br0">[</span>SIZE<span class="br0">]</span>, n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp;
    <span class="kw1">do</span> array<span class="br0">[</span>n<span class="sy2">++</span><span class="br0">]</span> <span class="sy1">=</span> <a href="../numeric/random/rand.htm"><span class="kw741">rand</span></a><span class="br0">(</span><span class="br0">)</span> <span class="sy2">%</span> <span class="nu0">2</span><span class="sy4">;</span> <span class="co1">// the loop body is a single expression statement</span>
    <span class="kw1">while</span><span class="br0">(</span>n <span class="sy1">&lt;</span> SIZE<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"Array filled!"</span><span class="br0">)</span><span class="sy4">;</span>
    n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp;
    <span class="kw1">do</span>
    <span class="br0">{</span> <span class="co1">// the loop body is a compound statement</span>
        <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"%d "</span>, array<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="sy2">++</span>n<span class="sy4">;</span>
    <span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span>n <span class="sy1">&lt;</span> SIZE<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// the loop from K&amp;R itoa(). The do-while loop is used</span>
    <span class="co1">// because there is always at least one digit to generate</span>
    <span class="kw4">int</span> num <span class="sy1">=</span> <span class="nu0">1234</span>, i<span class="sy1">=</span><span class="nu0">0</span><span class="sy4">;</span>
    <span class="kw4">char</span> s<span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span><span class="sy4">;</span>
&nbsp;
    <span class="kw1">do</span> s<span class="br0">[</span>i<span class="sy2">++</span><span class="br0">]</span> <span class="sy1">=</span> num <span class="sy2">%</span> <span class="nu0">10</span> <span class="sy2">+</span> <span class="st0">'0'</span><span class="sy4">;</span> <span class="co1">// get next digit in reverse order</span>
    <span class="kw1">while</span> <span class="br0">(</span><span class="br0">(</span>num <span class="sy2">/</span><span class="sy1">=</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy1">&gt;</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    s<span class="br0">[</span>i<span class="br0">]</span> <span class="sy1">=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="sy4">;</span>
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span>s<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">Array filled!
1 0 1 1 1 1 0 0
4321</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=6" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.8.6.3 The do statement (p: 156)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.8.5.2 The do statement (p: 109)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.8.5.2 The do statement (p: 151)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.8.5.2 The do statement (p: 136)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.6.5.2 The do statement 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;action=edit&amp;section=7" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/do.html" title="cpp/language/do">C++ documentation</a></span> for <span class=""><span><span class="mw-geshi c source-c"><span class="kw1">do</span></span>-<span class="mw-geshi c source-c"><span class="kw1">while</span></span> loop</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 2298/1000000
Preprocessor generated node count: 6343/1000000
Post‐expand include size: 48756/4194304 bytes
Template argument size: 9894/4194304 bytes
Highest expansion depth: 17/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:6042-0!*!0!!en!*!* and timestamp 20250522220957 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;oldid=183392">https://en.cppreference.com/mwiki/index.php?title=c/language/do&amp;oldid=183392</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.037 secs. -->
	


</body><!-- Cached 20250523004954 --></html>