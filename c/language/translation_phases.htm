<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Phases of translation</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_translation_phases skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Phases of translation</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>The C source file is processed by the compiler <i>as if</i> the following phases take place, in this exact order. Actual implementation may combine these actions or process them differently as long as the behavior is the same.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./translation_phases.htm#Phase_1"><span class="tocnumber">1</span> <span class="toctext">Phase 1</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./translation_phases.htm#Phase_2"><span class="tocnumber">2</span> <span class="toctext">Phase 2</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./translation_phases.htm#Phase_3"><span class="tocnumber">3</span> <span class="toctext">Phase 3</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./translation_phases.htm#Phase_4"><span class="tocnumber">4</span> <span class="toctext">Phase 4</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./translation_phases.htm#Phase_5"><span class="tocnumber">5</span> <span class="toctext">Phase 5</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./translation_phases.htm#Phase_6"><span class="tocnumber">6</span> <span class="toctext">Phase 6</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="./translation_phases.htm#Phase_7"><span class="tocnumber">7</span> <span class="toctext">Phase 7</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="./translation_phases.htm#Phase_8"><span class="tocnumber">8</span> <span class="toctext">Phase 8</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="./translation_phases.htm#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="./translation_phases.htm#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=1" title="Edit section: Phase 1">edit</a>]</span> <span class="mw-headline" id="Phase_1">Phase 1</span></h3>
<div class="t-li1"><span class="t-li">1)</span> The individual bytes of the source code file (which is generally a text file in some multibyte encoding such as UTF-8) are mapped, in implementation defined manner, to the characters of the <i>source character set</i>. In particular, OS-dependent end-of-line indicators are replaced by newline characters.
<dl><dd>The <i>source character set</i> is a multibyte character set which includes the <i>basic source character set</i> as a single-byte subset, consisting of the following 96 characters:</dd></dl></div>

<div class="t-li2"><span class="t-li">a)</span> 5 whitespace characters (space, horizontal tab, vertical tab, form feed, new-line)</div>
<div class="t-li2"><span class="t-li">b)</span> 10 digit characters from <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'0'</span></span></span> to <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'9'</span></span></span></div>
<div class="t-li2"><span class="t-li">c)</span> 52 letters from <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'a'</span></span></span> to <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'z'</span></span></span> and from <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'A'</span></span></span> to <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">'Z'</span></span></span></div>
<div class="t-li2"><span class="t-li">d)</span> 29 punctuation characters: <span class="t-c"><span class="mw-geshi c source-c">_ <span class="br0">{</span> <span class="br0">}</span> <span class="br0">[</span> <span class="br0">]</span> <span class="co2"># ( ) &lt; &gt;&nbsp;%&nbsp;:&nbsp;; .&nbsp;? * + - / ^ &amp; | ~&nbsp;! = , \ " '</span></span></span></div>
<div class="t-li1"><span class="t-li">2)</span> <span class="t-rev-inl t-until-c23"><span><a href="./operator_alternative.htm" title="c/language/operator alternative">Trigraph sequences</a> are replaced by corresponding single-character representations.</span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span></div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=2" title="Edit section: Phase 2">edit</a>]</span> <span class="mw-headline" id="Phase_2">Phase 2</span></h3>
<div class="t-li1"><span class="t-li">1)</span> Whenever backslash appears at the end of a line (immediately followed by the newline character), both backslash and newline are deleted, combining two physical source lines into one logical source line. This is a single-pass operation: a line ending in two backslashes followed by an empty line does not combine three lines into one.
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="co2">#define PUTS p\
u\
t\
s</span>
<span class="coMULTI">/* Line splicing is in phase 2 while macros
 * are tokenized in phase 3 and expanded in phase 4,
 * so the above is equivalent to #define PUTS puts
 */</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
 <span class="coMULTI">/* Use line splicing to call puts */</span> PUT\
S\
<span class="br0">(</span><span class="st0">"Output ends here<span class="es1">\\</span>
0Not printed"</span> <span class="coMULTI">/* After line splicing, the remaining backslash
               * escapes the 0, ending the string early.
               */</span>
<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
</div></div>
<div class="t-li1"><span class="t-li">2)</span> If a non-empty source file does not end with a newline character after this step (whether it had no newline originally, or it ended with a backslash), the behavior is undefined.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=3" title="Edit section: Phase 3">edit</a>]</span> <span class="mw-headline" id="Phase_3">Phase 3</span></h3>
<div class="t-li1"><span class="t-li">1)</span> The source file is decomposed into <a href="../comment.htm" title="c/comment">comment</a>, sequences of whitespace characters (space, horizontal tab, new-line, vertical tab, and form-feed), and <i>preprocessing tokens</i>, which are the following</div>
<div class="t-li2"><span class="t-li">a)</span> header names: <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&lt;</span>stdio.<span class="me1">h</span><span class="sy1">&gt;</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c"><span class="st0">"myfile.h"</span></span></span></div>
<div class="t-li2"><span class="t-li">b)</span> <a href="./identifiers.htm" title="c/language/identifier">identifiers</a></div>
<div class="t-li2"><span class="t-li">c)</span> preprocessing numbers, which cover <a href="./integer_constant.htm" title="c/language/integer constant">integer constants</a> and <a href="./floating_constant.htm" title="c/language/floating constant">floating constants</a>, but also cover some invalid tokens such as <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span>..<span class="me1">E</span><span class="sy2">+</span>3.<span class="me1">foo</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c">0JBK</span></span></div>
<div class="t-li2"><span class="t-li">d)</span> <a href="./character_constant.htm" title="c/language/character constant">character constants</a> and <a href="./string_literal.htm" title="c/language/string literal">string literals</a></div>
<div class="t-li2"><span class="t-li">e)</span> operators and punctuators, such as <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">+</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&lt;&lt;=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&lt;</span><span class="sy2">%</span></span></span>, or <span class="t-c"><span class="mw-geshi c source-c"><span class="co2">##</span></span></span>.</div>
<div class="t-li2"><span class="t-li">f)</span> individual non-whitespace characters that do not fit in any other category</div>
<div class="t-li1"><span class="t-li">2)</span> Each comment is replaced by one space character</div>
<div class="t-li1"><span class="t-li">3)</span> Newlines are kept, and it's implementation-defined whether non-newline whitespace sequences may be collapsed into single space characters.</div>
<p><span id="maximal_munch"></span>
If the input has been parsed into preprocessing tokens up to a given character, the next preprocessing token is generally taken to be the longest sequence of characters that could constitute a preprocessing token, even if that would cause subsequent analysis to fail. This is commonly known as <i>maximal munch</i>.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> foo <span class="sy1">=</span> <span class="nu0">1</span><span class="sy4">;</span>
<span class="co1">// int bar = 0xE+foo; // error: invalid preprocessing number 0xE+foo</span>
<span class="kw4">int</span> bar <span class="sy1">=</span> <span class="nu12">0xE</span><span class="coMULTI">/*Comment expands to a space*/</span><span class="sy2">+</span>foo<span class="sy4">;</span> <span class="co1">// OK: 0xE + foo</span>
<span class="kw4">int</span> baz <span class="sy1">=</span> <span class="nu12">0xE</span> <span class="sy2">+</span> foo<span class="sy4">;</span> <span class="co1">// OK: 0xE + foo</span>
<span class="kw4">int</span> pub <span class="sy1">=</span> bar<span class="sy2">+++</span>baz<span class="sy4">;</span> <span class="co1">// OK: bar++ + baz</span>
<span class="kw4">int</span> ham <span class="sy1">=</span> bar<span class="sy2">++-++</span>baz<span class="sy4">;</span> <span class="co1">// OK: bar++ - ++baz</span>
<span class="co1">// int qux = bar+++++baz; // error: bar++ ++ +baz, not bar++ + ++baz</span>
<span class="kw4">int</span> qux <span class="sy1">=</span> bar<span class="sy2">+++</span><span class="coMULTI">/*Saving comment*/</span><span class="sy2">++</span>baz<span class="sy4">;</span> <span class="co1">// OK: bar++ + ++baz</span></pre></div></div>
<p>The sole exception to the maximal munch rule is:
</p>
<ul><li> Header name preprocessing tokens are only formed within a <a href="../preprocessor/include.htm" title="c/preprocessor/include"><tt>
#include</tt></a> <span class="t-rev-inl t-since-c23"><span>or <a href="../preprocessor/embed.htm" title="c/preprocessor/embed"><tt>
#embed</tt></a></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> directive, <span class="t-rev-inl t-since-c23"><span>in <a href="../preprocessor/include.htm" title="c/preprocessor/include"><tt>__has_include</tt></a> and <a href="../preprocessor/embed.htm" title="c/preprocessor/embed"><tt>__has_embed</tt></a> expressions</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> and in implementation-defined locations within a <a href="../preprocessor/impl.htm" title="c/preprocessor/impl"><tt>
#pragma</tt></a> directive.
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define MACRO_1 1</span>
<span class="co2">#define MACRO_2 2</span>
<span class="co2">#define MACRO_3 3</span>
<span class="co2">#define MACRO_EXPR (MACRO_1 &lt;MACRO_2&gt; MACRO_3) // OK: &lt;MACRO_2&gt; is not a header-name</span></pre></div></div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=4" title="Edit section: Phase 4">edit</a>]</span> <span class="mw-headline" id="Phase_4">Phase 4</span></h3>
<div class="t-li1"><span class="t-li">1)</span> <a href="../preprocessor.htm" title="c/preprocessor">Preprocessor</a> is executed.</div>
<div class="t-li1"><span class="t-li">2)</span> Each file introduced with the <a href="../preprocessor/include.htm" title="c/preprocessor/include">#include</a> directive goes through phases 1 through 4, recursively.</div>
<div class="t-li1"><span class="t-li">3)</span> At the end of this phase, all preprocessor directives are removed from the source.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=5" title="Edit section: Phase 5">edit</a>]</span> <span class="mw-headline" id="Phase_5">Phase 5</span></h3>
<div class="t-li1"><span class="t-li">1)</span> All characters and <a href="./escape.htm" title="c/language/escape">escape sequences</a> in <a href="./character_constant.htm" title="c/language/character constant">character constants</a> and <a href="./string_literal.htm" title="c/language/string literal">string literals</a> are converted from <i>source character set</i> to <i>execution character set</i> (which may be a multibyte character set such as UTF-8, as long as all 96 characters from the <i>basic source character set</i> listed in phase 1 have single-byte representations). If the character specified by an escape sequence isn't a member of the execution character set, the result is implementation-defined, but is guaranteed to not be a null (wide) character.</div>
<p>Note: the conversion performed at this stage can be controlled by command line options in some implementations: gcc and clang use <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span>finput<span class="sy2">-</span>charset</span></span> to specify the encoding of the source character set, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span>fexec<span class="sy2">-</span>charset</span></span> and <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span>fwide<span class="sy2">-</span>exec<span class="sy2">-</span>charset</span></span> to specify the encodings of the execution character set in the string literals and character constants <span class="t-rev-inl t-since-c11"><span>that don't have an encoding prefix</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=6" title="Edit section: Phase 6">edit</a>]</span> <span class="mw-headline" id="Phase_6">Phase 6</span></h3>
<p>Adjacent <a href="./string_literal.htm" title="c/language/string literal">string literals</a> are concatenated.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=7" title="Edit section: Phase 7">edit</a>]</span> <span class="mw-headline" id="Phase_7">Phase 7</span></h3>
<p>Compilation takes place: the tokens are syntactically and semantically analyzed and translated as a translation unit.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=8" title="Edit section: Phase 8">edit</a>]</span> <span class="mw-headline" id="Phase_8">Phase 8</span></h3>
<p>Linking takes place: Translation units and library components needed to satisfy external references are collected into a program image which contains information needed for execution in its execution environment (the OS).
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=9" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 5.1.1.2 Translation phases (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.2.1 Character sets (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.4 Lexical elements (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 5.1.1.2 Translation phases (p: 9-10)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.2.1 Character sets (p: 17)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.4 Lexical elements (p: 41-54)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 5.1.1.2 Translation phases (p: 10-11)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.2.1 Character sets (p: 22-24)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.4 Lexical elements (p: 57-75)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 5.1.1.2 Translation phases (p: 9-10)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.2.1 Character sets (p: 17-19)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.4 Lexical elements (p: 49-66)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 2.1.1.2 Translation phases 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 2.2.1 Character sets 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.1 Lexical elements 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;action=edit&amp;section=10" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/translation_phases.html" title="cpp/language/translation phases">C++ documentation</a></span> for <span class=""><span>Phases of translation</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 1976/1000000
Preprocessor generated node count: 5609/1000000
Post‐expand include size: 39469/4194304 bytes
Template argument size: 6652/4194304 bytes
Highest expansion depth: 13/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13879-0!*!0!!en!*!* and timestamp 20250418080559 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;oldid=160564">https://en.cppreference.com/mwiki/index.php?title=c/language/translation_phases&amp;oldid=160564</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.037 secs. -->
	


</body><!-- Cached 20250418101650 --></html>