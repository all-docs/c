<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>String literals</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_string_literal skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">String literals</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Constructs an unnamed object of specified character array type in-place, used when a character string needs to be embedded in source code.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./string_literal.htm#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./string_literal.htm#Explanation"><span class="tocnumber">2</span> <span class="toctext">Explanation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./string_literal.htm#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./string_literal.htm#Example"><span class="tocnumber">4</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./string_literal.htm#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./string_literal.htm#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline" id="Syntax">Syntax</span></h3>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>"</b></code> <span class="t-spar">s-char-sequence</span> <code><b>"</b></code>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>u8"</b></code> <span class="t-spar">s-char-sequence</span> <code><b>"</b></code>
</td>
<td> (2)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>u"</b></code> <span class="t-spar">s-char-sequence</span> <code><b>"</b></code>
</td>
<td> (3)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>U"</b></code> <span class="t-spar">s-char-sequence</span> <code><b>"</b></code>
</td>
<td> (4)
</td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>L"</b></code> <span class="t-spar">s-char-sequence</span> <code><b>"</b></code>
</td>
<td> (5)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">s-char-sequence</span>
</td>
<td> -
</td>
<td> zero or more characters, each of which is either a multibyte character from the source character set (excluding (<code><b>"</b></code>), <code><b>\</b></code>, and newline), or character escape, hex escape, octal escape<span class="t-rev-inl t-since-c99"><span>, or universal character name</span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span> as defined in <a href="./escape.htm" title="c/language/escape">escape sequences</a>.
</td></tr></tbody></table>
<div class="t-li1"><span class="t-li">1)</span> <i>character string literal</i>: The type of the literal is <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">char</span><span class="br0">[</span>N<span class="br0">]</span></span></span>, where <code>N</code> is the size of the string in code units of the execution narrow encoding, including the null terminator. Each <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">char</span></span></span> element in the array is initialized from the next character in <span class="t-spar">s-char-sequence</span> using the execution character set.</div>
<div class="t-li1"><span class="t-li">2)</span> <i>UTF-8 string literal</i>: The type of the literal is <span class="t-rev-inl t-until-c23"><span><span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">char</span><span class="br0">[</span>N<span class="br0">]</span></span></span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="t-c"><span class="mw-geshi c source-c">char8_t<span class="br0">[</span>N<span class="br0">]</span></span></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>, where <code>N</code> is the size of the string in UTF-8 code units including the null terminator. Each <span class="t-rev-inl t-until-c23"><span><span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">char</span></span></span></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><span class="t-c"><span class="mw-geshi c source-c">char8_t</span></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> element in the array is initialized from the next multibyte character in <span class="t-spar">s-char-sequence</span> using UTF-8 encoding.</div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c23"><td>
<div class="t-li1"><span class="t-li">3)</span> 16-bit wide string literal: The type of the literal is <span class="t-c"><span class="mw-geshi c source-c">char16_t<span class="br0">[</span>N<span class="br0">]</span></span></span>, where <code>N</code> is the size of the string in code units of implementation-defined 16-bit encoding (typically UTF-16), including the null terminator. Each <span class="t-c"><span class="mw-geshi c source-c">char16_t</span></span> element in the array is initialized as if by executing <span class="t-lc"><a href="../string/multibyte/mbrtoc16.htm" title="c/string/multibyte/mbrtoc16">mbrtoc16</a></span> in implementation-defined locale.</div>
<div class="t-li1"><span class="t-li">4)</span> 32-bit wide string literal: The type of the literal is <span class="t-c"><span class="mw-geshi c source-c">char32_t<span class="br0">[</span>N<span class="br0">]</span></span></span>, where <code>N</code> is the size of the string in code units of implementation-defined 32-bit encoding (typically UTF-32), including the null terminator. Each <span class="t-c"><span class="mw-geshi c source-c">char32_t</span></span> element in the array is initialized as if by executing <span class="t-lc"><a href="../string/multibyte/mbrtoc32.htm" title="c/string/multibyte/mbrtoc32">mbrtoc32</a></span> in implementation-defined locale.
</div></td>
<td><span class="t-mark-rev t-until-c23">(until C23)</span></td></tr>
<tr class="t-rev t-since-c23"><td>
<div class="t-li1"><span class="t-li">3)</span> <i>UTF-16 string literal</i>: The type of the literal is <span class="t-c"><span class="mw-geshi c source-c">char16_t<span class="br0">[</span>N<span class="br0">]</span></span></span>, where <code>N</code> is the size of the string in UTF-16 code units including the null terminator. Each <span class="t-c"><span class="mw-geshi c source-c">char16_t</span></span> element in the array is initialized from the next multibyte character in <span class="t-spar">s-char-sequence</span> using UTF-16 encoding.</div>
<div class="t-li1"><span class="t-li">4)</span> <i>UTF-32 string literal</i>: The type of the literal is <span class="t-c"><span class="mw-geshi c source-c">char32_t<span class="br0">[</span>N<span class="br0">]</span></span></span>, where <code>N</code> is the size of the string in UTF-32 code units including the null terminator. Each <span class="t-c"><span class="mw-geshi c source-c">char32_t</span></span> element in the array is initialized from the next multibyte character in <span class="t-spar">s-char-sequence</span> using UTF-32 encoding.
</div></td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<div class="t-li1"><span class="t-li">5)</span> wide string literal: The type of the literal is <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">wchar_t</span><span class="br0">[</span>N<span class="br0">]</span></span></span>, where <code>N</code> is the size of the string in code units of the execution wide encoding, including the null terminator. Each <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">wchar_t</span></span></span> element in the array is initialized as if by executing <span class="t-lc"><a href="../string/multibyte/mbstowcs.htm" title="c/string/multibyte/mbstowcs">mbstowcs</a></span> in implementation-defined locale.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit&amp;section=2" title="Edit section: Explanation">edit</a>]</span> <span class="mw-headline" id="Explanation">Explanation</span></h3>
<p>First, at <a href="./translation_phases.htm" title="c/language/translation phases">translation phase 6</a> (after macro expansion), the adjacent string literals (that is, string literals separated by whitespace only) are concatenated.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c99"><td>
<p>Only two narrow or two wide string literals may be concatenated.
</p>
</td>
<td><span class="t-mark-rev t-until-c99">(until C99)</span></td></tr>
<tr class="t-rev t-since-c99"><td>
<p>If one literal is unprefixed, the resulting string literal has the width/encoding specified by the prefixed literal.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">L<span class="st0">"Δx =&nbsp;%"</span> <a href="../types/integer.htm"><span class="kw177">PRId16</span></a> <span class="co1">// at phase 4, PRId16 expands to "d"</span>
                 <span class="co1">// at phase 6, L"Δx =&nbsp;%" and "d" form L"Δx =&nbsp;%d"</span></pre></div></div>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11 t-until-c23"><td>
<p>If the two string literals have different encoding prefixes, concatenation is implementation-defined, except that a UTF-8 string literal and a wide string literal cannot be concatenated.
</p>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span><br><span class="t-mark-rev t-until-c23">(until C23)</span></td></tr>
<tr class="t-rev t-since-c23"><td>
<p>If the two string literals have different encoding prefixes, concatenation is ill-formed.
</p>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<p>Secondly, at <a href="./translation_phases.htm" title="c/language/translation phases">translation phase 7</a>, a terminating null character is added to each string literal, and then each literal initializes an unnamed array with static <a href="./storage_class_specifiers.htm" title="c/language/storage duration">storage duration</a> and length just enough to contain the contents of the string literal plus one for the null terminator.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">char</span><span class="sy2">*</span> p <span class="sy1">=</span> <span class="st0">"<span class="es2">\x12</span>"</span> <span class="st0">"3"</span><span class="sy4">;</span> <span class="co1">// creates a static char[3] array holding {'\x12', '3', '\0'}</span>
                      <span class="co1">// sets p to point to the first element of the array</span></pre></div></div>
<p>String literals are <b>not modifiable</b> (and in fact may be placed in read-only memory such as <code>.rodata</code>). If a program attempts to modify the static array formed by a string literal, the behavior is undefined.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">char</span><span class="sy2">*</span> p <span class="sy1">=</span> <span class="st0">"Hello"</span><span class="sy4">;</span>
p<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">'M'</span><span class="sy4">;</span> <span class="co1">// Undefined behavior</span>
<span class="kw4">char</span> a<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"Hello"</span><span class="sy4">;</span>
a<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">'M'</span><span class="sy4">;</span> <span class="co1">// OK: a is not a string literal</span></pre></div></div>
<p>It is neither required nor forbidden for identical string literals to refer to the same location in memory. Moreover, overlapping string literals or string literals that are substrings of other string literals may be combined.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="st0">"def"</span> <span class="sy1">==</span> <span class="nu0">3</span><span class="sy2">+</span><span class="st0">"abcdef"</span><span class="sy4">;</span> <span class="co1">// may be 1 or 0, implementation-defined</span></pre></div></div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>A string literal is not necessarily a string; if a string literal has embedded null characters, it represents an array which contains more than one string:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">char</span><span class="sy2">*</span> p <span class="sy1">=</span> <span class="st0">"abc<span class="es5">\0</span>def"</span><span class="sy4">;</span> <span class="co1">// strlen(p) == 3, but the array has size 8</span></pre></div></div>
<p>If a valid hex digit follows a hex escape in a string literal, it would fail to compile as an invalid escape sequence, but string concatenation can be used as a workaround:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co1">//char* p = "\xfff"; // error: hex escape sequence out of range</span>
<span class="kw4">char</span><span class="sy2">*</span> p <span class="sy1">=</span> <span class="st0">"<span class="es2">\xff</span>"</span><span class="st0">"f"</span><span class="sy4">;</span> <span class="co1">// okay, the literal is char[3] holding {'\xff', 'f', '\0'}</span></pre></div></div>
<p>String literals can be used to <a href="./array_initialization.htm" title="c/language/array initialization">initialize arrays</a>, and if the size of the array is one less the size of the string literal, the null terminator is ignored:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">char</span> a1<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"abc"</span><span class="sy4">;</span> <span class="co1">// a1 is char[4] holding {'a', 'b', 'c', '\0'}</span>
<span class="kw4">char</span> a2<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"abc"</span><span class="sy4">;</span> <span class="co1">// a2 is char[4] holding {'a', 'b', 'c', '\0'}</span>
<span class="kw4">char</span> a3<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"abc"</span><span class="sy4">;</span> <span class="co1">// a3 is char[3] holding {'a', 'b', 'c'}</span></pre></div></div>
<p>The encoding of character string literals <span class="t-v">(1)</span> and wide string literals <span class="t-v">(5)</span> is implementation-defined. For example, gcc selects them with the <a rel="nofollow" class="external text" href="https://gcc.gnu.org/onlinedocs/cpp/Invocation.html">commandline options</a> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span>fexec<span class="sy2">-</span>charset</span></span> and <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span>fwide<span class="sy2">-</span>exec<span class="sy2">-</span>charset</span></span>.
</p><p>Although mixed wide string literal concatenation is allowed in C11, almost all compilers reject such concatenation (the only known exception is <a rel="nofollow" class="external text" href="http://sdcc.sourceforge.net/">SDCC</a>), and its usage experience is unknown. As a result, allowance of mixed wide string literal concatenation is removed in C23.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit&amp;section=4" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;inttypes.h&gt;</span>
<span class="co2">#include &lt;locale.h&gt;</span>
<span class="co2">#include &lt;stddef.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;uchar.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">char</span> s1<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"a猫🍌"</span><span class="sy4">;</span> <span class="co1">// or "a\u732B\U0001F34C"</span>
<span class="co2">#if __STDC_VERSION__ &gt;= 202311L</span>
    char8_t
<span class="co2">#else</span>
    <span class="kw4">char</span>
<span class="co2">#endif</span>
    s2<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> u8<span class="st0">"a猫🍌"</span><span class="sy4">;</span>
    char16_t s3<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> u<span class="st0">"a猫🍌"</span><span class="sy4">;</span>
    char32_t s4<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> U<span class="st0">"a猫🍌"</span><span class="sy4">;</span>
    <span class="kw4">wchar_t</span> s5<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> L<span class="st0">"a猫🍌"</span><span class="sy4">;</span>
&nbsp;
    <a href="../locale/setlocale.htm"><span class="kw901">setlocale</span></a><span class="br0">(</span><a href="../locale/LC_categories.htm"><span class="kw904">LC_ALL</span></a>, <span class="st0">"en_US.utf8"</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"  <span class="es1">\"</span>%s<span class="es1">\"</span> is a char[%zu] holding     { "</span>, s1, <span class="kw4">sizeof</span> s1 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s1<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">for</span><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="kw4">sizeof</span> s1 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s1<span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
        <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"0x%02X "</span>, <span class="sy2">+</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="br0">)</span>s1<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"}"</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span>
<span class="co2">#if __STDC_VERSION__ &gt;= 202311L</span>
    <span class="st0">"u8<span class="es1">\"</span>%s<span class="es1">\"</span> is a char8_t[%zu] holding  { "</span>
<span class="co2">#else</span>
    <span class="st0">"u8<span class="es1">\"</span>%s<span class="es1">\"</span> is a char[%zu] holding     { "</span>
<span class="co2">#endif</span>
, s2, <span class="kw4">sizeof</span> s2 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s2<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">for</span><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="kw4">sizeof</span> s2 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s2<span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
<span class="co2">#if __STDC_VERSION__ &gt;= 202311L</span>
       <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"0x%02X "</span>, s2<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="co2">#else</span>
       <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"0x%02X "</span>, <span class="sy2">+</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="br0">)</span>s2<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="co2">#endif</span>
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"}"</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">" u<span class="es1">\"</span>a猫🍌<span class="es1">\"</span> is a char16_t[%zu] holding { "</span>, <span class="kw4">sizeof</span> s3 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s3<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">for</span><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="kw4">sizeof</span> s3 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s3<span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
       <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"0x%04"</span> <a href="../types/integer.htm"><span class="kw251">PRIXLEAST16</span></a><span class="st0">" "</span>, s3<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"}"</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">" U<span class="es1">\"</span>a猫🍌<span class="es1">\"</span> is a char32_t[%zu] holding { "</span>, <span class="kw4">sizeof</span> s4 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s4<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">for</span><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="kw4">sizeof</span> s4 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s4<span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
       <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"0x%08"</span> <a href="../types/integer.htm"><span class="kw252">PRIXLEAST32</span></a><span class="st0">" "</span>, s4<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"}"</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">" L<span class="es1">\"</span>%ls<span class="es1">\"</span> is a wchar_t[%zu] holding  { "</span>, s5, <span class="kw4">sizeof</span> s5 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s5<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">for</span><span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a> n <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> n <span class="sy1">&lt;</span> <span class="kw4">sizeof</span> s5 <span class="sy2">/</span> <span class="kw4">sizeof</span> <span class="sy2">*</span>s5<span class="sy4">;</span> <span class="sy2">++</span>n<span class="br0">)</span>
       <a href="../io/fprintf.htm"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"0x%08X "</span>, <span class="br0">(</span><span class="kw4">unsigned</span><span class="br0">)</span>s5<span class="br0">[</span>n<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../io/puts.htm"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"}"</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">  "a猫🍌" is a char[9] holding     { 0x61 0xE7 0x8C 0xAB 0xF0 0x9F 0x8D 0x8C 0x00 }
u8"a猫🍌" is a char[9] holding     { 0x61 0xE7 0x8C 0xAB 0xF0 0x9F 0x8D 0x8C 0x00 }
 u"a猫🍌" is a char16_t[5] holding { 0x0061 0x732B 0xD83C 0xDF4C 0x0000 }
 U"a猫🍌" is a char32_t[4] holding { 0x00000061 0x0000732B 0x0001F34C 0x00000000 }
 L"a猫🍌" is a wchar_t[4] holding  { 0x00000061 0x0000732B 0x0001F34C 0x00000000 }</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit&amp;section=5" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.4.5 String literals (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.4.5 String literals (p: 50-52)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.4.5 String literals (p: 70-72)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.4.5 String literals (p: 62-63)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.1.4 String literals 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/string_literal.html" title="cpp/language/string literal">C++ documentation</a></span> for <span class=""><span>string literal</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 2836/1000000
Preprocessor generated node count: 8353/1000000
Post‐expand include size: 66357/4194304 bytes
Template argument size: 21619/4194304 bytes
Highest expansion depth: 19/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13907-0!*!0!!en!*!* and timestamp 20250418074316 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;oldid=150263">https://en.cppreference.com/mwiki/index.php?title=c/language/string_literal&amp;oldid=150263</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 1.015 secs. -->
	


</body><!-- Cached 20250418074316 --></html>