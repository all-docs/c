<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Function declarations</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_function_declaration skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Function declarations</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>A function declaration introduces an <a href="./identifiers.htm" title="c/language/identifier">identifier</a> that designates a function and, optionally, specifies the types of the function parameters (the <i>prototype</i>). Function declarations (unlike <a href="./function_definition.htm" title="c/language/function definition">definitions</a>) may appear at block scope as well as file scope.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./function_declaration.htm#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./function_declaration.htm#Explanation"><span class="tocnumber">2</span> <span class="toctext">Explanation</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./function_declaration.htm#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./function_declaration.htm#Defect_reports"><span class="tocnumber">4</span> <span class="toctext">Defect reports</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./function_declaration.htm#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./function_declaration.htm#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline" id="Syntax">Syntax</span></h3>
<p>In the <a href="./declarations.htm" title="c/language/declarations">declaration grammar</a> of a function declaration, the <span class="t-spar">type-specifier</span> sequence, possibly modified by the declarator, designates the <i>return type</i> (which may be any type other than array or function type), and the <span class="t-spar">declarator</span> has one of <span class="t-rev-inl t-until-c23"><span>three</span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span>two</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> forms:
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">noptr-declarator</span>  <code><b>(</b></code> <span class="t-spar">parameter-list</span> <code><b>)</b></code> <span class="t-spar">attr-spec-seq</span><span class="t-mark">(optional)</span>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">noptr-declarator</span>  <code><b>(</b></code> <span class="t-spar">identifier-list</span> <code><b>)</b></code> <span class="t-spar">attr-spec-seq</span><span class="t-mark">(optional)</span>
</td>
<td> (2)
</td>
<td> <span class="t-mark-rev t-until-c23">(until C23)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">noptr-declarator</span>  <code><b>(</b></code> <code><b>)</b></code> <span class="t-spar">attr-spec-seq</span><span class="t-mark">(optional)</span>
</td>
<td> (3)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">noptr-declarator</span>
</td>
<td> -
</td>
<td> any <a href="./declarations.htm#Declarators" title="c/language/declarations">declarator</a> except unparenthesized pointer declarator. The identifier that is contained in this declarator is the identifier that becomes the function designator.
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">parameter-list</span>
</td>
<td> -
</td>
<td> either the single keyword <span class="mw-geshi c source-c"><span class="kw4">void</span></span> or a comma-separated list of <i>parameters</i>, which may end with an <a href="./variadic.htm" title="c/language/variadic">ellipsis parameter</a>
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">identifier-list</span>
</td>
<td> -
</td>
<td> comma-separated list of identifiers, only possible if this declarator is used as part of old-style <a href="./function_definition.htm" title="c/language/function definition">function definition</a>
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">attr-spec-seq</span>
</td>
<td> -
</td>
<td> <span class="t-mark-rev t-since-c23">(C23)</span> an optional list of <a href="./attributes.htm" title="c/language/attributes">attributes</a>, applied to the function type
</td></tr></tbody></table>
<div class="t-li1"><span class="t-li">1)</span> New-style (C89) function declaration. This declaration both introduces the function designator itself and also serves as a function prototype for any future <a href="./operator_other.htm#Function_call" title="c/language/operator other">function call expressions</a>, forcing conversions from argument expressions to the declared parameter types and compile-time checks for the number of arguments.
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> max<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declaration</span>
<span class="kw4">int</span> n <span class="sy1">=</span> max<span class="br0">(</span><span class="nu16">12.01</span>, <span class="nu16">3.14</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// OK, conversion from double to int</span></pre></div></div></div>
<div class="t-li1"><span class="t-li">2)</span> <span class="t-mark-rev t-until-c23">(until C23)</span> Old-style (K&amp;R) function definition. This declaration does not introduce a prototype and any future <a href="./operator_other.htm#Function_call" title="c/language/operator other">function call expressions</a> will perform default argument promotions and will invoke undefined behavior if the number of arguments doesn't match the number of parameters.
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> max<span class="br0">(</span>a, b<span class="br0">)</span>
    <span class="kw4">int</span> a, b<span class="sy4">;</span> <span class="co1">// definition expects ints; the second call is undefined</span>
<span class="br0">{</span>
    <span class="kw1">return</span> a <span class="sy1">&gt;</span> b <span class="sy4">?</span> a <span class="sy4">:</span> b<span class="sy4">;</span>
<span class="br0">}</span>
&nbsp;
<span class="kw4">int</span> n <span class="sy1">=</span> max<span class="br0">(</span><span class="kw2">true</span>, <span class="br0">(</span><span class="kw4">char</span><span class="br0">)</span><span class="st0">'a'</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// calls max with two int args (after promotions)</span>
&nbsp;
<span class="kw4">int</span> n <span class="sy1">=</span> max<span class="br0">(</span><span class="nu17">12.01f</span>, <span class="nu16">3.14</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// calls max with two double args (after promotions)</span></pre></div></div></div>
<div class="t-li1"><span class="t-li">3)</span> <span class="t-rev-inl t-until-c23"><span>Non-prototype function declaration. This declaration does not introduce a prototype</span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span>. <span class="t-rev-inl t-since-c23"><span>A new style function declaration equivalent to the <span class="t-spar">parameter-list</span> <span class="mw-geshi c source-c"><span class="kw4">void</span></span></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit&amp;section=2" title="Edit section: Explanation">edit</a>]</span> <span class="mw-headline" id="Explanation">Explanation</span></h3>
<p>The return type of the function, determined by the type specifier in <span class="t-spar">specifiers-and-qualifiers</span> and possibly modified by the <span class="t-spar">declarator</span> as usual in <a href="./declarations.htm" title="c/language/declarations">declarations</a>, must be a non-array object type or the type <span class="mw-geshi c source-c"><span class="kw4">void</span></span>. If the function declaration is not a definition, the return type can be <a href="./compatible_type.htm#Incomplete_types" title="c/language/type">incomplete</a>. The return type cannot be cvr-qualified: any qualified return type is adjusted to its unqualified version for the purpose of constructing the function type.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">char</span> <span class="sy2">*</span>s<span class="br0">)</span><span class="sy4">;</span>                    <span class="co1">// return type is void</span>
<span class="kw4">int</span> sum<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span><span class="sy4">;</span>              <span class="co1">// return type of sum is int.</span>
<span class="kw4">int</span> <span class="br0">(</span><span class="sy2">*</span>foo<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span> <span class="sy2">*</span>p<span class="br0">)</span><span class="br0">)</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy4">;</span>       <span class="co1">// return type is pointer to array of 3 int</span>
&nbsp;
<span class="kw4">double</span> <span class="kw4">const</span> bar<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>             <span class="co1">// declares function of type double(void)</span>
<span class="kw4">double</span> <span class="br0">(</span><span class="sy2">*</span>barp<span class="br0">)</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="sy1">=</span> bar<span class="sy4">;</span>         <span class="co1">// OK: barp is a pointer to double(void)</span>
<span class="kw4">double</span> <span class="kw4">const</span> <span class="br0">(</span><span class="sy2">*</span>barpc<span class="br0">)</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="sy1">=</span> barp<span class="sy4">;</span> <span class="co1">// OK: barpc is also a pointer to double(void)</span></pre></div></div>
<p>Function declarators can be combined with other declarators as long as they can share their type specifiers and qualifiers
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>, <span class="sy2">*</span>fip<span class="br0">(</span><span class="br0">)</span>, <span class="br0">(</span><span class="sy2">*</span>pfi<span class="br0">)</span><span class="br0">(</span><span class="br0">)</span>, <span class="sy2">*</span>ap<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy4">;</span> <span class="co1">// declares two functions and two objects</span>
<span class="kw1">inline</span> <span class="kw4">int</span> g<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>, n<span class="sy4">;</span> <span class="co1">// Error: inline qualifier is for functions only</span>
<span class="kw1">typedef</span> <span class="kw4">int</span> array_t<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy4">;</span>
array_t a, h<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// Error: array type cannot be a return type for a function</span></pre></div></div>
<p>If a function declaration appears outside of any function, the identifier it introduces has <a href="./scope.htm" title="c/language/scope">file scope</a> and <a href="./storage_class_specifiers.htm" title="c/language/storage duration">external linkage</a>, unless <span class="mw-geshi c source-c"><span class="kw4">static</span></span> is used or an earlier static declaration is visible. If the declaration occurs inside another function, the identifier has block scope (and also either internal or external linkage).
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// external linkage, block scope</span>
    f<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// definition needs to be available somewhere in the program</span>
<span class="br0">}</span></pre></div></div>
<p>The parameters in a declaration <span class="t-rev-inl t-until-c23"><span>that is not part of a <a href="./function_definition.htm" title="c/language/function definition">function definition</a></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span> do not need to be named:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span>, <span class="kw4">int</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declaration</span>
<span class="co1">// int f(int, int) { return 7; } // Error: parameters must be named in definitions</span>
<span class="co1">// This definition is allowed since C23</span></pre></div></div>
<p>Each parameter in a <span class="t-spar">parameter-list</span> is a <a href="./declarations.htm" title="c/language/declarations">declaration</a> that introduced a single variable, with the following additional properties:
</p>
<ul><li> the identifier in the declarator is optional <span class="t-rev-inl t-until-c23"><span>(except if this function declaration is part of a function definition)</span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span>
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span>, <span class="kw4">double</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// OK</span>
<span class="kw4">int</span> g<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">double</span> b<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// also OK</span>
<span class="co1">// int f(int, double) { return 1; } // Error: definition must name parameters</span>
<span class="co1">// This definition is allowed since C23</span></pre></div></div>
<ul><li> the only <a href="./storage_class_specifiers.htm" title="c/language/storage duration">storage class specifier</a> allowed for parameters is <span class="mw-geshi c source-c"><span class="kw4">register</span></span>, and it is ignored in function declarations that are not definitions
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">static</span> <span class="kw4">int</span> x<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// Error</span>
<span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> <span class="br0">[</span><span class="kw4">static</span> <span class="nu0">10</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// OK (array index static is not a storage class specifier)</span></pre></div></div>
<ul><li> any parameter of array type is adjusted to the corresponding pointer type<span class="t-rev-inl t-since-c99"><span>, which may be qualified if there are qualifiers between the square brackets of the array declarator</span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span>
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declares int f(int*)</span>
<span class="kw4">int</span> g<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">int</span><span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declares int g(const int*)</span>
<span class="kw4">int</span> h<span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="kw4">const</span> <span class="kw4">volatile</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declares int h(int * const volatile)</span>
<span class="kw4">int</span> x<span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="sy2">*</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declares int x(int*)</span></pre></div></div>
<ul><li> any parameter of function type is adjusted to the corresponding pointer type
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">char</span> g<span class="br0">(</span><span class="kw4">double</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declares int f(char (*g)(double))</span>
<span class="kw4">int</span> h<span class="br0">(</span><span class="kw4">int</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declares int h(int (*)(void))</span></pre></div></div>
<ul><li> the parameter list may terminate with <code><b>, ...</b></code> <span class="t-rev-inl t-since-c23"><span>or be <code><b>...</b></code></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>, see <a href="./variadic.htm" title="c/language/variadic">variadic functions</a> for details.
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span>, ...<span class="br0">)</span><span class="sy4">;</span></pre></div></div>
<ul><li> parameters cannot have type <span class="mw-geshi c source-c"><span class="kw4">void</span></span> (but can have type pointer to void). The special parameter list that consists entirely of the keyword <span class="mw-geshi c source-c"><span class="kw4">void</span></span> is used to declare functions that take no parameters.
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// OK</span>
<span class="kw4">int</span> g<span class="br0">(</span><span class="kw4">void</span> x<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// Error</span></pre></div></div>
<ul><li> any identifier that appears in a parameter list that could be treated as a typedef name or as a parameter name is treated as a typedef name: <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">int</span> f<span class="br0">(</span><a href="../types/size_t.htm"><span class="kw100">size_t</span></a>, <a href="../types/integer.htm"><span class="kw133">uintptr_t</span></a><span class="br0">)</span></span></span> is parsed as a new-style declarator for a function taking two unnamed parameters of type <span class="mw-geshi c source-c"><a href="../types/size_t.htm"><span class="kw100">size_t</span></a></span> and <span class="mw-geshi c source-c"><a href="../types/integer.htm"><span class="kw133">uintptr_t</span></a></span>, not an old-style declarator that begins the definition of a function taking two parameters named "<span class="mw-geshi c source-c"><a href="../types/size_t.htm"><span class="kw100">size_t</span></a></span>" and "<span class="mw-geshi c source-c"><a href="../types/integer.htm"><span class="kw133">uintptr_t</span></a></span>".
</li><li> parameters may have incomplete type<span class="t-rev-inl t-since-c99"><span> and may use the VLA notation <span class="mw-geshi c source-c"><span class="br0">[</span><span class="sy2">*</span><span class="br0">]</span></span></span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span> (except that in a <a href="./function_definition.htm" title="c/language/function definition">function definition</a>, the parameter types after array-to-pointer and function-to-pointer adjustment must be complete).
</li></ul>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c23"><td>
<p><a href="./attributes.htm" title="c/language/attributes">Attribute specifier sequences</a> can also applied to function parameters.
</p>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<p>See <a href="./operator_other.htm#Function_call" title="c/language/operator other">function call operator</a> for other details on the mechanics of a function call and <a href="./return.htm" title="c/language/return">return</a> for returning from functions.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c23"><td>
<p>Unlike in C++, the declarators <span class="t-c"><span class="mw-geshi c source-c">f<span class="br0">(</span><span class="br0">)</span></span></span> and <span class="t-c"><span class="mw-geshi c source-c">f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span></span></span> have different meaning: the declarator <span class="t-c"><span class="mw-geshi c source-c">f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span></span></span> is a new-style (prototype) declarator that declares a function that takes no parameters. The declarator <span class="t-c"><span class="mw-geshi c source-c">f<span class="br0">(</span><span class="br0">)</span></span></span> is a declarator that declares a function that takes <i>unspecified</i> number of parameters (unless used in a function definition)
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declaration: takes no parameters</span>
<span class="kw4">int</span> g<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// declaration: takes unknown parameters</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
    f<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// compile-time error</span>
    g<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// undefined behavior</span>
<span class="br0">}</span>
&nbsp;
<span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">1</span><span class="sy4">;</span> <span class="br0">}</span> <span class="co1">// actual definition</span>
<span class="kw4">int</span> g<span class="br0">(</span>a,b,c,d<span class="br0">)</span> <span class="kw4">int</span> a,b,c,d<span class="sy4">;</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">2</span><span class="sy4">;</span> <span class="br0">}</span> <span class="co1">// actual definition</span></pre></div></div>
</td>
<td><span class="t-mark-rev t-until-c23">(until C23)</span></td></tr>
</tbody></table>
<p>Unlike in a <a href="./function_definition.htm" title="c/language/function definition">function definition</a>, the parameter list may be inherited from a typedef
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">typedef</span> <span class="kw4">int</span> p<span class="br0">(</span><span class="kw4">int</span> q, <span class="kw4">int</span> r<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// p is a function type int(int, int)</span>
p f<span class="sy4">;</span> <span class="co1">// declares int f(int, int)</span></pre></div></div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-until-c99"><td>
<p>In C89, <span class="t-spar">specifiers-and-qualifiers</span> was optional, and if omitted, the return type of the function defaulted to <span class="mw-geshi c source-c"><span class="kw4">int</span></span> (possibly amended by the <span class="t-spar">declarator</span>).
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="sy2">*</span>f<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="co1">// function returning int*</span>
   <span class="kw1">return</span> <a href="../types/NULL.htm"><span class="kw103">NULL</span></a><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
</td>
<td><span class="t-mark-rev t-until-c99">(until C99)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit&amp;section=4" title="Edit section: Defect reports">edit</a>]</span> <span class="mw-headline" id="Defect_reports">Defect reports</span></h3>
<p>The following behavior-changing defect reports were applied retroactively to previously published C standards.
</p>
<table class="dsctable" style="font-size:0.8em">
<tbody><tr>
<th>DR
</th>
<th>Applied to
</th>
<th>Behavior as published
</th>
<th>Correct behavior
</th></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2396.htm#dr_423">DR 423</a>
</td>
<td>C89
</td>
<td>the return type might be qualified
</td>
<td>the return type is implicitly disqualified
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit&amp;section=5" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.7.7.4 Function declarators (including prototypes) (p: 130-132)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.7.6.3 Function declarators (including prototypes) (p: 96-98)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.7.6.3 Function declarators (including prototypes) (p: 133-136)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.7.5.3 Function declarators (including prototypes) (p: 118-121)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.5.4.3 Function declarators (including prototypes) 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/function.html" title="cpp/language/function">C++ documentation</a></span> for <span class=""><span>Function declaration</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 2831/1000000
Preprocessor generated node count: 7735/1000000
Post‐expand include size: 51307/4194304 bytes
Template argument size: 13016/4194304 bytes
Highest expansion depth: 16/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13985-0!*!0!!en!*!* and timestamp 20250511115529 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;oldid=183166">https://en.cppreference.com/mwiki/index.php?title=c/language/function_declaration&amp;oldid=183166</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.045 secs. -->
	


</body><!-- Cached 20250511120306 --></html>