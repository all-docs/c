<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Memory model</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_memory_model skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Memory model</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Defines the semantics of computer memory storage for the purpose of the C abstract machine.
</p><p>The data storage (memory) available to a C program is one or more contiguous sequences of <i>bytes</i>. Each byte in memory has a unique <i>address</i>.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./memory_model.htm#Byte"><span class="tocnumber">1</span> <span class="toctext">Byte</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./memory_model.htm#Memory_location"><span class="tocnumber">2</span> <span class="toctext">Memory location</span></a></li>
<li class="toclevel-1"><a href="./memory_model.htm#Threads_and_data_races"><span class="tocnumber">3</span> <span class="toctext">Threads and data races</span></a></li>
<li class="toclevel-1"><a href="./memory_model.htm#Memory_order"><span class="tocnumber">4</span> <span class="toctext">Memory order</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./memory_model.htm#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./memory_model.htm#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;action=edit&amp;section=1" title="Edit section: Byte">edit</a>]</span> <span class="mw-headline" id="Byte">Byte</span></h3>
<p>A <i>byte</i> is the smallest addressable unit of memory. It is defined as a contiguous sequence of bits, large enough to hold any member of the <i>basic execution character set</i> (<a href="./translation_phases.htm" title="c/language/translation phases">the 96 characters</a> that are required to be single-byte). C supports bytes of sizes 8 bits and greater.
</p><p>The <a href="./compatible_type.htm" title="c/language/types" class="mw-redirect">types</a> <span class="mw-geshi c source-c"><span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">char</span></span>, and <span class="mw-geshi c source-c"><span class="kw4">signed</span> <span class="kw4">char</span></span> use one byte for both storage and <a href="./object.htm" title="c/language/object">value representation</a>. The number of bits in a byte is accessible as <span class="t-lc"><a href="../types/limits.htm" title="c/types/limits">CHAR_BIT</a></span>.
</p><p>For use of bytes to representation values of other fundamental types (including big-endian and little-endian memory layouts), see <a href="./object.htm#Object_representation" title="c/language/object">object representation</a>
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;action=edit&amp;section=2" title="Edit section: Memory location">edit</a>]</span> <span class="mw-headline" id="Memory_location">Memory location</span></h3>
<p>A <i>memory location</i> is
</p>
<ul><li> an object of <a href="./compatible_type.htm#Type_groups" title="c/language/type">scalar type</a> (arithmetic type, pointer type, enumeration type)
</li><li> or the largest contiguous sequence of <a href="./bit_field.htm" title="c/language/bit field">bit-fields</a> of non-zero length
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw1">struct</span> S
<span class="br0">{</span>
    <span class="kw4">char</span> a<span class="sy4">;</span>     <span class="co1">// memory location #1</span>
    <span class="kw4">int</span> b <span class="sy4">:</span> <span class="nu0">5</span><span class="sy4">;</span>  <span class="co1">// memory location #2</span>
    <span class="kw4">int</span> c <span class="sy4">:</span> <span class="nu0">11</span>, <span class="co1">// memory location #2 (continued)</span>
          <span class="sy4">:</span> <span class="nu0">0</span>,
        d <span class="sy4">:</span> <span class="nu0">8</span><span class="sy4">;</span>  <span class="co1">// memory location #3</span>
    <span class="kw1">struct</span>
    <span class="br0">{</span>
        <span class="kw4">int</span> ee <span class="sy4">:</span> <span class="nu0">8</span><span class="sy4">;</span> <span class="co1">// memory location #4</span>
    <span class="br0">}</span> e<span class="sy4">;</span>
<span class="br0">}</span> obj<span class="sy4">;</span> <span class="co1">// The object 'obj' consists of 4 separate memory locations</span></pre></div></div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<h3> <span class="mw-headline" id="Threads_and_data_races">Threads and data races</span></h3>
<p>A thread of execution is a flow of control within a program that begins with the invocation of a top-level function by <span class="t-lc"><a href="../thread/thrd_create.htm" title="c/thread/thrd create">thrd_create</a></span> or other means.
</p><p>Any thread can potentially access any object in the program (objects with automatic and thread-local <a href="./storage_class_specifiers.htm" title="c/language/storage duration">storage duration</a> may still be accessed by another thread through a pointer).
</p><p>Different threads of execution are always allowed to access (read and modify) different <i>memory locations</i> concurrently, with no interference and no synchronization requirements. (note that it is not safe to concurrently update two non-atomic bit-fields in the same structure if all members declared between them are also (non-zero-length) bit-fields, no matter what the sizes of those intervening bit-fields happen to be)
</p><p>When an <a href="./eval_order.htm" title="c/language/eval order">evaluation</a> of an expression writes to a memory location and another evaluation reads or modifies the same memory location, the expressions are said to <i>conflict</i>. A program that has two conflicting evaluations has a <i>data race</i> unless either
</p>
<ul><li> both conflicting evaluations are <a href="./atomic.htm" title="c/language/atomic">atomic operations</a>
</li><li> one of the conflicting evaluations <i>happens-before</i> another (see <span class="t-lc"><a href="../atomic/memory_order.htm" title="c/atomic/memory order">memory_order</a></span>)
</li></ul>
<p>If a data race occurs, the behavior of the program is undefined.
</p>
(in particular, <span class="t-lc"><a href="../thread/mtx_unlock.htm" title="c/thread/mtx unlock">mtx_unlock</a></span> is <i>synchronized-with</i>, and therefore, <i>happens-before</i> <span class="t-lc"><a href="../thread/mtx_lock.htm" title="c/thread/mtx lock">mtx_lock</a></span> of the same mutex by another thread, which makes it possible to use mutex locks to guard against data races) <table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tbody><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br>Reason: small example or two </td></tr></tbody></table>
<h3> <span class="mw-headline" id="Memory_order">Memory order</span></h3>
<p>When a thread reads a value from a memory location, it may see the initial value, the value written in the same thread, or the value written in another thread. See <span class="t-lc"><a href="../atomic/memory_order.htm" title="c/atomic/memory order">memory_order</a></span> for details on the order in which writes made from threads become visible to other threads.
</p>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;action=edit&amp;section=5" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 3.6 byte (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.14 memory location (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.1.2.4 Multi-threaded executions and data races (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 3.6 byte (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.14 memory location (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.1.2.4 Multi-threaded executions and data races (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 3.6 byte (p: 4)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.14 memory location (p: 5)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 5.1.2.4 Multi-threaded executions and data races (p: 17-21)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 3.6 byte (p: 4)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 1.6 DEFINITIONS OF TERMS 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/memory_model.html" title="cpp/language/memory model">C++ documentation</a></span> for <span class=""><span>Memory model</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 1442/1000000
Preprocessor generated node count: 7140/1000000
Post‐expand include size: 37272/4194304 bytes
Template argument size: 6220/4194304 bytes
Highest expansion depth: 18/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13886-0!*!0!!en!*!* and timestamp 20240904203915 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;oldid=175727">https://en.cppreference.com/mwiki/index.php?title=c/language/memory_model&amp;oldid=175727</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="https://en.cppreference.com/w/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://en.cppreference.com/w/Category%253ATodo_with_reason.html" title="Category:Todo with reason">Todo with reason</a></li></ul></div></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.037 secs. -->
	


</body><!-- Cached 20240904215444 --></html>