<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Constant expressions</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_constant_expression skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Constant expressions</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Several varieties of expressions are known as <i>constant expressions</i>.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./constant_expression.htm#Preprocessor_constant_expression"><span class="tocnumber">1</span> <span class="toctext">Preprocessor constant expression</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./constant_expression.htm#Integer_constant_expression"><span class="tocnumber">2</span> <span class="toctext">Integer constant expression</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./constant_expression.htm#Static_initializer"><span class="tocnumber">3</span> <span class="toctext">Static initializer</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./constant_expression.htm#Floating-point_constant_expressions"><span class="tocnumber">4</span> <span class="toctext">Floating-point constant expressions</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./constant_expression.htm#Notes"><span class="tocnumber">5</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./constant_expression.htm#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="./constant_expression.htm#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=1" title="Edit section: Preprocessor constant expression">edit</a>]</span> <span class="mw-headline" id="Preprocessor_constant_expression">Preprocessor constant expression</span></h3>
<p>The expression following <a href="../preprocessor/conditional.htm" title="c/preprocessor/conditional"><code>#if</code> or <code>#elif</code></a> must expand to
</p>
<ul><li> <a href="./operators.htm#Operators" title="c/language/expressions">operators</a> other than <a href="./operator_assignment.htm" title="c/language/operator assignment">assignment</a>, <a href="./operator_incdec.htm" title="c/language/operator incdec">increment, decrement</a>, <a href="./operator_other.htm#Function_call" title="c/language/operator other">function-call</a>, or <a href="./operator_other.htm#Comma_operator" title="c/language/operator other">comma</a> whose arguments are preprocessor constant expressions
</li><li> <a href="./integer_constant.htm" title="c/language/integer constant">integer constants</a>
</li><li> <a href="./character_constant.htm" title="c/language/character constant">character constants</a>
</li><li> the special preprocessor operator <code>defined</code>.
</li></ul>
<p>Character constants, when evaluated in <code>#if</code>-expressions, may be interpreted in the source
character set, the execution character set, or some other implementation-defined character set.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<p>Integer arithmetic in <code>#if</code>-expressions is performed using the semantics of <span class="t-lc"><a href="../types/integer.htm" title="c/types/integer">intmax_t</a></span> for signed types and <span class="t-lc"><a href="../types/integer.htm" title="c/types/integer">uintmax_t</a></span> for unsigned types.
</p>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=2" title="Edit section: Integer constant expression">edit</a>]</span> <span class="mw-headline" id="Integer_constant_expression">Integer constant expression</span></h3>
<p>An integer constant expression is an expression that consists only of
</p>
<ul><li> <a href="./operators.htm#Operators" title="c/language/expressions">operators</a> other than <a href="./operator_assignment.htm" title="c/language/operator assignment">assignment</a>, <a href="./operator_incdec.htm" title="c/language/operator incdec">increment, decrement</a>, <a href="./operator_other.htm#Function_call" title="c/language/operator other">function-call</a>, or <a href="./operator_other.htm#Comma_operator" title="c/language/operator other">comma</a>, except that <a href="./cast.htm" title="c/language/cast">cast</a> operators can only cast arithmetic types to integer types unless they are part of an operand to a sizeof <span class="t-rev-inl t-since-c11 t-until-c23"><span>, _Alignof</span><span><span class="t-mark-rev t-since-c11">(since C11)</span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span>, alignas</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> <span class="t-rev-inl t-since-c23"><span>or typeof/typeof_unqual</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> operator.
</li><li> <a href="./integer_constant.htm" title="c/language/integer constant">integer constants</a>
</li><li> <a href="./enum.htm" title="c/language/enum">enumeration constants</a>
</li><li> <a href="./character_constant.htm" title="c/language/character constant">character constants</a>
</li><li> <a href="./floating_constant.htm" title="c/language/floating constant">floating constants</a>, but only if they are immediately used as operands of casts to integer type
</li><li> <a href="./sizeof.htm" title="c/language/sizeof"><code>sizeof</code></a> operators<span class="t-rev-inl t-since-c99"><span> whose operands are not VLA</span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span>
</li></ul>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<ul><li> <span class="t-rev-inl t-until-c23"><span>_Alignof</span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span>alignas</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> operators
</li></ul>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c23"><td>
<ul><li> named and compound literal constants that are of integer type or that are of arithmetic type and are the immediate operands of casts
</li></ul>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<p>Integer constant expressions are evaluated at compile time. The following contexts require expressions that are known as <i>integer constant expressions</i>:
</p>
<ul><li> The size of a <a href="./bit_field.htm" title="c/language/bit field">bit-field</a>.
</li><li> The value of an <a href="./enum.htm" title="c/language/enum">enumeration constant</a>
</li><li> The <code>case</code> label of a <a href="./switch.htm" title="c/language/switch">switch statement</a>
</li><li> The size of a <span class="t-rev-inl t-since-c99"><span>non-VLA</span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span> array
</li><li> Integer to pointer implicit <a href="./conversion.htm" title="c/language/conversion">conversion</a>.
</li></ul>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<ul><li> The index in an <a href="./array_initialization.htm" title="c/language/array initialization">array designator</a>
</li></ul>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
<tr class="t-rev t-since-c11"><td>
<ul><li> The first argument of <a href="./static_assert.htm" title="c/language/ Static assert"><code>_Static_assert</code></a>
</li><li> The integer argument of <span class="t-rev-inl t-until-c23"><span><a href="./alignof.htm" title="c/language/ Alignof"><code>_Alignof</code></a></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><a href="./alignof.htm" title="c/language/alignof" class="mw-redirect"><code>alignof</code></a></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>
</li></ul>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
<tr class="t-rev t-since-c23"><td>
<ul><li> The number of bits N of a bit-precise integer type (<span class="t-c"><span class="mw-geshi c source-c">_BitInt<span class="br0">(</span>N<span class="br0">)</span></span></span>)
</li></ul>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=3" title="Edit section: Static initializer">edit</a>]</span> <span class="mw-headline" id="Static_initializer">Static initializer</span></h3>
<p>Expressions that are used in the <a href="./initialization.htm" title="c/language/initialization">initializers</a> of objects with static and thread_local <a href="./storage_class_specifiers.htm" title="c/language/storage duration">storage duration</a> <span class="t-rev-inl t-since-c23"><span>or declared with the <span class="t-lc">constexpr</span> storage-class specifier</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> must be either string literals or expressions that may be one of the following
</p>
<div class="t-li1"><span class="t-li">1)</span> <i>arithmetic constant expression</i>, which is an expression of any arithmetic type that consists of
<dl><dd><ul><li> <a href="./operators.htm#Operators" title="c/language/expressions">operators</a> other than <a href="./operator_assignment.htm" title="c/language/operator assignment">assignment</a>, <a href="./operator_incdec.htm" title="c/language/operator incdec">increment, decrement</a>, <a href="./operator_other.htm#Function_call" title="c/language/operator other">function-call</a>, or <a href="./operator_other.htm#Comma_operator" title="c/language/operator other">comma</a>, except that <a href="./cast.htm" title="c/language/cast">cast</a> operators must be converting arithmetic types to other arithmetic types unless they are part of an operand to a sizeof <span class="t-rev-inl t-since-c11 t-until-c23"><span>, _Alignof</span><span><span class="t-mark-rev t-since-c11">(since C11)</span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span>, alignof</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> <span class="t-rev-inl t-since-c23"><span>or typeof/typeof_unqual</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> operator
</li><li> <a href="./integer_constant.htm" title="c/language/integer constant">integer constants</a>
</li><li> <a href="./floating_constant.htm" title="c/language/floating constant">floating constants</a>
</li><li> <a href="./enum.htm" title="c/language/enum">enumeration constants</a>
</li><li> <a href="./character_constant.htm" title="c/language/character constant">character constants</a>
</li><li> <a href="./sizeof.htm" title="c/language/sizeof"><code>sizeof</code></a> operators <span class="t-rev-inl t-since-c99"><span>whose operands are not VLA</span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span>
</li></ul>
</dd></dl>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<dl><dd><ul><li> <span class="t-rev-inl t-until-c23"><span><a href="./alignof.htm" title="c/language/ Alignof"><code>_Alignof</code></a></span><span><span class="t-mark-rev t-until-c23">(until C23)</span></span></span><span class="t-rev-inl t-since-c23"><span><a href="./alignof.htm" title="c/language/alignof" class="mw-redirect"><code>alignof</code></a></span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span> operators
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c23"><td>
<dl><dd><ul><li> named or compound literal constants of arithmetic type
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table></div>
<div class="t-li1"><span class="t-li">2)</span> a null pointer constant (e.g., <span class="t-lc"><a href="../types/NULL.htm" title="c/types/NULL">NULL</a></span>).</div>
<div class="t-li1"><span class="t-li">3)</span> <i>address constant expression</i>, which is
<dl><dd><ul><li> a null pointer
</li><li> <a href="./value_category.htm" title="c/language/value category">lvalue</a> designating an object of static <a href="./storage_class_specifiers.htm" title="c/language/storage duration">storage duration</a> or a function designator, converted to a pointer either
</li></ul>
<dl><dd><ul><li> by using the unary address-of operator
</li><li> by casting an integer constant to a pointer
</li><li> by array-to-pointer or function-to-pointer implicit <a href="./conversion.htm" title="c/language/conversion">conversion</a>.</li></ul></dd></dl></dd></dl></div>



<div class="t-li1"><span class="t-li">4)</span> <i>address constant expression</i> of some complete object type, plus or minus an <i>integer constant expression</i>.</div>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c23"><td>
<div class="t-li1"><span class="t-li">5)</span> a <i>named constant</i> which is, an identifier that is
<dl><dd><ul><li> an enumeration constant
</li><li> a predefined constant (one of <span class="t-lc">true</span>, <span class="t-lc">false</span> or <span class="t-lc">nullptr</span>)
</li><li> declared with storage-class specifier <span class="t-lc">constexpr</span> and has an object type
</li></ul>
</dd></dl>
or a postfix expression that applies the <code><b>.</b></code> member access operator to a named constant of structure or union type, even recursively.</div>
<div class="t-li1"><span class="t-li">6)</span> a <i>compound literal constant</i>, which is
<dl><dd><ul><li>a <a href="./compound_literal.htm" title="c/language/compound literal">compound literal</a> with storage-class specifier <span class="t-lc">constexpr</span>
</li><li>a postfix expression that applies the <code><b>.</b></code> member access operator to a compound literal constant of structure or union type, even recursively.</li></ul></dd></dl></div>


<p>A <i>structure or union constant</i> is a named constant or compound literal constant with structure or union type, respectively. If the member-access operator <code><b>.</b></code> accesses a member of a union constant, the accessed member shall be the same as the member that is initialized by the union constant’s initializer.
</p>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<div class="t-li1"><span class="t-li">7)</span> constant expression of one of the other forms accepted by the implementation.</div>
<p>Unlike with integer constant expressions, static initializer expressions are not required to be evaluated at compile time; the compiler is at liberty to turn such initializers into executable code which is invoked prior to program startup.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">static</span> <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">2</span> <span class="sy3">||</span> <span class="nu0">1</span> <span class="sy2">/</span> <span class="nu0">0</span><span class="sy4">;</span> <span class="co1">// initializes i to value 1</span></pre></div></div>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tbody><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br>Reason: other mini-examples </td></tr></tbody></table>
<p>The value of a floating-point static initializer is never less accurate than the value of the same expression executed at run time, but it may be better.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=4" title="Edit section: Floating-point constant expressions">edit</a>]</span> <span class="mw-headline" id="Floating-point_constant_expressions">Floating-point constant expressions</span></h3>
<p>Arithmetic constant expressions of floating-point types that are not used in static initializers are always evaluated as-if during run-time and are affected by the <a href="../numeric/fenv/FE_round.htm" title="c/numeric/fenv/FE round">current rounding</a> (if <a href="../preprocessor/impl.htm" title="c/preprocessor/impl"><tt>FENV_ACCESS</tt></a> is on) and report errors as specified in <a href="../numeric/math/math_errhandling.htm" title="c/numeric/math/math errhandling"><tt>math_errhandling</tt></a>.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
<span class="co2">#pragma STDC FENV_ACCESS ON</span>
    <span class="kw4">static</span> <span class="kw4">float</span> x <span class="sy1">=</span> <span class="nu16">0.0</span> <span class="sy2">/</span> <span class="nu16">0.0</span><span class="sy4">;</span> <span class="co1">// static initializer: does not raise an exception</span>
    <span class="kw4">float</span> w<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span> <span class="nu16">0.0</span> <span class="sy2">/</span> <span class="nu16">0.0</span> <span class="br0">}</span><span class="sy4">;</span>  <span class="co1">// raises an exception</span>
    <span class="kw4">float</span> y <span class="sy1">=</span> <span class="nu16">0.0</span> <span class="sy2">/</span> <span class="nu16">0.0</span><span class="sy4">;</span>        <span class="co1">// raises an exception</span>
    <span class="kw4">double</span> z <span class="sy1">=</span> <span class="nu16">0.0</span> <span class="sy2">/</span> <span class="nu16">0.0</span><span class="sy4">;</span>       <span class="co1">// raises an exception</span>
<span class="br0">}</span></pre></div></div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=5" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>If an expression evaluates to a value that is not representable by its type, it cannot be used as a constant expression.
</p><p>Implementations may accept other forms of constant expressions. However, these constant expressions are not considered as integer constant expressions, arithmetic constant expressions, or address constant expressions, and thus cannot be used in the contexts requiring these kinds of constant expressions. For example, <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">int</span> arr<span class="br0">[</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="sy2">+</span><span class="nu16">1.0</span><span class="br0">]</span><span class="sy4">;</span></span></span> declares a VLA.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=6" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 6.6 Constant expressions (p: 95-96)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.6 Constant expressions (p: 76-77)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.6 Constant expressions (p: 106-107)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.6 Constant expressions (p: 95-96)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.4 CONSTANT EXPRESSIONS 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;action=edit&amp;section=7" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/constant_expression.html" title="cpp/language/constant expression">C++ documentation</a></span> for <span class=""><span>Constant expressions</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 3576/1000000
Preprocessor generated node count: 10904/1000000
Post‐expand include size: 72772/4194304 bytes
Template argument size: 14842/4194304 bytes
Highest expansion depth: 19/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13898-0!*!0!!en!*!* and timestamp 20250512072438 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;oldid=183172">https://en.cppreference.com/mwiki/index.php?title=c/language/constant_expression&amp;oldid=183172</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="https://en.cppreference.com/w/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://en.cppreference.com/w/Category%253ATodo_with_reason.html" title="Category:Todo with reason">Todo with reason</a></li></ul></div></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.082 secs. -->
	


</body><!-- Cached 20250512082630 --></html>