<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Assignment operators</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_operator_assignment skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Assignment operators</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Assignment and compound assignment operators are binary operators that modify the variable to their left using the value to their right.
</p>
<table class="wikitable" style="font-size:85%;">

<tbody><tr style="text-align:center">
<th> Operator
</th>
<th> Operator name
</th>
<th> Example
</th>
<th> Description
</th>
<th> Equivalent of
</th></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">=</span></span></span>
</td>
<td> basic assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to <b>b</b>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">+</span><span class="sy1">=</span></span></span>
</td>
<td> addition assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy2">+</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the addition of <b>a</b> and <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy2">+</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span><span class="sy1">=</span></span></span>
</td>
<td> subtraction assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy2">-</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the subtraction of <b>b</b> from <b>a</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy2">-</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">*</span><span class="sy1">=</span></span></span>
</td>
<td> multiplication assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy2">*</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the product of <b>a</b> and <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy2">*</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">/</span><span class="sy1">=</span></span></span>
</td>
<td> division assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy2">/</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the division of <b>a</b> by <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy2">/</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">%</span><span class="sy1">=</span></span></span>
</td>
<td> modulo assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy2">%</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the remainder of <b>a</b> divided by <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy2">%</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">&amp;</span><span class="sy1">=</span></span></span>
</td>
<td> bitwise AND assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy3">&amp;</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the bitwise AND of <b>a</b> and <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy3">&amp;</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">|</span><span class="sy1">=</span></span></span>
</td>
<td> bitwise OR assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy3">|</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the bitwise OR of <b>a</b> and <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy3">|</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">^</span><span class="sy1">=</span></span></span>
</td>
<td> bitwise XOR assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy3">^</span><span class="sy1">=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to the bitwise XOR of <b>a</b> and <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy3">^</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&lt;&lt;=</span></span></span>
</td>
<td> bitwise left shift assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">&lt;&lt;=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to <b>a</b> left shifted by <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy1">&lt;&lt;</span> b</span></span>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&gt;&gt;=</span></span></span>
</td>
<td> bitwise right shift assignment
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">&gt;&gt;=</span> b</span></span>
</td>
<td> <b>a</b> becomes equal to <b>a</b> right shifted by <b>b</b>
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> a <span class="sy1">&gt;&gt;</span> b</span></span>
</td></tr></tbody></table>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="operator_assignment.htm#Simple_assignment"><span class="tocnumber">1</span> <span class="toctext">Simple assignment</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="operator_assignment.htm#Notes"><span class="tocnumber">1.1</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="operator_assignment.htm#Compound_assignment"><span class="tocnumber">2</span> <span class="toctext">Compound assignment</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="operator_assignment.htm#References"><span class="tocnumber">3</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="operator_assignment.htm#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="operator_assignment.htm#See_also_2"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit&amp;section=1" title="Edit section: Simple assignment">edit</a>]</span> <span class="mw-headline" id="Simple_assignment">Simple assignment</span></h3>
<p>The simple assignment operator expressions have the form 
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <span class="t-spar">lhs</span> <code><b>=</b></code> <span class="t-spar">rhs</span>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where 
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">lhs</span>
</td>
<td> -
</td>
<td>  <a href="value_category.htm" title="c/language/value category">modifiable lvalue</a> expression of any complete object type
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">rhs</span>
</td>
<td> -
</td>
<td>  expression of any type <a href="conversion.htm" title="c/language/conversion">implicitly convertible</a> to <span class="t-spar">lhs</span> or <a href="compatible_type.htm#Compatible_types" title="c/language/type">compatible</a> with <span class="t-spar">lhs</span>
</td></tr></tbody></table>
<p>Assignment performs <a href="conversion.htm" title="c/language/conversion">implicit conversion</a> from the value of <span class="t-spar">rhs</span> to the type of <span class="t-spar">lhs</span> and then replaces the value in the object designated by <span class="t-spar">lhs</span> with the converted value of <span class="t-spar">rhs</span>.
</p><p>Assignment also returns the same value as what was stored in <code>lhs</code> (so that expressions such as <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> b <span class="sy1">=</span> c</span></span> are possible). The <a href="value_category.htm" title="c/language/value category">value category</a> of the assignment operator is non-lvalue (so that expressions such as <span class="t-c"><span class="mw-geshi c source-c"><span class="br0">(</span>a<span class="sy1">=</span>b<span class="br0">)</span><span class="sy1">=</span>c</span></span> are invalid).
</p><p><span class="t-spar">rhs</span> and <span class="t-spar">lhs</span> must satisfy one of the following:
</p>
<ul><li> both <span class="t-spar">lhs</span> and <span class="t-spar">rhs</span> have <a href="compatible_type.htm#Compatible_types" title="c/language/type">compatible</a> <a href="struct.htm" title="c/language/struct">struct</a> or <a href="union.htm" title="c/language/union">union</a> type, or..
</li><li> <span class="t-spar">rhs</span> must be <a href="conversion.htm" title="c/language/conversion">implicitly convertible</a> to <span class="t-spar">lhs</span>, which implies
</li></ul>
<dl><dd><ul><li> both <span class="t-spar">lhs</span> and <span class="t-spar">rhs</span> have <a href="arithmetic_types.htm" title="c/language/arithmetic types">arithmetic types</a>, in which case <span class="t-spar">lhs</span> may be <a href="volatile.htm" title="c/language/volatile">volatile</a>-qualified<span class="t-rev-inl t-since-c11"><span> or <a href="atomic.htm" title="c/language/atomic">atomic</a></span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>
</li><li> both <span class="t-spar">lhs</span> and <span class="t-spar">rhs</span> have <a href="pointer.htm" title="c/language/pointer">pointer</a> to <a href="compatible_type.htm#Compatible_types" title="c/language/type">compatible</a> (ignoring qualifiers) types, or one of the pointers is a pointer to void, and the <a href="conversion.htm" title="c/language/conversion">conversion</a> would not add qualifiers to the pointed-to type. <span class="t-spar">lhs</span> may be <a href="volatile.htm" title="c/language/volatile">volatile</a><span class="t-rev-inl t-since-c99"><span> or <a href="restrict.htm" title="c/language/restrict">restrict</a></span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span>-qualified<span class="t-rev-inl t-since-c11"><span> or <a href="atomic.htm" title="c/language/atomic">atomic</a></span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>.
</li><li> <span class="t-spar">lhs</span> is a (possibly qualified<span class="t-rev-inl t-since-c11"><span> or atomic</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>) pointer and <span class="t-spar">rhs</span> is a null pointer constant such as <span class="t-lc"><a href="../types/NULL.html" title="c/types/NULL">NULL</a></span> <span class="t-rev-inl t-since-c23"><span>or a <span class="t-lc"><a href="../types/nullptr_t.html" title="c/types/nullptr t">nullptr_t</a></span> value</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>
</li></ul>
</dd></dl>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c99"><td>
<dl><dd><ul><li> <span class="t-spar">lhs</span> has type (possibly qualified<span class="t-rev-inl t-since-c11"><span> or atomic</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>) <span class="t-c"><span class="mw-geshi c source-c">_Bool</span></span> and <span class="t-spar">rhs</span> is a pointer <span class="t-rev-inl t-since-c23"><span>or a <span class="t-lc"><a href="../types/nullptr_t.html" title="c/types/nullptr t">nullptr_t</a></span> value</span><span><span class="t-mark-rev t-since-c23">(since C23)</span></span></span>
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c99">(since C99)</span></td></tr>
</tbody></table>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c23"><td>
<dl><dd><ul><li> <span class="t-spar">lhs</span> has type (possibly qualified or atomic) <span class="t-lc"><a href="../types/nullptr_t.html" title="c/types/nullptr t">nullptr_t</a></span> and <span class="t-spar">rhs</span> has type <span class="t-lc"><a href="../types/nullptr_t.html" title="c/types/nullptr t">nullptr_t</a></span>
</li></ul>
</dd></dl>
</td>
<td><span class="t-mark-rev t-since-c23">(since C23)</span></td></tr>
</tbody></table>
<h4><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit&amp;section=2" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h4>
<p>If <span class="t-spar">rhs</span> and <span class="t-spar">lhs</span> overlap in memory (e.g. they are members of the same union), the behavior is undefined unless the overlap is exact and the types are <a href="compatible_type.htm#Compatible_types" title="c/language/type">compatible</a>.
</p><p>Although arrays are not assignable, an array wrapped in a struct is assignable to another object of the same (or compatible) struct type.
</p><p>The side effect of updating <span class="t-spar">lhs</span> is <a href="eval_order.htm" title="c/language/eval order">sequenced after</a> the value computations, but not the side effects of <span class="t-spar">lhs</span> and <span class="t-spar">rhs</span> themselves and the evaluations of the operands are, as usual, unsequenced relative to each other (so the expressions such as <span class="t-c"><span class="mw-geshi c source-c">i<span class="sy1">=</span><span class="sy2">++</span>i</span></span>; are undefined)
</p><p>Assignment strips extra range and precision from floating-point expressions (see <span class="t-lc"><a href="../types/limits/FLT_EVAL_METHOD.html" title="c/types/limits/FLT EVAL METHOD">FLT_EVAL_METHOD</a></span>).
</p><p>In C++, assignment operators are lvalue expressions, not so in C.
</p>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="co1">// integers</span>
    <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">1</span>, j <span class="sy1">=</span> <span class="nu0">2</span>, k <span class="sy1">=</span> <span class="nu0">3</span><span class="sy4">;</span> <span class="co1">// initialization, not assignment</span>
&nbsp;
    i <span class="sy1">=</span> j <span class="sy1">=</span> k<span class="sy4">;</span>   <span class="co1">// values of i and j are now 3</span>
<span class="co1">//  (i = j) = k; // Error: lvalue required</span>
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"%d&nbsp;%d&nbsp;%d<span class="es1">\n</span>"</span>, i, j, k<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// pointers</span>
    <span class="kw4">const</span> <span class="kw4">char</span> c <span class="sy1">=</span> <span class="st0">'A'</span><span class="sy4">;</span> <span class="co1">// initialization; not assignment</span>
    <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span>p <span class="sy1">=</span> <span class="sy3">&amp;</span>c<span class="sy4">;</span>  <span class="co1">// initialization; not assignment</span>
    <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">**</span>cpp <span class="sy1">=</span> <span class="sy3">&amp;</span>p<span class="sy4">;</span> <span class="co1">// initialization; not assignment</span>
&nbsp;
<span class="co1">//  cpp = &amp;p;   // Error: char** is not convertible to const char**</span>
    <span class="sy2">*</span>cpp <span class="sy1">=</span> <span class="sy3">&amp;</span>c<span class="sy4">;</span>  <span class="co1">// OK, char* is convertible to const char*</span>
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"%c <span class="es1">\n</span>"</span>, <span class="sy2">**</span>cpp<span class="br0">)</span><span class="sy4">;</span>
    cpp <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>    <span class="co1">// OK, null pointer constant is convertible to any pointer</span>
&nbsp;
    <span class="co1">// arrays</span>
    <span class="kw4">int</span> arr1<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">}</span>, arr2<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span><span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">}</span><span class="sy4">;</span>
<span class="co1">//  arr1 = arr2; // Error: cannot assign to an array</span>
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"arr1[0]=%d arr1[1]=%d arr2[0]=%d arr2[1]=%d<span class="es1">\n</span>"</span>,
            arr1<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>,   arr1<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>,   arr2<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>,   arr2<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="kw1">struct</span> <span class="br0">{</span> <span class="kw4">int</span> arr<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy4">;</span> <span class="br0">}</span> sam1 <span class="sy1">=</span> <span class="br0">{</span> <span class="br0">{</span><span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">}</span> <span class="br0">}</span>, sam2 <span class="sy1">=</span> <span class="br0">{</span> <span class="br0">{</span><span class="nu0">7</span>, <span class="nu0">8</span><span class="br0">}</span> <span class="br0">}</span><span class="sy4">;</span>
    sam1 <span class="sy1">=</span> sam2<span class="sy4">;</span> <span class="co1">// OK: can assign arrays wrapped in structs</span>
&nbsp;
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"%d&nbsp;%d <span class="es1">\n</span>"</span>, sam1.<span class="me1">arr</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>, sam1.<span class="me1">arr</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">3 3 3
A
arr1[0]=1 arr1[1]=2 arr2[0]=3 arr2[1]=4
7 8</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit&amp;section=3" title="Edit section: Compound assignment">edit</a>]</span> <span class="mw-headline" id="Compound_assignment">Compound assignment</span></h3>
<p>The compound assignment operator expressions have the form 
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <span class="t-spar">lhs</span> <span class="t-spar">op</span> <span class="t-spar">rhs</span>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td>  <span class="t-spar">op</span>
</td>
<td> -
</td>
<td>  one of <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">*</span><span class="sy1">=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">/</span><span class="sy1">=</span></span></span> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">%</span><span class="sy1">=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">+</span><span class="sy1">=</span></span></span> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span><span class="sy1">=</span></span></span>,  <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&lt;&lt;=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy1">&gt;&gt;=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">&amp;</span><span class="sy1">=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">^</span><span class="sy1">=</span></span></span>, <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">|</span><span class="sy1">=</span></span></span>
</td></tr>
<tr class="t-par">
<td>  <span class="t-spar">lhs</span>, <span class="t-spar">rhs</span>
</td>
<td> -
</td>
<td>  expressions with <a href="arithmetic_types.htm" title="c/language/arithmetic types">arithmetic types</a> (where <span class="t-spar">lhs</span> may be qualified or atomic), except when <span class="t-spar">op</span> is <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">+</span><span class="sy1">=</span></span></span> or <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">-</span><span class="sy1">=</span></span></span>, which also accept pointer types with the same restrictions as + and -
</td></tr></tbody></table>
<p>The expression <span class="t-spar">lhs</span> <span class="t-spar">@=</span> <span class="t-spar">rhs</span> is exactly the same as <span class="t-spar">lhs</span> <code><b>=</b></code> <span class="t-spar">lhs</span> <span class="t-spar">@</span> <code><b>(</b></code> <span class="t-spar">rhs</span> <code><b>)</b></code>, except that <span class="t-spar">lhs</span> is evaluated only once.
</p>
<table class="t-rev-begin">
<tbody><tr class="t-rev t-since-c11"><td>
<p>If <span class="t-spar">lhs</span> has <a href="atomic.htm" title="c/language/atomic">atomic</a> type, the operation behaves as a single atomic read-modify-write operation with memory order <span class="t-lc"><a href="../atomic/memory_order.html" title="c/atomic/memory order">memory_order_seq_cst</a></span>.
</p><p>For integer atomic types, the compound assignment <span class="t-c"><span class="mw-geshi c source-c">@<span class="sy1">=</span></span></span> is equivalent to:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">T1<span class="sy2">*</span> addr <span class="sy1">=</span> <span class="sy3">&amp;</span>lhs<span class="sy4">;</span>
T2 val <span class="sy1">=</span> rhs<span class="sy4">;</span>
T1 old <span class="sy1">=</span> <span class="sy2">*</span>addr<span class="sy4">;</span>
T1 new<span class="sy4">;</span>
<span class="kw1">do</span> <span class="br0">{</span> new <span class="sy1">=</span> old @ val <span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span><span class="sy3">!</span><a href="../atomic/atomic_compare_exchange.html"><span class="kw945">atomic_compare_exchange_strong</span></a><span class="br0">(</span>addr, <span class="sy3">&amp;</span>old, new<span class="br0">)</span><span class="sy4">;</span></pre></div></div>
</td>
<td><span class="t-mark-rev t-since-c11">(since C11)</span></td></tr>
</tbody></table>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> x <span class="sy1">=</span> <span class="nu0">10</span><span class="sy4">;</span> 
    <span class="kw4">int</span> hundred <span class="sy1">=</span> <span class="nu0">100</span><span class="sy4">;</span> 
    <span class="kw4">int</span> ten <span class="sy1">=</span> <span class="nu0">10</span><span class="sy4">;</span> 
    <span class="kw4">int</span> fifty <span class="sy1">=</span> <span class="nu0">50</span><span class="sy4">;</span> 
&nbsp;
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"%d&nbsp;%d&nbsp;%d&nbsp;%d<span class="es1">\n</span>"</span>, x, hundred, ten, fifty<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    hundred <span class="sy2">*</span><span class="sy1">=</span> x<span class="sy4">;</span> 
    ten     <span class="sy2">/</span><span class="sy1">=</span> x<span class="sy4">;</span> 
    fifty   <span class="sy2">%</span><span class="sy1">=</span> x<span class="sy4">;</span> 
&nbsp;
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"%d&nbsp;%d&nbsp;%d&nbsp;%d<span class="es1">\n</span>"</span>, x, hundred, ten, fifty<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">10 100 10 50
10 1000 1 0</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit&amp;section=4" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 6.5.16 Assignment operators (p: 72-73)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.5.16 Assignment operators (p: 101-104)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.5.16 Assignment operators (p: 91-93)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.3.16 Assignment operators 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit&amp;section=5" title="Edit section: See Also">edit</a>]</span> <span class="mw-headline" id="See_Also">See Also</span></h3>
<p><a href="operator_precedence.htm" title="c/language/operator precedence"> Operator precedence</a>
</p>
<table class="wikitable">

<tbody><tr style="text-align:center">
<th colspan="7">Common operators
</th></tr>
<tr style="text-align:center">
<td><strong class="selflink">assignment</strong>
</td>
<td><a href="operator_incdec.htm" title="c/language/operator incdec">increment<br>decrement</a>
</td>
<td><a href="operator_arithmetic.htm" title="c/language/operator arithmetic">arithmetic</a>
</td>
<td><a href="operator_logical.htm" title="c/language/operator logical">logical</a>
</td>
<td><a href="operator_comparison.htm" title="c/language/operator comparison">comparison</a>
</td>
<td><a href="operator_member_access.htm" title="c/language/operator member access">member<br>access</a>
</td>
<td><a href="operator_other.htm" title="c/language/operator other">other</a>
</td></tr>
<tr style="text-align:center">
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> b<br>
a <span class="sy2">+</span><span class="sy1">=</span> b<br>
a <span class="sy2">-</span><span class="sy1">=</span> b<br>
a <span class="sy2">*</span><span class="sy1">=</span> b<br>
a <span class="sy2">/</span><span class="sy1">=</span> b<br>
a <span class="sy2">%</span><span class="sy1">=</span> b<br>
a <span class="sy3">&amp;</span><span class="sy1">=</span> b<br>
a <span class="sy3">|</span><span class="sy1">=</span> b<br>
a <span class="sy3">^</span><span class="sy1">=</span> b<br>
a <span class="sy1">&lt;&lt;=</span> b<br>
a <span class="sy1">&gt;&gt;=</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">++</span>a<br>
<span class="sy2">--</span>a<br>
a<span class="sy2">++</span><br>
a<span class="sy2">--</span></span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">+</span>a<br>
<span class="sy2">-</span>a<br>
a <span class="sy2">+</span> b<br>
a <span class="sy2">-</span> b<br>
a <span class="sy2">*</span> b<br>
a <span class="sy2">/</span> b<br>
a <span class="sy2">%</span> b<br>
~a<br>
a <span class="sy3">&amp;</span> b<br>
a <span class="sy3">|</span> b<br>
a <span class="sy3">^</span> b<br>
a <span class="sy1">&lt;&lt;</span> b<br>
a <span class="sy1">&gt;&gt;</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">!</span>a<br>
a <span class="sy3">&amp;&amp;</span> b<br>
a <span class="sy3">||</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">==</span> b<br>
a <span class="sy3">!</span><span class="sy1">=</span> b<br>
a <span class="sy1">&lt;</span> b<br>
a <span class="sy1">&gt;</span> b<br>
a <span class="sy1">&lt;=</span> b<br>
a <span class="sy1">&gt;=</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a<span class="br0">[</span>b<span class="br0">]</span><br>
<span class="sy2">*</span>a<br>
<span class="sy3">&amp;</span>a<br>
a<span class="sy2">-</span><span class="sy1">&gt;</span>b<br>
a.<span class="me1">b</span></span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a<span class="br0">(</span>...<span class="br0">)</span><br>
a, b<br>
<span class="br0">(</span>type<span class="br0">)</span> a<br>
a <span class="sy4">?</span> b <span class="sy4">:</span> c<br>
<span class="kw4">sizeof</span></span></span><br><br>
<span class="mw-geshi c source-c">_Alignof</span><br><span class="t-mark-rev t-since-c11">(since C11)</span><br><span class="t-mark-rev t-until-c23">(until C23)</span><br><br>
<span class="mw-geshi c source-c">alignof</span><br><span class="t-mark-rev t-since-c23">(since C23)</span>
</p>
</td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also_2">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/operator_assignment.html" title="cpp/language/operator assignment">C++ documentation</a></span> for <span class=""><span>Assignment operators</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 4457/1000000
Preprocessor generated node count: 9842/1000000
Post‐expand include size: 71760/4194304 bytes
Template argument size: 16553/4194304 bytes
Highest expansion depth: 19/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:9562-0!*!0!!en!*!* and timestamp 20250418080637 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;oldid=142209">https://en.cppreference.com/mwiki/index.php?title=c/language/operator_assignment&amp;oldid=142209</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 1.748 secs. -->
	


</body><!-- Cached 20250418080637 --></html>