<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>Logical operators</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_language_operator_logical skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">Logical operators</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<p>Logical operators apply standard boolean algebra operations to their operands.
</p>
<table class="wikitable" style="font-size:85%;">

<tbody><tr style="text-align:center">
<th> Operator
</th>
<th> Operator name
</th>
<th> Example
</th>
<th> Result
</th></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">!</span></span></span>
</td>
<td> logical NOT
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">!</span>a</span></span>
</td>
<td> the logical negation of <b>a</b>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">&amp;&amp;</span></span></span>
</td>
<td> logical AND
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy3">&amp;&amp;</span> b</span></span>
</td>
<td> the logical AND of <b>a</b> and <b>b</b>
</td></tr>
<tr style="text-align:center">
<td> <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">||</span></span></span>
</td>
<td> logical OR
</td>
<td> <span class="t-c"><span class="mw-geshi c source-c">a <span class="sy3">||</span> b</span></span>
</td>
<td> the logical OR of <b>a</b> and <b>b</b>
</td></tr></tbody></table>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="operator_logical.htm#Logical_NOT"><span class="tocnumber">1</span> <span class="toctext">Logical NOT</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="operator_logical.htm#Logical_AND"><span class="tocnumber">2</span> <span class="toctext">Logical AND</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="operator_logical.htm#Logical_OR"><span class="tocnumber">3</span> <span class="toctext">Logical OR</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="operator_logical.htm#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="operator_logical.htm#See_Also"><span class="tocnumber">5</span> <span class="toctext">See Also</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="operator_logical.htm#See_also_2"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit&amp;section=1" title="Edit section: Logical NOT">edit</a>]</span> <span class="mw-headline" id="Logical_NOT">Logical NOT</span></h3>
<p>The logical NOT expression has the form 
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <code><b>!</b></code> <span class="t-spar">expression</span>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where 
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">expression</span>
</td>
<td> -
</td>
<td>  an expression of any <a href="compatible_type.htm#Type_groups" title="c/language/type">scalar type</a>
</td></tr></tbody></table>
<p>The logical NOT operator has type <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">int</span></span></span>. Its value is <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> if <span class="t-spar">expression</span> evaluates to a value that compares unequal to zero. Its value is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> if <span class="t-spar">expression</span> evaluates to a value that compares equal to zero. (so <span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">!</span>E</span></span> is the same as <span class="t-c"><span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">0</span><span class="sy1">==</span>E<span class="br0">)</span></span></span>)
</p>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdbool.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;ctype.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    bool b <span class="sy1">=</span> <span class="sy3">!</span><span class="br0">(</span><span class="nu0">2</span><span class="sy2">+</span><span class="nu0">2</span> <span class="sy1">==</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// not true</span>
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"!(2+2==4) =&nbsp;%s<span class="es1">\n</span>"</span>, b <span class="sy4">?</span> <span class="st0">"true"</span> <span class="sy4">:</span> <span class="st0">"false"</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="kw4">int</span> n <span class="sy1">=</span> <a href="../string/byte/isspace.html"><span class="kw534">isspace</span></a><span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// non-zero if 'a' is a space, zero otherwise</span>
    <span class="kw4">int</span> x <span class="sy1">=</span> <span class="sy3">!!</span>n<span class="sy4">;</span> <span class="co1">// "bang-bang", common C idiom for mapping integers to [0,1]</span>
                 <span class="co1">// (all non-zero values become 1)</span>
    <span class="kw4">char</span> <span class="sy2">*</span>a<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span><span class="st0">"non-space"</span>, <span class="st0">"space"</span><span class="br0">}</span><span class="sy4">;</span>
    <a href="../io/puts.html"><span class="kw836">puts</span></a><span class="br0">(</span>a<span class="br0">[</span>x<span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// now x can be safely used as an index to array of 2 strings</span>
<span class="br0">}</span></pre></div></div>
<p>Output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">!(2+2==4) = false
non-space</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit&amp;section=2" title="Edit section: Logical AND">edit</a>]</span> <span class="mw-headline" id="Logical_AND">Logical AND</span></h3>
<p>The logical AND expression has the form 
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <span class="t-spar">lhs</span> <code><b>&amp;&amp;</b></code> <span class="t-spar">rhs</span>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where 
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">lhs</span>
</td>
<td> -
</td>
<td>  an expression of any scalar type
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">rhs</span>
</td>
<td> -
</td>
<td>  an expression of any scalar type, which is only evaluated if <span class="t-spar">lhs</span> does not compare equal to <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>
</td></tr></tbody></table>
<p>The logical-AND operator has type <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">int</span></span></span> and the value <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> if both <span class="t-spar">lhs</span> and <span class="t-spar">rhs</span> compare unequal to zero. It has the value <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> otherwise (if either <span class="t-spar">lhs</span> or <span class="t-spar">rhs</span> or both compare equal to zero).
</p><p>There is a <a href="eval_order.htm" title="c/language/eval order">sequence point</a> after the evaluation of <span class="t-spar">lhs</span>. If the result of <span class="t-spar">lhs</span> compares equal to zero, then <span class="t-spar">rhs</span> is not evaluated at all (so-called <i>short-circuit evaluation</i>)
</p>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdbool.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    bool b <span class="sy1">=</span> <span class="nu0">2</span><span class="sy2">+</span><span class="nu0">2</span><span class="sy1">==</span><span class="nu0">4</span> <span class="sy3">&amp;&amp;</span> <span class="nu0">2</span><span class="sy2">*</span><span class="nu0">2</span><span class="sy1">==</span><span class="nu0">4</span><span class="sy4">;</span> <span class="co1">// b == true</span>
&nbsp;
    <span class="nu0">1</span> <span class="sy1">&gt;</span> <span class="nu0">2</span> <span class="sy3">&amp;&amp;</span> <a href="../io/puts.html"><span class="kw836">puts</span></a><span class="br0">(</span><span class="st0">"this won't print"</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="kw4">char</span> <span class="sy2">*</span>p <span class="sy1">=</span> <span class="st0">"abc"</span><span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span>p <span class="sy3">&amp;&amp;</span> <span class="sy2">*</span>p<span class="br0">)</span> <span class="co1">// common C idiom: if p is not null</span>
                <span class="co1">// AND if p does not point at the end of the string</span>
    <span class="br0">{</span>           <span class="co1">// (note that thanks to short-circuit evaluation, this</span>
                <span class="co1">//  will not attempt to dereference a null pointer)</span>
    <span class="co1">// ...      // ... then do some string processing</span>
    <span class="br0">}</span>
<span class="br0">}</span></pre></div></div>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit&amp;section=3" title="Edit section: Logical OR">edit</a>]</span> <span class="mw-headline" id="Logical_OR">Logical OR</span></h3>
<p>The logical OR expression has the form 
</p>
<table class="t-sdsc-begin">

<tbody><tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td class="t-sdsc-nopad"> <span class="t-spar">lhs</span> <code><b>||</b></code> <span class="t-spar">rhs</span>
</td>
<td class="t-sdsc-nopad">
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></tbody></table>
<p>where 
</p>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> <span class="t-spar">lhs</span>
</td>
<td> -
</td>
<td>  an expression of any scalar type
</td></tr>
<tr class="t-par">
<td> <span class="t-spar">rhs</span>
</td>
<td> -
</td>
<td>  an expression of any scalar type, which is only evaluated if <span class="t-spar">lhs</span> compares equal to <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>
</td></tr></tbody></table>
<p>The logical-OR operator has type <span class="t-c"><span class="mw-geshi c source-c"><span class="kw4">int</span></span></span> and the value <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> if either <span class="t-spar">lhs</span> or <span class="t-spar">rhs</span> compare unequal to zero. It has value <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> otherwise (if both <span class="t-spar">lhs</span> and <span class="t-spar">rhs</span> compare equal to zero).
</p><p>There is a <a href="eval_order.htm" title="c/language/eval order">sequence point</a> after the evaluation of <span class="t-spar">lhs</span>. If the result of <span class="t-spar">lhs</span> compares unequal to zero, then <span class="t-spar">rhs</span> is not evaluated at all (so-called <i>short-circuit evaluation</i>)
</p>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdbool.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
<span class="co2">#include &lt;errno.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    bool b <span class="sy1">=</span> <span class="nu0">2</span><span class="sy2">+</span><span class="nu0">2</span> <span class="sy1">==</span> <span class="nu0">4</span> <span class="sy3">||</span> <span class="nu0">2</span><span class="sy2">+</span><span class="nu0">2</span> <span class="sy1">==</span> <span class="nu0">5</span><span class="sy4">;</span> <span class="co1">// true</span>
    <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"true or false =&nbsp;%s<span class="es1">\n</span>"</span>, b <span class="sy4">?</span> <span class="st0">"true"</span> <span class="sy4">:</span> <span class="st0">"false"</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// logical OR can be used simialar to perl's "or die", as long as rhs has scalar type</span>
    <a href="../io/fopen.html"><span class="kw819">fopen</span></a><span class="br0">(</span><span class="st0">"test.txt"</span>, <span class="st0">"r"</span><span class="br0">)</span> <span class="sy3">||</span> <a href="../io/fprintf.html"><span class="kw851">printf</span></a><span class="br0">(</span><span class="st0">"could not open test.txt:&nbsp;%s<span class="es1">\n</span>"</span>, <a href="../string/byte/strerror.html"><span class="kw574">strerror</span></a><span class="br0">(</span><span class="kw2">errno</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">true or false = true
could not open test.txt: No such file or directory</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit&amp;section=4" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 6.5.3.3 Unary arithmetic operators (p: 89)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.5.13 Logical AND operator (p: 99)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.5.14 Logical OR operator (p: 99)
</li></ul>
</dd></dl>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 6.5.3.3 Unary arithmetic operators (p: 79)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.5.13 Logical AND operator (p: 89)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 6.5.14 Logical OR operator (p: 89)
</li></ul>
</dd></dl>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 3.3.3.3 Unary arithmetic operators 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.3.13 Logical AND operator 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 3.3.14 Logical OR operator 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit&amp;section=5" title="Edit section: See Also">edit</a>]</span> <span class="mw-headline" id="See_Also">See Also</span></h3>
<p><a href="operator_precedence.htm" title="c/language/operator precedence"> Operator precedence</a>
</p>
<table class="wikitable">

<tbody><tr style="text-align:center">
<th colspan="7">Common operators
</th></tr>
<tr style="text-align:center">
<td><a href="operator_assignment.htm" title="c/language/operator assignment">assignment</a>
</td>
<td><a href="operator_incdec.htm" title="c/language/operator incdec">increment<br>decrement</a>
</td>
<td><a href="operator_arithmetic.htm" title="c/language/operator arithmetic">arithmetic</a>
</td>
<td><strong class="selflink">logical</strong>
</td>
<td><a href="operator_comparison.htm" title="c/language/operator comparison">comparison</a>
</td>
<td><a href="operator_member_access.htm" title="c/language/operator member access">member<br>access</a>
</td>
<td><a href="operator_other.htm" title="c/language/operator other">other</a>
</td></tr>
<tr style="text-align:center">
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">=</span> b<br>
a <span class="sy2">+</span><span class="sy1">=</span> b<br>
a <span class="sy2">-</span><span class="sy1">=</span> b<br>
a <span class="sy2">*</span><span class="sy1">=</span> b<br>
a <span class="sy2">/</span><span class="sy1">=</span> b<br>
a <span class="sy2">%</span><span class="sy1">=</span> b<br>
a <span class="sy3">&amp;</span><span class="sy1">=</span> b<br>
a <span class="sy3">|</span><span class="sy1">=</span> b<br>
a <span class="sy3">^</span><span class="sy1">=</span> b<br>
a <span class="sy1">&lt;&lt;=</span> b<br>
a <span class="sy1">&gt;&gt;=</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">++</span>a<br>
<span class="sy2">--</span>a<br>
a<span class="sy2">++</span><br>
a<span class="sy2">--</span></span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">+</span>a<br>
<span class="sy2">-</span>a<br>
a <span class="sy2">+</span> b<br>
a <span class="sy2">-</span> b<br>
a <span class="sy2">*</span> b<br>
a <span class="sy2">/</span> b<br>
a <span class="sy2">%</span> b<br>
~a<br>
a <span class="sy3">&amp;</span> b<br>
a <span class="sy3">|</span> b<br>
a <span class="sy3">^</span> b<br>
a <span class="sy1">&lt;&lt;</span> b<br>
a <span class="sy1">&gt;&gt;</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c"><span class="sy3">!</span>a<br>
a <span class="sy3">&amp;&amp;</span> b<br>
a <span class="sy3">||</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a <span class="sy1">==</span> b<br>
a <span class="sy3">!</span><span class="sy1">=</span> b<br>
a <span class="sy1">&lt;</span> b<br>
a <span class="sy1">&gt;</span> b<br>
a <span class="sy1">&lt;=</span> b<br>
a <span class="sy1">&gt;=</span> b</span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a<span class="br0">[</span>b<span class="br0">]</span><br>
<span class="sy2">*</span>a<br>
<span class="sy3">&amp;</span>a<br>
a<span class="sy2">-</span><span class="sy1">&gt;</span>b<br>
a.<span class="me1">b</span></span></span>
</p>
</td>
<td>
<p><span class="t-c"><span class="mw-geshi c source-c">a<span class="br0">(</span>...<span class="br0">)</span><br>
a, b<br>
<span class="br0">(</span>type<span class="br0">)</span> a<br>
a <span class="sy4">?</span> b <span class="sy4">:</span> c<br>
<span class="kw4">sizeof</span></span></span><br><br>
<span class="mw-geshi c source-c">_Alignof</span><br><span class="t-mark-rev t-since-c11">(since C11)</span><br><span class="t-mark-rev t-until-c23">(until C23)</span><br><br>
<span class="mw-geshi c source-c">alignof</span><br><span class="t-mark-rev t-since-c23">(since C23)</span>
</p>
</td></tr>
</tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also_2">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/language/operator_logical.html" title="cpp/language/operator logical">C++ documentation</a></span> for <span class=""><span>Logical operators</span></span></div>
</td></tr>

</tbody></table></div>
</div>

<!-- 
NewPP limit report
Preprocessor visited node count: 2741/1000000
Preprocessor generated node count: 7291/1000000
Post‐expand include size: 57743/4194304 bytes
Template argument size: 12195/4194304 bytes
Highest expansion depth: 19/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:9565-0!*!0!!en!*!* and timestamp 20250318014213 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;oldid=171168">https://en.cppreference.com/mwiki/index.php?title=c/language/operator_logical&amp;oldid=171168</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 0.851 secs. -->
	


</body><!-- Cached 20250318014213 --></html>