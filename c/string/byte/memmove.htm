<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>memmove, memmove_s</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit">
<link rel="shortcut icon" href="../../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--><style>.t-lines > span { display: table-row; }</style></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_string_byte_memmove skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">memmove, memmove_s</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<table class="t-dcl-begin"><tbody>
<tr class="t-dsc-header">
<td> <div>Defined in header <code><a href="../../header/string.htm" title="c/header/string"><tt>&lt;string.h&gt;</tt></a></code>
 </div></td>
<td></td>
<td></td>
</tr>
<tr class="t-dcl">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">void</span><span class="sy2">*</span> memmove<span class="br0">(</span> <span class="kw4">void</span><span class="sy2">*</span> dest, <span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> src, <a href="../../types/size_t.htm"><span class="kw100">size_t</span></a> count <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (1) </td>
<td class="t-dcl-nopad">  </td>
</tr>
<tr class="t-dcl t-since-c11">
<td> <div><span class="mw-geshi c source-c">errno_t memmove_s<span class="br0">(</span><span class="kw4">void</span><span class="sy2">*</span> dest, rsize_t destsz, <span class="kw4">const</span> <span class="kw4">void</span><span class="sy2">*</span> src, rsize_t count<span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (2) </td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span> </td>
</tr>
<tr class="t-dcl-sep"><td></td><td></td><td></td></tr>
</tbody></table>
<div class="t-li1"><span class="t-li">1)</span> Copies <span class="t-c"><span class="mw-geshi c source-c">count</span></span> characters from the object pointed to by <span class="t-c"><span class="mw-geshi c source-c">src</span></span> to the object pointed to by <span class="t-c"><span class="mw-geshi c source-c">dest</span></span>. Both objects are interpreted as arrays of <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">char</span></span>. The objects may overlap: copying takes place as if the characters were copied to a temporary character array and then the characters were copied from the array to <span class="t-c"><span class="mw-geshi c source-c">dest</span></span>.</div>
<div class="t-li1"><span class="t-li"></span> The behavior is undefined if access occurs beyond the end of the dest array. The behavior is undefined if either <span class="t-c"><span class="mw-geshi c source-c">dest</span></span> or <span class="t-c"><span class="mw-geshi c source-c">src</span></span> is an invalid or null pointer.</div>
<div class="t-li1"><span class="t-li">2)</span> Same as <span class="t-v">(1)</span>, except when detecting the following errors at runtime, it zeroes out the entire destination range <span class="t-c"><span class="mw-geshi c source-c"><span class="br0">[</span>dest, dest <span class="sy2">+</span> destsz<span class="br0">)</span></span></span> (if both <span class="t-c"><span class="mw-geshi c source-c">dest</span></span> and <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span> are valid) and calls the currently installed <a href="../../error/set_constraint_handler_s.htm" title="c/error/set constraint handler s">constraint handler</a> function:
<dl><dd><ul><li> <span class="t-c"><span class="mw-geshi c source-c">dest</span></span> or <span class="t-c"><span class="mw-geshi c source-c">src</span></span> is a null pointer
</li><li> <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span> or <span class="t-c"><span class="mw-geshi c source-c">count</span></span> is greater than <span class="t-lc">RSIZE_MAX</span>
</li><li> <span class="t-c"><span class="mw-geshi c source-c">count</span></span> is greater than <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span> (buffer overflow would occur)</li></ul></dd></dl></div>


<div class="t-li1"><span class="t-li"></span> The behavior is undefined if the size of the character array pointed to by <span class="t-c"><span class="mw-geshi c source-c">dest</span></span> &lt; <span class="t-c"><span class="mw-geshi c source-c">count</span></span> &lt;= <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span>; in other words, an erroneous value of <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span> does not expose the impending buffer overflow.
<dl><dd>As with all bounds-checked functions, <code>memmove_s</code> is only guaranteed to be available if <span class="t-c"><span class="mw-geshi c source-c">__STDC_LIB_EXT1__</span></span> is defined by the implementation and if the user defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_WANT_LIB_EXT1__</span></span> to the integer constant <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> before including <a href="../../header/string.htm" title="c/header/string"><tt>&lt;string.h&gt;</tt></a>.</dd></dl></div>

<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./memmove.htm#Parameters"><span class="tocnumber">1</span> <span class="toctext">Parameters</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./memmove.htm#Return_value"><span class="tocnumber">2</span> <span class="toctext">Return value</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./memmove.htm#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./memmove.htm#Example"><span class="tocnumber">4</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./memmove.htm#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./memmove.htm#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit&amp;section=1" title="Edit section: Parameters">edit</a>]</span> <span class="mw-headline" id="Parameters">Parameters</span></h3>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> dest
</td>
<td> -
</td>
<td> pointer to the object to copy to
</td></tr>
<tr class="t-par">
<td> destsz
</td>
<td> -
</td>
<td> max number of bytes to modify in the destination (typically the size of the destination object)
</td></tr>
<tr class="t-par">
<td> src
</td>
<td> -
</td>
<td> pointer to the object to copy from
</td></tr>
<tr class="t-par">
<td> count
</td>
<td> -
</td>
<td> number of bytes to copy
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit&amp;section=2" title="Edit section: Return value">edit</a>]</span> <span class="mw-headline" id="Return_value">Return value</span></h3>
<div class="t-li1"><span class="t-li">1)</span> Returns a copy of <span class="t-c"><span class="mw-geshi c source-c">dest</span></span></div>
<div class="t-li1"><span class="t-li">2)</span> Returns zero on success and non-zero value on error. Also on error, if <span class="t-c"><span class="mw-geshi c source-c">dest</span></span> is not a null pointer and <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span> is valid, writes <span class="t-c"><span class="mw-geshi c source-c">destsz</span></span> zero bytes in to the destination array.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p><code>memmove</code> may be used to set the <a href="../../language/object.htm#Effective_type" title="c/language/object">effective type</a> of an object obtained by an allocation function.
</p><p>Despite being specified "as if" a temporary buffer is used, actual implementations of this function do not incur the overhead or double copying or extra memory. A common approach (glibc and bsd libc) is to copy bytes forwards from the beginning of the buffer if the destination starts before the source, and backwards from the end otherwise, with a fall back to the more efficient <span class="t-lc"><a href="./memcpy.htm" title="c/string/byte/memcpy">memcpy</a></span> when there is no overlap at all.
</p><p>Where <a href="../../language/object.htm#Strict_aliasing" title="c/language/object">strict aliasing</a> prohibits examining the same memory as values of two different types, <code>memmove</code> may be used to convert the values.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit&amp;section=4" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define __STDC_WANT_LIB_EXT1__ 1</span>
<span class="co2">#include &lt;inttypes.h&gt;</span>
<span class="co2">#include &lt;stdint.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">char</span> str<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"1234567890"</span><span class="sy4">;</span>
    <a href="../../io/puts.htm"><span class="kw835">puts</span></a><span class="br0">(</span>str<span class="br0">)</span><span class="sy4">;</span>
    memmove<span class="br0">(</span>str <span class="sy2">+</span> <span class="nu0">4</span>, str <span class="sy2">+</span> <span class="nu0">3</span>, <span class="nu0">3</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// copy from [4,5,6] to [5,6,7]</span>
    <a href="../../io/puts.htm"><span class="kw835">puts</span></a><span class="br0">(</span>str<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// setting effective type of allocated memory to be int</span>
    <span class="kw4">int</span><span class="sy2">*</span> p <span class="sy1">=</span> <a href="../../memory/malloc.htm"><span class="kw403">malloc</span></a><span class="br0">(</span><span class="nu0">3</span> <span class="sy2">*</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// allocated memory has no effective type</span>
    <span class="kw4">int</span> arr<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">}</span><span class="sy4">;</span>
    memmove<span class="br0">(</span>p, arr, <span class="nu0">3</span> <span class="sy2">*</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// allocated memory now has an effective type</span>
&nbsp;
    <span class="co1">// reinterpreting data</span>
    <span class="kw4">double</span> d <span class="sy1">=</span> <span class="nu16">0.1</span><span class="sy4">;</span>
    <span class="co1">// int64_t n = *(int64_t*)(&amp;d); // strict aliasing violation</span>
    <a href="../../types/integer.htm"><span class="kw109">int64_t</span></a> n<span class="sy4">;</span>
    memmove<span class="br0">(</span><span class="sy3">&amp;</span>n, <span class="sy3">&amp;</span>d, <span class="kw4">sizeof</span> d<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// OK</span>
    <a href="../../io/fprintf.htm"><span class="kw850">printf</span></a><span class="br0">(</span><span class="st0">"%a is&nbsp;%"</span> <a href="../../types/integer.htm"><span class="kw235">PRIx64</span></a> <span class="st0">" as an int64_t<span class="es1">\n</span>"</span>, d, n<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
<span class="co2">#ifdef __STDC_LIB_EXT1__</span>
    set_constraint_handler_s<span class="br0">(</span>ignore_handler_s<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">char</span> src<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"aaaaaaaaaa"</span><span class="sy4">;</span>
    <span class="kw4">char</span> dst<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"xyxyxyxyxy"</span><span class="sy4">;</span>
    <span class="kw4">int</span> r <span class="sy1">=</span> memmove_s<span class="br0">(</span>dst, <span class="kw4">sizeof</span> dst, src, <span class="nu0">5</span><span class="br0">)</span><span class="sy4">;</span>
    <a href="../../io/fprintf.htm"><span class="kw850">printf</span></a><span class="br0">(</span><span class="st0">"dst = <span class="es1">\"</span>%s<span class="es1">\"</span>, r =&nbsp;%d<span class="es1">\n</span>"</span>, dst, r<span class="br0">)</span><span class="sy4">;</span>
    r <span class="sy1">=</span> memmove_s<span class="br0">(</span>dst, <span class="nu0">5</span>, src, <span class="nu0">10</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// count is greater than destsz</span>
    <a href="../../io/fprintf.htm"><span class="kw850">printf</span></a><span class="br0">(</span><span class="st0">"dst = <span class="es1">\"</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">for</span> <span class="br0">(</span><a href="../../types/size_t.htm"><span class="kw100">size_t</span></a> ndx <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> ndx <span class="sy1">&lt;</span> <span class="kw4">sizeof</span> dst<span class="sy4">;</span> <span class="sy2">++</span>ndx<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw4">char</span> c <span class="sy1">=</span> dst<span class="br0">[</span>ndx<span class="br0">]</span><span class="sy4">;</span>
        c <span class="sy4">?</span> <a href="../../io/fprintf.htm"><span class="kw850">printf</span></a><span class="br0">(</span><span class="st0">"%c"</span>, c<span class="br0">)</span> <span class="sy4">:</span> <a href="../../io/fprintf.htm"><span class="kw850">printf</span></a><span class="br0">(</span><span class="st0">"<span class="es1">\\</span>0"</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="br0">}</span>
    <a href="../../io/fprintf.htm"><span class="kw850">printf</span></a><span class="br0">(</span><span class="st0">"<span class="es1">\"</span>, r =&nbsp;%d<span class="es1">\n</span>"</span>, r<span class="br0">)</span><span class="sy4">;</span>
<span class="co2">#endif</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">1234567890
1234456890
0x1.999999999999ap-4 is 3fb999999999999a as an int64_t
dst = "aaaaayxyxy", r = 0
dst = "\0\0\0\0\0yxyxy", r = 22</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit&amp;section=5" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 7.24.2.2 The memmove function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.7.1.2 The memmove_s function (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 7.24.2.2 The memmove function (p: 264)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.7.1.2 The memmove_s function (p: 446)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 7.24.2.2 The memmove function (p: 363)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.7.1.2 The memmove_s function (p: 615)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 7.21.2.2 The memmove function (p: 326)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 4.11.2.2 The memmove function 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="./memcpy.htm" title="c/string/byte/memcpy"> <span class="t-lines"><span>memcpy</span><span>memcpy_s</span></span></a></div><div><span class="t-lines"><span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   copies one buffer to another <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/string/byte/dsc_memcpy&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="../wide/wmemmove.htm" title="c/string/wide/wmemmove"> <span class="t-lines"><span>wmemmove</span><span>wmemmove_s</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c95">(C95)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   copies a certain amount of wide characters between two, possibly overlapping, arrays <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/string/wide/dsc_wmemmove&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/string/byte/memmove.html" title="cpp/string/byte/memmove">C++ documentation</a></span> for <span class="t-dsc-see-tt"><span>memmove</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 5568/1000000
Preprocessor generated node count: 10330/1000000
Post‐expand include size: 134546/4194304 bytes
Template argument size: 25922/4194304 bytes
Highest expansion depth: 20/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:6147-0!*!0!!en!*!* and timestamp 20250317164515 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;oldid=178699">https://en.cppreference.com/mwiki/index.php?title=c/string/byte/memmove&amp;oldid=178699</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 1.620 secs. -->
	


</body><!-- Cached 20250317164515 --></html>