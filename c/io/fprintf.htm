<!DOCTYPE html><html lang="en" dir="ltr" class="client-nojs"><head>
<title>printf, fprintf, sprintf, snprintf, printf_s, fprintf_s, sprintf_s, snprintf_s</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.21.2">
<link rel="alternate" type="application/x-wiki" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit">
<link rel="edit" title="Edit" href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit">
<link rel="shortcut icon" href="../../../favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)">
<link rel="EditURI" type="application/rsd+xml" href="../../../mwiki/api.php@action=rsd">
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="https://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom">

<meta name="ResourceLoaderDynamicStyles" content="">

<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>




<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #0000dd;}
.c.source-c .kw2 {color: #0000ff;}
.c.source-c .kw3 {color: #0000dd;}
.c.source-c .kw4 {color: #0000ff;}
.c.source-c .co1 {color: #909090;}
.c.source-c .co2 {color: #339900;}
.c.source-c .coMULTI {color: #ff0000; font-style: italic;}
.c.source-c .es0 {color: #008000; font-weight: bold;}
.c.source-c .es1 {color: #008000; font-weight: bold;}
.c.source-c .es2 {color: #008000; font-weight: bold;}
.c.source-c .es3 {color: #008000; font-weight: bold;}
.c.source-c .es4 {color: #008000; font-weight: bold;}
.c.source-c .es5 {color: #008000; font-weight: bold;}
.c.source-c .br0 {color: #008000;}
.c.source-c .sy0 {color: #008000;}
.c.source-c .sy1 {color: #000080;}
.c.source-c .sy2 {color: #000040;}
.c.source-c .sy3 {color: #000040;}
.c.source-c .sy4 {color: #008080;}
.c.source-c .st0 {color: #008000;}
.c.source-c .nu0 {color: #000080;}
.c.source-c .nu6 {color:#000080;}
.c.source-c .nu8 {color:#000080;}
.c.source-c .nu12 {color:#000080;}
.c.source-c .nu16 {color:#000080;}
.c.source-c .nu17 {color:#000080;}
.c.source-c .nu18 {color:#000080;}
.c.source-c .nu19 {color:#000080;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-c_io_fprintf skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        
        <!-- /header -->
        <!-- content -->
<style type="text/css">
#carbonads {
  display: block;
  overflow: hidden;
  position: absolute;
  text-align: center;
  left: -170px;
  max-width: 150px;
  border-radius: 4px;
  border: solid 1px hsla(0, 0%, 0%, .1);
  background-color: hsl(0, 0%, 98%);
  font-size: 12px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu,
  Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.5;
}

#carbonads a {
  color: inherit;
  text-decoration: none;
}

#carbonads a:hover {
  color: inherit;
}

#carbonads span {
  position: relative;
  display: block;
  overflow: hidden;
}

.carbon-img {
  display: block;
  margin-bottom: 8px;
  max-width: 150px;
  line-height: 1;
}

.carbon-img img {
  display: block;
  margin: 0 auto;
  max-width: 150px !important;
  width: 150px;
  height: auto;
}

.carbon-text {
  display: block;
  padding: 0 1em 8px;
}

.carbon-poweredby {
  display: block;
  padding: 8px 12px;
  background: repeating-linear-gradient(-45deg, transparent, transparent 5px, hsla(0, 0%, 0%, .025) 5px, hsla(0, 0%, 0%, .025) 10px) hsla(203, 11%, 95%, .4);
  text-transform: uppercase;
  letter-spacing: .5px;
  font-weight: 600;
  font-size: 9px;
  line-height: 1;
}
html { font-variant-ligatures: no-common-ligatures; }
</style>
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->




                <h1 id="firstHeading" class="firstHeading">printf, fprintf, sprintf, snprintf, printf_s, fprintf_s, sprintf_s, snprintf_s</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
<table class="t-dcl-begin"><tbody>
<tr class="t-dsc-header">
<td> <div>Defined in header <code><a href="../header/stdio.html" title="c/header/stdio"><tt>&lt;stdio.h&gt;</tt></a></code>
 </div></td>
<td></td>
<td></td>
</tr>
</tbody>
<tbody class="t-dcl-rev t-dcl-rev-num"><tr class="t-dcl-rev-aux">
<td></td>
<td rowspan="142">(1)</td>
<td></td>
</tr>
<tr class="t-dcl t-until-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> printf<span class="br0">(</span> <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td> <span class="t-mark-rev t-until-c99">(until C99)</span> </td>
</tr>
<tr class="t-dcl t-since-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> printf<span class="br0">(</span> <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td> <span class="t-mark-rev t-since-c99">(since C99)</span> </td>
</tr>
</tbody><tbody>
</tbody>
<tbody class="t-dcl-rev t-dcl-rev-num"><tr class="t-dcl-rev-aux">
<td></td>
<td rowspan="142">(2)</td>
<td></td>
</tr>
<tr class="t-dcl t-until-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> fprintf<span class="br0">(</span> <a href="FILE.htm"><span class="kw880">FILE</span></a><span class="sy2">*</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stream, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td> <span class="t-mark-rev t-until-c99">(until C99)</span> </td>
</tr>
<tr class="t-dcl t-since-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> fprintf<span class="br0">(</span> <a href="FILE.htm"><span class="kw880">FILE</span></a><span class="sy2">*</span> <span class="kw4">restrict</span> stream, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td> <span class="t-mark-rev t-since-c99">(since C99)</span> </td>
</tr>
</tbody><tbody>
</tbody>
<tbody class="t-dcl-rev t-dcl-rev-num"><tr class="t-dcl-rev-aux">
<td></td>
<td rowspan="142">(3)</td>
<td></td>
</tr>
<tr class="t-dcl t-until-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> sprintf<span class="br0">(</span> <span class="kw4">char</span><span class="sy2">*</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;buffer, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td> <span class="t-mark-rev t-until-c99">(until C99)</span> </td>
</tr>
<tr class="t-dcl t-since-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> sprintf<span class="br0">(</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> buffer, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td> <span class="t-mark-rev t-since-c99">(since C99)</span> </td>
</tr>
</tbody><tbody>
<tr class="t-dcl t-since-c99">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> snprintf<span class="br0">(</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> buffer, <a href="../types/size_t.html"><span class="kw100">size_t</span></a> bufsz,<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (4) </td>
<td> <span class="t-mark-rev t-since-c99">(since C99)</span> </td>
</tr>
<tr class="t-dcl t-since-c11">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> printf_s<span class="br0">(</span> <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (5) </td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span> </td>
</tr>
<tr class="t-dcl t-since-c11">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> fprintf_s<span class="br0">(</span> <a href="FILE.htm"><span class="kw880">FILE</span></a><span class="sy2">*</span> <span class="kw4">restrict</span> stream, <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (6) </td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span> </td>
</tr>
<tr class="t-dcl t-since-c11">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> sprintf_s<span class="br0">(</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> buffer, rsize_t bufsz,<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (7) </td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span> </td>
</tr>
<tr class="t-dcl t-since-c11">
<td> <div><span class="mw-geshi c source-c"><span class="kw4">int</span> snprintf_s<span class="br0">(</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> buffer, rsize_t bufsz,<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> <span class="kw4">restrict</span> format, ... <span class="br0">)</span><span class="sy4">;</span></span></div></td>
<td> (8) </td>
<td> <span class="t-mark-rev t-since-c11">(since C11)</span> </td>
</tr>
<tr class="t-dcl-sep"><td></td><td></td><td></td></tr>
</tbody></table>
<p>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks/streams:
</p>
<div class="t-li1"><span class="t-li">1)</span> Writes the results to the output stream <span class="t-lc"><a href="std_streams.htm" title="c/io/std streams">stdout</a></span>.</div>
<div class="t-li1"><span class="t-li">2)</span> Writes the results to the output stream <span class="t-c"><span class="mw-geshi c source-c">stream</span></span>.</div>
<div class="t-li1"><span class="t-li">3)</span> Writes the results to a character string <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span>. The behavior is undefined if the string to be written (plus the terminating null character) exceeds the size of the array pointed to by <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span>.</div>
<div class="t-li1"><span class="t-li">4)</span> Writes the results to a character string <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span>. At most <span class="t-c"><span class="mw-geshi c source-c">bufsz <span class="sy2">-</span> <span class="nu0">1</span></span></span> characters are written. The resulting character string will be terminated with a null character, unless <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> is zero. If <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> is zero, nothing is written and <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> may be a null pointer, however the return value (number of bytes that would be written not including the null terminator) is still calculated and returned.</div>
<div class="t-li1"><span class="t-li">5-8)</span> Same as <span class="t-v">(1-4)</span>, except that the following errors are detected at runtime and call the currently installed <a href="../error/set_constraint_handler_s.html" title="c/error/set constraint handler s">constraint handler</a> function:
<dl><dd><ul><li> the conversion specifier <code>%n</code> is present in <span class="t-c"><span class="mw-geshi c source-c">format</span></span>
</li><li> any of the arguments corresponding to <code>%s</code> is a null pointer
</li><li> <span class="t-c"><span class="mw-geshi c source-c">stream</span></span> or <span class="t-c"><span class="mw-geshi c source-c">format</span></span> or <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> is a null pointer
</li><li> <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> is zero or greater than <span class="t-lc">RSIZE_MAX</span>
</li><li> encoding errors occur in any of string and character conversion specifiers
</li><li> (for <code>sprintf_s</code> only), the string to be stored in <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> (including the trailing null) would exceed <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span>.
</li></ul>
</dd><dd>As with all bounds-checked functions, <code>printf_s</code>, <code>fprintf_s</code>, <code>sprintf_s</code>, and <code>snprintf_s</code> are only guaranteed to be available if <span class="t-c"><span class="mw-geshi c source-c">__STDC_LIB_EXT1__</span></span> is defined by the implementation and if the user defines <span class="t-c"><span class="mw-geshi c source-c">__STDC_WANT_LIB_EXT1__</span></span> to the integer constant <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> before including <a href="../header/stdio.html" title="c/header/stdio"><tt>&lt;stdio.h&gt;</tt></a>.</dd></dl></div>

<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="fprintf.htm#Parameters"><span class="tocnumber">1</span> <span class="toctext">Parameters</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="fprintf.htm#Return_value"><span class="tocnumber">2</span> <span class="toctext">Return value</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="fprintf.htm#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="fprintf.htm#Example"><span class="tocnumber">4</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="fprintf.htm#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="fprintf.htm#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit&amp;section=1" title="Edit section: Parameters">edit</a>]</span> <span class="mw-headline" id="Parameters">Parameters</span></h3>
<table class="t-par-begin">


<tbody><tr class="t-par">
<td> stream
</td>
<td> -
</td>
<td> output file stream to write to
</td></tr>
<tr class="t-par">
<td> buffer
</td>
<td> -
</td>
<td> pointer to a character string to write to
</td></tr>
<tr class="t-par">
<td> bufsz
</td>
<td> -
</td>
<td> up to <span class="t-c"><span class="mw-geshi c source-c">bufsz <span class="sy2">-</span> <span class="nu0">1</span></span></span> characters may be written, plus the null terminator
</td></tr>
<tr class="t-par">
<td> format
</td>
<td> -
</td>
<td> pointer to a null-terminated byte string specifying how to interpret the data
</td></tr>
<tr class="t-par">
<td> ...
</td>
<td> -
</td>
<td> arguments specifying data to print. If any argument after <a href="../language/conversion.html#Default_argument_promotions" title="c/language/conversion">default argument promotions</a> is not the type expected by the corresponding conversion specification (the expected type is the promoted type or a compatible type of the promoted type), or if there are fewer arguments than required by <span class="t-c"><span class="mw-geshi c source-c">format</span></span>, the behavior is undefined. If there are more arguments than required by <span class="t-c"><span class="mw-geshi c source-c">format</span></span>, the extraneous arguments are evaluated and ignored.
</td></tr></tbody></table>
<p>The <b>format</b> string consists of ordinary byte characters (except <code><b>%</b></code>), which are copied unchanged into the output stream, and conversion specifications. Each conversion specification has the following format:
</p>
<dl><dd><ul><li> introductory <code><b>%</b></code> character.
</li></ul>
</dd></dl>
<dl><dd><ul><li> <span class="t-mark">(optional)</span> one or more flags that modify the behavior of the conversion:
</li></ul>
<dl><dd><ul><li> <code><b>-</b></code>: the result of the conversion is left-justified within the field (by default it is right-justified).
</li><li> <code><b>+</b></code>: the sign of signed conversions is always prepended to the result of the conversion (by default the result is preceded by minus only when it is negative).
</li><li> <i>space</i>: if the result of a signed conversion does not start with a sign character, or is empty, space is prepended to the result. It is ignored if <code>+</code> flag is present.
</li><li> <code><b>#</b></code>: <i>alternative form</i> of the conversion is performed. See the table below for exact effects otherwise the behavior is undefined.
</li><li> <code><b>0</b></code>: for integer and floating-point number conversions, leading zeros are used to pad the field instead of <i>space</i> characters. For integer numbers it is ignored if the precision is explicitly specified. For other conversions using this flag results in undefined behavior. It is ignored if <code>-</code> flag is present.
</li></ul>
</dd></dl>
</dd></dl>
<dl><dd><ul><li> <span class="t-mark">(optional)</span> integer value or <code>*</code> that specifies minimum field width. The result is padded with <i>space</i> characters (by default), if required, on the left when right-justified, or on the right if left-justified. In the case when <code>*</code> is used, the width is specified by an additional argument of type <span class="mw-geshi c source-c"><span class="kw4">int</span></span>, which appears before the argument to be converted and the argument supplying precision if one is supplied. If the value of the argument is negative, it results with the <code>-</code> flag specified and positive field width (Note: This is the minimum width: The value is never truncated.).
</li></ul>
</dd></dl>
<dl><dd><ul><li> <span class="t-mark">(optional)</span> <code><b>.</b></code> followed by integer number or <code><b>*</b></code>, or neither that specifies <i>precision</i> of the conversion. In the case when <code>*</code> is used, the <i>precision</i> is specified by an additional argument of type <span class="mw-geshi c source-c"><span class="kw4">int</span></span>, which appears before the argument to be converted, but after the argument supplying minimum field width if one is supplied. If the value of this argument is negative, it is ignored. If neither a number nor <code><b>*</b></code> is used, the precision is taken as zero. See the table below for exact effects of <i>precision</i>.
</li></ul>
</dd></dl>
<dl><dd><ul><li> <span class="t-mark">(optional)</span> <i>length modifier</i> that specifies the size of the argument (in combination with the conversion format specifier, it specifies the type of the corresponding argument).
</li></ul>
</dd></dl>
<dl><dd><ul><li> conversion format specifier.
</li></ul>
</dd></dl>
<p>The following format specifiers are available:
</p>
<table class="wikitable" style="text-align: center;">

<tbody><tr>
<th>Conversion<br>Specifier
</th>
<th>Explanation
</th>
<th colspan="9">Expected<br>Argument Type
</th></tr>
<tr>
<th colspan="2" style="text-align: right;">Length Modifier→
</th>
<th>hh
</th>
<th>h
</th>
<th style="font-size: 0.75em; font-weight: normal; vertical-align: center">none
</th>
<th>l
</th>
<th>ll
</th>
<th>j
</th>
<th>z
</th>
<th>t
</th>
<th>L
</th></tr>
<tr>
<th colspan="2" style="text-align: right;">Only available since C99→
</th>
<th style="background: #90ff90; color: black; vertical-align: middle; text-align: center;" class="table-yes"><span style="font-weight: normal;">Yes</span>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th style="background: #90ff90; color: black; vertical-align: middle; text-align: center;" class="table-yes"><span style="font-weight: normal;">Yes</span>
</th>
<th style="background: #90ff90; color: black; vertical-align: middle; text-align: center;" class="table-yes"><span style="font-weight: normal;">Yes</span>
</th>
<th style="background: #90ff90; color: black; vertical-align: middle; text-align: center;" class="table-yes"><span style="font-weight: normal;">Yes</span>
</th>
<th style="background: #90ff90; color: black; vertical-align: middle; text-align: center;" class="table-yes"><span style="font-weight: normal;">Yes</span>
</th>
<th>
</th></tr>
<tr>
<th><code>%</code>
</th>
<td style="text-align: left;">Writes literal <code><b>%</b></code>. The full conversion specification must be <code><b>%%</b></code>.
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>c</code>
</th>
<td style="text-align: left;">
<p>Writes a <b>single character</b>.
</p>
<ul><li> The argument is first converted to <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">char</span></span>.
</li><li> If the <b>l</b> modifier is used, the argument is first converted to a character string as if by <b>%ls</b> with a <span class="mw-geshi c source-c"><span class="kw4">wchar_t</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span></span> argument.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">int</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="t-lc">wint_t</span></div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>s</code>
</th>
<td style="text-align: left;">
<p>Writes a <b>character string</b>.
</p>
<ul><li> The argument must be a pointer to the initial element of an array of characters.
</li><li> <i>Precision</i> specifies the maximum number of bytes to be written. If <i>Precision</i> is not specified, writes every byte up to and not including the first null terminator.
</li><li> If the <b>l</b> specifier is used, the argument must be a pointer to the initial element of an array of <span class="mw-geshi c source-c"><span class="kw4">wchar_t</span></span>, which is converted to char array as if by a call to <span class="t-lc"><a href="../string/multibyte/wcrtomb.html" title="c/string/multibyte/wcrtomb">wcrtomb</a></span> with zero-initialized conversion state.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">char</span><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">wchar_t</span><span class="sy2">*</span></span></div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>d</code><br><code>i</code>
</th>
<td style="text-align: left;">
<p>Converts a <b>signed integer</b> into decimal representation <i>[-]dddd</i>.
</p>
<ul><li> <i>Precision</i> specifies the minimum number of digits to appear. The default precision is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span>.
</li><li> If both the converted value and the precision are <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> the conversion results in no characters.
</li><li> For the <code><b>z</b></code> modifier, the expected argument type is the signed version of <span class="t-lc"><a href="../types/size_t.html" title="c/types/size t">size_t</a></span>.
</li></ul>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">signed</span> <span class="kw4">char</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">short</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">int</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">long</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">long</span> <span class="kw4">long</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="t-lc"><a href="../types/integer.html" title="c/types/integer">intmax_t</a></span></div></div>
</td>
<td><div class="t-vertical"><div>※</div></div>
</td>
<td><div class="t-vertical"><div><span class="t-lc"><a href="../types/ptrdiff_t.html" title="c/types/ptrdiff t">ptrdiff_t</a></span></div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>o</code>
</th>
<td style="text-align: left;">
<p>Converts an <b>unsigned integer</b> into octal representation <i>oooo</i>.
</p>
<ul><li> <i>Precision</i> specifies the minimum number of digits to appear. The default precision is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span>.
</li><li> If both the converted value and the precision are <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> the conversion results in no characters.
</li><li> In the <i>alternative implementation</i> precision is increased if necessary, to write one leading zero. In that case if both the converted value and the precision are <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>, single <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> is written.
</li></ul>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">char</span></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">short</span></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">int</span></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">long</span></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="t-lc"><a href="../types/integer.html" title="c/types/integer">uintmax_t</a></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div><span class="t-lc"><a href="../types/size_t.html" title="c/types/size t">size_t</a></span></div></div>
</td>
<td rowspan="3"><div class="t-vertical"><div>unsigned version of <span class="t-lc"><a href="../types/ptrdiff_t.html" title="c/types/ptrdiff t">ptrdiff_t</a></span></div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>x</code><br><code>X</code>
</th>
<td style="text-align: left;">
<p>Converts an <b>unsigned integer</b> into hexadecimal representation <i>hhhh</i>.
</p>
<ul><li> For the <code><b>x</b></code> conversion letters <code>abcdef</code> are used.
</li><li> For the <code><b>X</b></code> conversion letters <code>ABCDEF</code> are used.
</li><li> <i>Precision</i> specifies the minimum number of digits to appear. The default precision is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span>.
</li><li> If both the converted value and the precision are <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> the conversion results in no characters.
</li><li> In the <i>alternative implementation</i> <code><b>0x</b></code> or <code><b>0X</b></code> is prefixed to results if the converted value is nonzero.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>u</code>
</th>
<td style="text-align: left;">
<p>Converts an <b>unsigned integer</b> into decimal representation <i>dddd</i>.
</p>
<ul><li> <i>Precision</i> specifies the minimum number of digits to appear.
</li><li> The default precision is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span>.
</li><li> If both the converted value and the precision are <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span> the conversion results in no characters.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>f</code><br><span style="display: inline-block;"><code>F</code>&nbsp;<span class="t-mark-rev t-since-c99">(C99)</span></span>
</th>
<td style="text-align: left;">
<p>Converts <b>floating-point number</b> to the decimal notation in the style <i>[-]ddd.ddd</i>.
</p>
<ul><li> <i>Precision</i> specifies the exact number of digits to appear after the decimal point character.
</li><li> The default precision is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">6</span></span></span>.
</li><li> In the <i>alternative implementation</i> decimal point character is written even if no digits follow it.
</li><li> For infinity and not-a-number conversion style see <a href="fprintf.htm#Notes">notes</a>.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td rowspan="4"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">double</span></span></div></div>
</td>
<td rowspan="4"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">double</span></span> <span class="t-mark-rev t-since-c99">(C99)</span></div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td rowspan="4"><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">long</span> <span class="kw4">double</span></span></div></div>
</td></tr>
<tr>
<th><code>e</code><br><code>E</code>
</th>
<td style="text-align: left;">
<p>Converts <b>floating-point number</b> to the decimal exponent notation.
</p>
<ul><li> For the <code><b>e</b></code> conversion style <i>[-]d.ddd</i> ﻿<code><b>e</b></code><i>±dd</i> is used.
</li><li> For the <code><b>E</b></code> conversion style <i>[-]d.ddd</i> ﻿<code><b>E</b></code><i>±dd</i> is used.
</li><li> The exponent contains at least two digits, more digits are used only if necessary.
</li><li> If the value is <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>, the exponent is also <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>.
</li><li> <i>Precision</i> specifies the exact number of digits to appear after the decimal point character.
</li><li> The default precision is <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">6</span></span></span>.
</li><li> In the <i>alternative implementation</i> decimal point character is written even if no digits follow it.
</li><li> For infinity and not-a-number conversion style see <a href="fprintf.htm#Notes">notes</a>.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>a</code><br><code>A</code>
<p><span class="t-mark-rev t-since-c99">(C99)</span>
</p>
</th>
<td style="text-align: left;">
<p>Converts <b>floating-point number</b> to the hexadecimal exponent notation.
</p>
<ul><li> For the <code><b>a</b></code> conversion style <i>[-]</i> ﻿<code><b>0x</b></code><i>h.hhh</i> ﻿<code><b>p</b></code><i>±d</i> is used.
</li><li> For the <code><b>A</b></code> conversion style <i>[-]</i> ﻿<code><b>0X</b></code><i>h.hhh</i> ﻿<code><b>P</b></code><i>±d</i> is used.
</li><li> The first hexadecimal digit is not <code>0</code> if the argument is a normalized floating-point value.
</li><li> If the value is <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>, the exponent is also <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>.
</li><li> <i>Precision</i> specifies the exact number of digits to appear after the hexadecimal point character.
</li><li> The default precision is sufficient for exact representation of the value.
</li><li> In the <i>alternative implementation</i> decimal point character is written even if no digits follow it.
</li><li> For infinity and not-a-number conversion style see <a href="fprintf.htm#Notes">notes</a>.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>g</code><br><code>G</code>
</th>
<td style="text-align: left;">
<p>Converts <b>floating-point number</b> to decimal or decimal exponent notation depending on the value and the <i>precision</i>.
</p>
<ul><li> For the <code><b>g</b></code> conversion style conversion with style <code><b>e</b></code> or <code><b>f</b></code> will be performed.
</li><li> For the <code><b>G</b></code> conversion style conversion with style <code><b>E</b></code> or <span class="t-rev-inl t-until-c99"><span><code><b>f</b></code></span><span><span class="t-mark-rev t-until-c99">(until C99)</span></span></span><span class="t-rev-inl t-since-c99"><span><code><b>F</b></code></span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span> will be performed.
</li><li> Let <code>P</code> equal the precision if nonzero, <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">6</span></span></span> if the precision is not specified, or <span class="t-c"><span class="mw-geshi c source-c"><span class="nu0">1</span></span></span> if the precision is <span class="t-c"><span class="mw-geshi c source-c">​<span class="nu0">0</span>​</span></span>. Then, if a conversion with style <code>E</code> would have an exponent of <code>X</code>:
<ul><li> If <i>P &gt; X ≥ −4</i>, the conversion is with style <code><b>f</b></code><span class="t-rev-inl t-since-c99"><span> or <code><b>F</b></code></span><span><span class="t-mark-rev t-since-c99">(since C99)</span></span></span> and precision <i>P − 1 − X</i>.
</li><li> Otherwise, the conversion is with style <code><b>e</b></code> or <code><b>E</b></code> and precision <i>P − 1</i>.
</li></ul>
</li><li> Unless <i>alternative representation</i> is requested the trailing zeros are removed, also the decimal point character is removed if no fractional part is left.
</li><li> For infinity and not-a-number conversion style see <a href="fprintf.htm#Notes">notes</a>.
</li></ul>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>n</code>
</th>
<td style="text-align: left;">
<p>Returns the <b>number of characters written</b> so far by this call to the function.
</p>
<ul><li> The result is <i>written</i> to the value pointed to by the argument.
</li><li> The specification may not contain any <i>flag</i>, <i>field width</i>, or <i>precision</i>.
</li><li> For the <code><b>z</b></code> modifier, the expected argument type is <span class="mw-geshi c source-c">S<span class="sy2">*</span></span>, where <code>S</code> is the signed version of <span class="mw-geshi c source-c"><a href="../types/size_t.html"><span class="kw100">size_t</span></a></span>.
</li></ul>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">signed</span> <span class="kw4">char</span><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">short</span><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">int</span><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">long</span><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">long</span> <span class="kw4">long</span><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div><span class="t-lc"><a href="../types/integer.html" title="c/types/integer">intmax_t</a></span><span class="mw-geshi c source-c"><span class="sy2">*</span></span></div></div>
</td>
<td><div class="t-vertical"><div>※</div></div>
</td>
<td><div class="t-vertical"><div>&nbsp;<span class="t-lc"><a href="../types/ptrdiff_t.html" title="c/types/ptrdiff t">ptrdiff_t</a></span><span class="mw-geshi c source-c"><span class="sy2">*</span></span>&nbsp;</div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th><code>p</code>
</th>
<td style="text-align: left;">
<p>Writes an implementation defined character sequence defining a <b>pointer</b>.
</p>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td><div class="t-vertical"><div><span class="mw-geshi c source-c"><span class="kw4">void</span><span class="sy2">*</span></span></div></div>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td>
<td style="background: #ececec; color: grey; vertical-align: middle; text-align: center;" class="table-na"> <small>N/A</small>
</td></tr>
<tr>
<th colspan="11">Notes<span id="Notes"></span>
</th></tr>
<tr>
<td colspan="11" style="text-align: start;">
<p>The floating-point conversion functions convert infinity to <code>inf</code> or <code>infinity</code>. Which one is used is implementation defined.
</p><p>Not-a-number is converted to <code>nan</code> or <code>nan(<i>char_sequence</i>)</code>. Which one is used is implementation defined.
</p><p>The conversions <code><b>F</b></code>, <code><b>E</b></code>, <code><b>G</b></code>, <code><b>A</b></code> output <code>INF</code>, <code>INFINITY</code>, <code>NAN</code> instead.
</p><p>The conversion specifier used to print <span class="mw-geshi c source-c"><span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">signed</span> <span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">short</span></span>, and <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">short</span></span> expects promoted types of <a href="../language/conversion.html#Default_argument_promotions" title="c/language/conversion">default argument promotions</a>, but before printing its value will be converted to <span class="mw-geshi c source-c"><span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">signed</span> <span class="kw4">char</span></span>, <span class="mw-geshi c source-c"><span class="kw4">short</span></span>, and <span class="mw-geshi c source-c"><span class="kw4">unsigned</span> <span class="kw4">short</span></span>. It is safe to pass values of these types because of the promotion that takes place when a variadic function is called.
</p><p>The correct conversion specifications for the fixed-width character types (<span class="t-lc"><a href="../types/integer.html" title="c/types/integer">int8_t</a></span>, etc) are defined in the header <a href="../header/inttypes.html" title="c/header/inttypes"><tt>&lt;inttypes.h&gt;</tt></a> (although <span class="t-lc"><a href="../types/integer.html" title="c/types/integer">PRIdMAX</a></span>, <span class="t-lc"><a href="../types/integer.html" title="c/types/integer">PRIuMAX</a></span>, etc is synonymous with <code>%jd</code>, <code>%ju</code>, etc).
</p><p>The memory-writing conversion specifier <code>%n</code> is a common target of security exploits where format strings depend on user input<span class="t-rev-inl t-since-c11"><span> and is not supported by the bounds-checked <code>printf_s</code> family of functions</span><span><span class="t-mark-rev t-since-c11">(since C11)</span></span></span>.
</p><p>There is a <a href="../language/eval_order.html" title="c/language/eval order">sequence point</a> after the action of each conversion specifier; this permits storing multiple <code>%n</code> results in the same variable or, as an edge case, printing a string modified by an earlier <code>%n</code> within the same call.
</p><p>If a conversion specification is invalid, the behavior is undefined.
</p>
</td></tr></tbody></table>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit&amp;section=2" title="Edit section: Return value">edit</a>]</span> <span class="mw-headline" id="Return_value">Return value</span></h3>
<div class="t-li1"><span class="t-li">1,2)</span> number of characters transmitted to the output stream or negative value if an output error  or an encoding error (for string and character conversion specifiers) occurred.</div>
<div class="t-li1"><span class="t-li">3)</span> number of characters written to <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> (not counting the terminating null character), or a negative value if an encoding error (for string and character conversion specifiers) occurred.</div>
<div class="t-li1"><span class="t-li">4)</span> number of characters (not including the terminating null character) which would have been written to <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> if <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> was ignored, or a negative value if an encoding error (for string and character conversion specifiers) occurred.</div>
<div class="t-li1"><span class="t-li">5,6)</span> number of characters transmitted to the output stream or negative value if an output error, a runtime constraints violation error, or an encoding error occurred.</div>
<div class="t-li1"><span class="t-li">7)</span> number of characters written to <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span>, not counting the null character (which is always written as long as <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> is not a null pointer and <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> is not zero and not greater than <span class="t-lc">RSIZE_MAX</span>), or zero on runtime constraint violations, and negative value on encoding errors.</div>
<div class="t-li1"><span class="t-li">8)</span> number of characters not including the terminating null character (which is always written as long as <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> is not a null pointer and <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> is not zero and not greater than <span class="t-lc">RSIZE_MAX</span>), which would have been written to <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> if <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> was ignored, or a negative value if a runtime constraints violation or an encoding error occurred.</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>The C standard and  <a rel="nofollow" class="external text" href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/fprintf.html">POSIX</a> specify that the behavior of <code>sprintf</code> and its variants is undefined when an argument overlaps with the destination buffer. Example:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">sprintf<span class="br0">(</span>dst, <span class="st0">"%s and&nbsp;%s"</span>, dst, t<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// &lt;- broken: undefined behavior</span></pre></div></div>
<p><a rel="nofollow" class="external text" href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/fprintf.html">POSIX specifies</a> that <span class="t-lc"><a href="../error/errno.html" title="c/error/errno">errno</a></span> is set on error. It also specifies additional conversion specifications, most notably support for argument reordering (<span class="t-c"><span class="mw-geshi c source-c">n$</span></span> immediately after <span class="t-c"><span class="mw-geshi c source-c"><span class="sy2">%</span></span></span> indicates <code>n</code><sup>th</sup> argument).
</p><p>Calling <code>snprintf</code> with zero <span class="t-c"><span class="mw-geshi c source-c">bufsz</span></span> and null pointer for <span class="t-c"><span class="mw-geshi c source-c">buffer</span></span> is useful to determine the necessary buffer size to contain the output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">const</span> <span class="kw4">char</span> fmt<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="st0">"sqrt(2) =&nbsp;%f"</span><span class="sy4">;</span>
<span class="kw4">int</span> sz <span class="sy1">=</span> snprintf<span class="br0">(</span><a href="../types/NULL.html"><span class="kw103">NULL</span></a>, <span class="nu0">0</span>, fmt, <a href="../numeric/math/sqrt.html"><span class="kw665">sqrt</span></a><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
<span class="kw4">char</span> buf<span class="br0">[</span>sz <span class="sy2">+</span> <span class="nu0">1</span><span class="br0">]</span><span class="sy4">;</span> <span class="co1">// note +1 for terminating null byte</span>
snprintf<span class="br0">(</span>buf, <span class="kw4">sizeof</span> buf, fmt, <a href="../numeric/math/sqrt.html"><span class="kw665">sqrt</span></a><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span></pre></div></div>
<p><code>snprintf_s</code>, just like <code>snprintf</code>, but unlike <code>sprintf_s</code>, will truncate the output to fit in <span class="t-c"><span class="mw-geshi c source-c">bufsz <span class="sy2">-</span> <span class="nu0">1</span></span></span>.
</p>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit&amp;section=4" title="Edit section: Example">edit</a>]</span> <span class="mw-headline" id="Example">Example</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;inttypes.h&gt;</span>
<span class="co2">#include &lt;stdint.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> s <span class="sy1">=</span> <span class="st0">"Hello"</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"Strings:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// same as puts("Strings");</span>
    printf<span class="br0">(</span><span class="st0">" padding:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>[%10s]<span class="es1">\n</span>"</span>, s<span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>[%-10s]<span class="es1">\n</span>"</span>, s<span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>[%*s]<span class="es1">\n</span>"</span>, <span class="nu0">10</span>, s<span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">" truncating:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>%.4s<span class="es1">\n</span>"</span>, s<span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>%.*s<span class="es1">\n</span>"</span>, <span class="nu0">3</span>, s<span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    printf<span class="br0">(</span><span class="st0">"Characters:<span class="es1">\t</span>%c&nbsp;%%<span class="es1">\n</span>"</span>, <span class="st0">'A'</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    printf<span class="br0">(</span><span class="st0">"Integers:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Decimal:<span class="es1">\t</span>%i&nbsp;%d&nbsp;%.6i&nbsp;%i&nbsp;%.0i&nbsp;%+i&nbsp;%i<span class="es1">\n</span>"</span>,
                         <span class="nu0">1</span>, <span class="nu0">2</span>,   <span class="nu0">3</span>, <span class="nu0">0</span>,   <span class="nu0">0</span>,  <span class="nu0">4</span>,<span class="sy2">-</span><span class="nu0">4</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Hexadecimal:<span class="es1">\t</span>%x&nbsp;%x&nbsp;%X&nbsp;%#x<span class="es1">\n</span>"</span>, <span class="nu0">5</span>, <span class="nu0">10</span>, <span class="nu0">10</span>, <span class="nu0">6</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Octal:<span class="es1">\t</span><span class="es1">\t</span>%o&nbsp;%#o&nbsp;%#o<span class="es1">\n</span>"</span>, <span class="nu0">10</span>, <span class="nu0">10</span>, <span class="nu0">4</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    printf<span class="br0">(</span><span class="st0">"Floating-point:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Rounding:<span class="es1">\t</span>%f&nbsp;%.0f&nbsp;%.32f<span class="es1">\n</span>"</span>, <span class="nu16">1.5</span>, <span class="nu16">1.5</span>, <span class="nu16">1.3</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Padding:<span class="es1">\t</span>%05.2f&nbsp;%.2f&nbsp;%5.2f<span class="es1">\n</span>"</span>, <span class="nu16">1.5</span>, <span class="nu16">1.5</span>, <span class="nu16">1.5</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Scientific:<span class="es1">\t</span>%E&nbsp;%e<span class="es1">\n</span>"</span>, <span class="nu16">1.5</span>, <span class="nu16">1.5</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Hexadecimal:<span class="es1">\t</span>%a&nbsp;%A<span class="es1">\n</span>"</span>, <span class="nu16">1.5</span>, <span class="nu16">1.5</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Special values:<span class="es1">\t</span>0/0=%g 1/0=%g<span class="es1">\n</span>"</span>, <span class="nu16">0.0</span> <span class="sy2">/</span> <span class="nu16">0.0</span>, <span class="nu16">1.0</span> <span class="sy2">/</span> <span class="nu16">0.0</span><span class="br0">)</span><span class="sy4">;</span>
&nbsp;
    printf<span class="br0">(</span><span class="st0">"Fixed-width types:<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    printf<span class="br0">(</span><span class="st0">"<span class="es1">\t</span>Largest 32-bit value is&nbsp;%"</span> <a href="../types/integer.html"><span class="kw206">PRIu32</span></a> <span class="st0">" or&nbsp;%#"</span> <a href="../types/integer.html"><span class="kw234">PRIx32</span></a> <span class="st0">"<span class="es1">\n</span>"</span>,
                                     <a href="../types/integer.html"><span class="kw164">UINT32_MAX</span></a>,     <a href="../types/integer.html"><span class="kw164">UINT32_MAX</span></a> <span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span></pre></div></div>
<p>Possible output:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">Strings:
 padding:
        [     Hello]
        [Hello     ]
        [     Hello]
 truncating:
        Hell
        Hel
Characters:     A&nbsp;%
Integers:
        Decimal:        1 2 000003 0  +4 -4
        Hexadecimal:    5 a A 0x6
        Octal:          12 012 04
Floating-point:
        Rounding:       1.500000 2 1.30000000000000004440892098500626
        Padding:        01.50 1.50  1.50
        Scientific:     1.500000E+00 1.500000e+00
        Hexadecimal:    0x1.8p+0 0X1.8P+0
        Special values: 0/0=-nan 1/0=inf
Fixed-width types:
        Largest 32-bit value is 4294967295 or 0xffffffff</pre></div></div> 
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit&amp;section=5" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h3>
<div class="t-ref-std-23">
<ul><li> C23 standard (ISO/IEC 9899:2024): 
</li></ul>
<dl><dd><ul><li> 7.21.6.1 The fprintf function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.3 The printf function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.5 The snprintf function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.6 The sprintf function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.1 The fprintf_s function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.3 The printf_s function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.5 The snprintf_s function (p: TBD)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.6 The sprintf_s function (p: TBD)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-17">
<ul><li> C17 standard (ISO/IEC 9899:2018): 
</li></ul>
<dl><dd><ul><li> 7.21.6.1 The fprintf function (p: 225-230)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.3 The printf function (p: 236)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.5 The snprintf function (p: 237)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.6 The sprintf function (p: 237)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.1 The fprintf_s function (p: 430)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.3 The printf_s function (p: 432)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.5 The snprintf_s function (p: 432-433)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.6 The sprintf_s function (p: 433)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-11">
<ul><li> C11 standard (ISO/IEC 9899:2011): 
</li></ul>
<dl><dd><ul><li> 7.21.6.1 The fprintf function (p: 309-316)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.3 The printf function (p: 324)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.5 The snprintf function (p: 325)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.21.6.6 The sprintf function (p: 325-326)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.1 The fprintf_s function (p: 591)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.3 The printf_s function (p: 593-594)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.5 The snprintf_s function (p: 594-595)
</li></ul>
</dd></dl>
<dl><dd><ul><li> K.3.5.3.6 The sprintf_s function (p: 595-596)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c99">
<ul><li> C99 standard (ISO/IEC 9899:1999): 
</li></ul>
<dl><dd><ul><li> 7.19.6.1 The fprintf function (p: 274-282)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.19.6.3 The printf function (p: 290)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.19.6.5 The snprintf function (p: 290-291)
</li></ul>
</dd></dl>
<dl><dd><ul><li> 7.19.6.6 The sprintf function (p: 291)
</li></ul>
</dd></dl>
</div>
<div class="t-ref-std-c89">
<ul><li> C89/C90 standard (ISO/IEC 9899:1990): 
</li></ul>
<dl><dd><ul><li> 4.9.6.1 The fprintf function 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 4.9.6.3 The printf function 
</li></ul>
</dd></dl>
<dl><dd><ul><li> 4.9.6.5 The sprintf function 
</li></ul>
</dd></dl>
</div>
<h3><span class="editsection">[<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tbody><tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="fwprintf.htm" title="c/io/fwprintf"> <span class="t-lines"><span>wprintf</span><span>fwprintf</span><span>swprintf</span><span>wprintf_s</span><span>fwprintf_s</span><span>swprintf_s</span><span>snwprintf_s</span></span></a></div><div><span class="t-lines"><span><span class="t-mark-rev t-since-c95">(C95)</span></span><span><span class="t-mark-rev t-since-c95">(C95)</span></span><span><span class="t-mark-rev t-since-c95">(C95)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   prints formatted wide character output to <span class="t-lc"><a href="std_streams.htm" title="c/io/std streams">stdout</a></span>, a file stream or a buffer <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/io/dsc_fwprintf&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="vfprintf.htm" title="c/io/vfprintf"> <span class="t-lines"><span>vprintf</span><span>vfprintf</span><span>vsprintf</span><span>vsnprintf</span><span>vprintf_s</span><span>vfprintf_s</span><span>vsprintf_s</span><span>vsnprintf_s</span></span></a></div><div><span class="t-lines"><span></span><span></span><span></span><span><span class="t-mark-rev t-since-c99">(C99)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   prints formatted output to <span class="t-lc"><a href="std_streams.htm" title="c/io/std streams">stdout</a></span>, a file stream or a buffer<br> using variable argument list  <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/io/dsc_vfprintf&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="fputs.htm" title="c/io/fputs"> <span class="t-lines"><span>fputs</span></span></a></div></div>
</td>
<td>   writes a character string to a file stream <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/io/dsc_fputs&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td>  <div class="t-dsc-member-div"><div><a href="fscanf.htm" title="c/io/fscanf"> <span class="t-lines"><span>scanf</span><span>fscanf</span><span>sscanf</span><span>scanf_s</span><span>fscanf_s</span><span>sscanf_s</span></span></a></div><div><span class="t-lines"><span></span><span></span><span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span><span><span class="t-mark-rev t-since-c11">(C11)</span></span></span></div></div>
</td>
<td>   reads formatted input from <span class="t-lc"><a href="std_streams.htm" title="c/io/std streams">stdin</a></span>, a file stream or a buffer <br> <span class="t-mark">(function)</span> <span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="https://en.cppreference.com/mwiki/index.php?title=Template:c/io/dsc_fscanf&amp;action=edit">[edit]</a></span>
</td></tr>

<tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="https://en.cppreference.com/w/cpp/io/c/printf.html" title="cpp/io/c/fprintf">C++ documentation</a></span> for <span class="t-dsc-see-tt"><span>printf</span>, <span>fprintf</span>, <span>sprintf</span>, <span>snprintf</span></span></div>
</td></tr>

</tbody></table>

<!-- 
NewPP limit report
Preprocessor visited node count: 10903/1000000
Preprocessor generated node count: 17338/1000000
Post‐expand include size: 261813/4194304 bytes
Template argument size: 50029/4194304 bytes
Highest expansion depth: 20/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:6224-0!*!0!!en!*!* and timestamp 20250418073300 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;oldid=179645">https://en.cppreference.com/mwiki/index.php?title=c/io/fprintf&amp;oldid=179645</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id="catlinks" class="catlinks catlinks-allhidden"></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        
        <!-- /footer -->
        



<!-- Served in 5.803 secs. -->
	


</body><!-- Cached 20250418073303 --></html>